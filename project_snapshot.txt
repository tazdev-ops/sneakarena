# LMArena Bridge Project Snapshot
This file contains all important code and configuration files for the LMArena Bridge project.
Generated on: Sat Oct  4 07:50:28 PM +0330 2025
Directory: /home/mativiters/1/sneakarena/lmarena-bridge

################################################################################
# PROJECT STRUCTURE
################################################################################

.
├── config
│   ├── config.jsonc
│   ├── model_endpoint_map.json
│   └── models.json
├── Dockerfile
├── docs
├── .editorconfig
├── __init__.py
├── lmarena_bridge
│   ├── api
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── routes_chat.cpython-313.pyc
│   │   │   ├── routes_internal.cpython-313.pyc
│   │   │   └── routes_models.cpython-313.pyc
│   │   ├── routes_chat.py
│   │   ├── routes_internal.py
│   │   └── routes_models.py
│   ├── __init__.py
│   ├── logging_config.py
│   ├── main.py
│   ├── __pycache__
│   │   ├── __init__.cpython-313.pyc
│   │   ├── logging_config.cpython-313.pyc
│   │   ├── main.cpython-313.pyc
│   │   └── settings.cpython-313.pyc
│   ├── services
│   │   ├── file_bed_client.py
│   │   ├── __init__.py
│   │   ├── openai_adapter.py
│   │   ├── __pycache__
│   │   │   ├── file_bed_client.cpython-313.pyc
│   │   │   ├── openai_adapter.cpython-313.pyc
│   │   │   ├── stream_parser.cpython-313.pyc
│   │   │   └── websocket_hub.cpython-313.pyc
│   │   ├── stream_parser.py
│   │   └── websocket_hub.py
│   ├── settings.py
│   └── utils
│       ├── __init__.py
│       ├── jsonc.py
│       └── __pycache__
│           ├── __init__.cpython-313.pyc
│           └── jsonc.cpython-313.pyc
├── lmarena_bridge.egg-info
│   ├── dependency_links.txt
│   ├── entry_points.txt
│   ├── PKG-INFO
│   ├── requires.txt
│   ├── SOURCES.txt
│   └── top_level.txt
├── lmarena_bridge_gui
│   ├── gtk_app.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── gtk_app.cpython-313.pyc
│   │   └── __init__.cpython-313.pyc
│   ├── ui
│   │   ├── chat_playground.py
│   │   ├── config_editor.py
│   │   ├── endpoint_mapper.py
│   │   ├── __init__.py
│   │   ├── log_viewer.py
│   │   ├── main_window.py
│   │   ├── model_manager.py
│   │   ├── __pycache__
│   │   │   ├── chat_playground.cpython-313.pyc
│   │   │   ├── config_editor.cpython-313.pyc
│   │   │   ├── endpoint_mapper.cpython-313.pyc
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── log_viewer.cpython-313.pyc
│   │   │   ├── main_window.cpython-313.pyc
│   │   │   ├── model_manager.cpython-313.pyc
│   │   │   ├── setup_wizard.cpython-313.pyc
│   │   │   └── widgets.cpython-313.pyc
│   │   ├── setup_wizard.py
│   │   └── widgets.py
│   └── utils
│       ├── http_client.py
│       ├── __init__.py
│       ├── notifications.py
│       └── __pycache__
│           ├── http_client.cpython-313.pyc
│           ├── __init__.cpython-313.pyc
│           └── notifications.cpython-313.pyc
├── Makefile
├── packaging
│   └── systemd
│       └── lmarena-bridge.service
├── pre-commit-config.yaml
├── project_snapshot.txt
├── public
│   └── userscripts
│       └── LMArenaApiBridge.user.js
├── pyproject.toml
├── ruff.toml
├── snapshot.sh
├── tests
│   └── __init__.py
└── .venv
    ├── bin
    │   ├── activate
    │   ├── activate.csh
    │   ├── activate.fish
    │   ├── Activate.ps1
    │   ├── dotenv
    │   ├── fastapi
    │   ├── httpx
    │   ├── lmarena-bridge
    │   ├── lmarena-bridge-gui
    │   ├── normalizer
    │   ├── pip
    │   ├── pip3
    │   ├── pip3.13
    │   ├── pyjson5
    │   ├── python -> /usr/bin/python
    │   ├── python3 -> python
    │   ├── python3.13 -> python
    │   ├── uvicorn
    │   ├── watchfiles
    │   ├── websockets
    │   └── wheel
    ├── .gitignore
    ├── include
    │   ├── python3.13
    │   └── site
    │       └── python3.13
    │           └── PyGObject
    │               └── pygobject-3.0
    │                   └── pygobject.h
    ├── lib
    │   └── python3.13
    │       └── site-packages
    │           ├── annotated_types
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   └── test_cases.cpython-313.pyc
    │           │   ├── py.typed
    │           │   └── test_cases.py
    │           ├── annotated_types-0.7.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── anyio
    │           │   ├── abc
    │           │   │   ├── _eventloop.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── _eventloop.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── _resources.cpython-313.pyc
    │           │   │   │   ├── _sockets.cpython-313.pyc
    │           │   │   │   ├── _streams.cpython-313.pyc
    │           │   │   │   ├── _subprocesses.cpython-313.pyc
    │           │   │   │   ├── _tasks.cpython-313.pyc
    │           │   │   │   └── _testing.cpython-313.pyc
    │           │   │   ├── _resources.py
    │           │   │   ├── _sockets.py
    │           │   │   ├── _streams.py
    │           │   │   ├── _subprocesses.py
    │           │   │   ├── _tasks.py
    │           │   │   └── _testing.py
    │           │   ├── _backends
    │           │   │   ├── _asyncio.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── _asyncio.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   └── _trio.cpython-313.pyc
    │           │   │   └── _trio.py
    │           │   ├── _core
    │           │   │   ├── _asyncio_selector_thread.py
    │           │   │   ├── _contextmanagers.py
    │           │   │   ├── _eventloop.py
    │           │   │   ├── _exceptions.py
    │           │   │   ├── _fileio.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── _asyncio_selector_thread.cpython-313.pyc
    │           │   │   │   ├── _contextmanagers.cpython-313.pyc
    │           │   │   │   ├── _eventloop.cpython-313.pyc
    │           │   │   │   ├── _exceptions.cpython-313.pyc
    │           │   │   │   ├── _fileio.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── _resources.cpython-313.pyc
    │           │   │   │   ├── _signals.cpython-313.pyc
    │           │   │   │   ├── _sockets.cpython-313.pyc
    │           │   │   │   ├── _streams.cpython-313.pyc
    │           │   │   │   ├── _subprocesses.cpython-313.pyc
    │           │   │   │   ├── _synchronization.cpython-313.pyc
    │           │   │   │   ├── _tasks.cpython-313.pyc
    │           │   │   │   ├── _tempfile.cpython-313.pyc
    │           │   │   │   ├── _testing.cpython-313.pyc
    │           │   │   │   └── _typedattr.cpython-313.pyc
    │           │   │   ├── _resources.py
    │           │   │   ├── _signals.py
    │           │   │   ├── _sockets.py
    │           │   │   ├── _streams.py
    │           │   │   ├── _subprocesses.py
    │           │   │   ├── _synchronization.py
    │           │   │   ├── _tasks.py
    │           │   │   ├── _tempfile.py
    │           │   │   ├── _testing.py
    │           │   │   └── _typedattr.py
    │           │   ├── from_thread.py
    │           │   ├── __init__.py
    │           │   ├── lowlevel.py
    │           │   ├── __pycache__
    │           │   │   ├── from_thread.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── lowlevel.cpython-313.pyc
    │           │   │   ├── pytest_plugin.cpython-313.pyc
    │           │   │   ├── to_interpreter.cpython-313.pyc
    │           │   │   ├── to_process.cpython-313.pyc
    │           │   │   └── to_thread.cpython-313.pyc
    │           │   ├── pytest_plugin.py
    │           │   ├── py.typed
    │           │   ├── streams
    │           │   │   ├── buffered.py
    │           │   │   ├── file.py
    │           │   │   ├── __init__.py
    │           │   │   ├── memory.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── buffered.cpython-313.pyc
    │           │   │   │   ├── file.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── memory.cpython-313.pyc
    │           │   │   │   ├── stapled.cpython-313.pyc
    │           │   │   │   ├── text.cpython-313.pyc
    │           │   │   │   └── tls.cpython-313.pyc
    │           │   │   ├── stapled.py
    │           │   │   ├── text.py
    │           │   │   └── tls.py
    │           │   ├── to_interpreter.py
    │           │   ├── to_process.py
    │           │   └── to_thread.py
    │           ├── anyio-4.11.0.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── cairo
    │           │   ├── _cairo.cpython-313-x86_64-linux-gnu.so
    │           │   ├── include
    │           │   │   └── py3cairo.h
    │           │   ├── __init__.py
    │           │   ├── __init__.pyi
    │           │   ├── __pycache__
    │           │   │   └── __init__.cpython-313.pyc
    │           │   └── py.typed
    │           ├── certifi
    │           │   ├── cacert.pem
    │           │   ├── core.py
    │           │   ├── __init__.py
    │           │   ├── __main__.py
    │           │   ├── __pycache__
    │           │   │   ├── core.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   └── __main__.cpython-313.pyc
    │           │   └── py.typed
    │           ├── certifi-2025.8.3.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── charset_normalizer
    │           │   ├── api.py
    │           │   ├── cd.py
    │           │   ├── cli
    │           │   │   ├── __init__.py
    │           │   │   ├── __main__.py
    │           │   │   └── __pycache__
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       └── __main__.cpython-313.pyc
    │           │   ├── constant.py
    │           │   ├── __init__.py
    │           │   ├── legacy.py
    │           │   ├── __main__.py
    │           │   ├── md.cpython-313-x86_64-linux-gnu.so
    │           │   ├── md__mypyc.cpython-313-x86_64-linux-gnu.so
    │           │   ├── md.py
    │           │   ├── models.py
    │           │   ├── __pycache__
    │           │   │   ├── api.cpython-313.pyc
    │           │   │   ├── cd.cpython-313.pyc
    │           │   │   ├── constant.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── legacy.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── md.cpython-313.pyc
    │           │   │   ├── models.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── utils.py
    │           │   └── version.py
    │           ├── charset_normalizer-3.4.3.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── click
    │           │   ├── _compat.py
    │           │   ├── core.py
    │           │   ├── decorators.py
    │           │   ├── exceptions.py
    │           │   ├── formatting.py
    │           │   ├── globals.py
    │           │   ├── __init__.py
    │           │   ├── parser.py
    │           │   ├── __pycache__
    │           │   │   ├── _compat.cpython-313.pyc
    │           │   │   ├── core.cpython-313.pyc
    │           │   │   ├── decorators.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── formatting.cpython-313.pyc
    │           │   │   ├── globals.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── parser.cpython-313.pyc
    │           │   │   ├── shell_completion.cpython-313.pyc
    │           │   │   ├── termui.cpython-313.pyc
    │           │   │   ├── _termui_impl.cpython-313.pyc
    │           │   │   ├── testing.cpython-313.pyc
    │           │   │   ├── _textwrap.cpython-313.pyc
    │           │   │   ├── types.cpython-313.pyc
    │           │   │   ├── _utils.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── _winconsole.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── shell_completion.py
    │           │   ├── _termui_impl.py
    │           │   ├── termui.py
    │           │   ├── testing.py
    │           │   ├── _textwrap.py
    │           │   ├── types.py
    │           │   ├── _utils.py
    │           │   ├── utils.py
    │           │   └── _winconsole.py
    │           ├── click-8.3.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.txt
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── _distutils_hack
    │           │   ├── __init__.py
    │           │   ├── override.py
    │           │   └── __pycache__
    │           │       ├── __init__.cpython-313.pyc
    │           │       └── override.cpython-313.pyc
    │           ├── distutils-precedence.pth
    │           ├── dotenv
    │           │   ├── cli.py
    │           │   ├── __init__.py
    │           │   ├── ipython.py
    │           │   ├── __main__.py
    │           │   ├── main.py
    │           │   ├── parser.py
    │           │   ├── __pycache__
    │           │   │   ├── cli.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── ipython.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── main.cpython-313.pyc
    │           │   │   ├── parser.cpython-313.pyc
    │           │   │   ├── variables.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── variables.py
    │           │   └── version.py
    │           ├── __editable___lmarena_bridge_3_0_0_finder.py
    │           ├── __editable__.lmarena_bridge-3.0.0.pth
    │           ├── fastapi
    │           │   ├── applications.py
    │           │   ├── background.py
    │           │   ├── cli.py
    │           │   ├── _compat.py
    │           │   ├── concurrency.py
    │           │   ├── datastructures.py
    │           │   ├── dependencies
    │           │   │   ├── __init__.py
    │           │   │   ├── models.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── models.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   └── utils.py
    │           │   ├── encoders.py
    │           │   ├── exception_handlers.py
    │           │   ├── exceptions.py
    │           │   ├── __init__.py
    │           │   ├── logger.py
    │           │   ├── __main__.py
    │           │   ├── middleware
    │           │   │   ├── asyncexitstack.py
    │           │   │   ├── cors.py
    │           │   │   ├── gzip.py
    │           │   │   ├── httpsredirect.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── asyncexitstack.cpython-313.pyc
    │           │   │   │   ├── cors.cpython-313.pyc
    │           │   │   │   ├── gzip.cpython-313.pyc
    │           │   │   │   ├── httpsredirect.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── trustedhost.cpython-313.pyc
    │           │   │   │   └── wsgi.cpython-313.pyc
    │           │   │   ├── trustedhost.py
    │           │   │   └── wsgi.py
    │           │   ├── openapi
    │           │   │   ├── constants.py
    │           │   │   ├── docs.py
    │           │   │   ├── __init__.py
    │           │   │   ├── models.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── constants.cpython-313.pyc
    │           │   │   │   ├── docs.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── models.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   └── utils.py
    │           │   ├── param_functions.py
    │           │   ├── params.py
    │           │   ├── __pycache__
    │           │   │   ├── applications.cpython-313.pyc
    │           │   │   ├── background.cpython-313.pyc
    │           │   │   ├── cli.cpython-313.pyc
    │           │   │   ├── _compat.cpython-313.pyc
    │           │   │   ├── concurrency.cpython-313.pyc
    │           │   │   ├── datastructures.cpython-313.pyc
    │           │   │   ├── encoders.cpython-313.pyc
    │           │   │   ├── exception_handlers.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── logger.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── param_functions.cpython-313.pyc
    │           │   │   ├── params.cpython-313.pyc
    │           │   │   ├── requests.cpython-313.pyc
    │           │   │   ├── responses.cpython-313.pyc
    │           │   │   ├── routing.cpython-313.pyc
    │           │   │   ├── staticfiles.cpython-313.pyc
    │           │   │   ├── templating.cpython-313.pyc
    │           │   │   ├── testclient.cpython-313.pyc
    │           │   │   ├── types.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── websockets.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── requests.py
    │           │   ├── responses.py
    │           │   ├── routing.py
    │           │   ├── security
    │           │   │   ├── api_key.py
    │           │   │   ├── base.py
    │           │   │   ├── http.py
    │           │   │   ├── __init__.py
    │           │   │   ├── oauth2.py
    │           │   │   ├── open_id_connect_url.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── api_key.cpython-313.pyc
    │           │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   ├── http.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── oauth2.cpython-313.pyc
    │           │   │   │   ├── open_id_connect_url.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   └── utils.py
    │           │   ├── staticfiles.py
    │           │   ├── templating.py
    │           │   ├── testclient.py
    │           │   ├── types.py
    │           │   ├── utils.py
    │           │   └── websockets.py
    │           ├── fastapi-0.118.0.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── gi
    │           │   ├── _constants.py
    │           │   ├── docstring.py
    │           │   ├── _enum.py
    │           │   ├── _error.py
    │           │   ├── events.py
    │           │   ├── _gi_cairo.cpython-313-x86_64-linux-gnu.so
    │           │   ├── _gi.cpython-313-x86_64-linux-gnu.so
    │           │   ├── _gtktemplate.py
    │           │   ├── importer.py
    │           │   ├── __init__.py
    │           │   ├── module.py
    │           │   ├── _option.py
    │           │   ├── _ossighelper.py
    │           │   ├── overrides
    │           │   │   ├── GdkPixbuf.py
    │           │   │   ├── Gdk.py
    │           │   │   ├── GIMarshallingTests.py
    │           │   │   ├── Gio.py
    │           │   │   ├── GLib.py
    │           │   │   ├── GObject.py
    │           │   │   ├── Gtk.py
    │           │   │   ├── __init__.py
    │           │   │   ├── Pango.py
    │           │   │   └── __pycache__
    │           │   │       ├── Gdk.cpython-313.pyc
    │           │   │       ├── GdkPixbuf.cpython-313.pyc
    │           │   │       ├── GIMarshallingTests.cpython-313.pyc
    │           │   │       ├── Gio.cpython-313.pyc
    │           │   │       ├── GLib.cpython-313.pyc
    │           │   │       ├── GObject.cpython-313.pyc
    │           │   │       ├── Gtk.cpython-313.pyc
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       └── Pango.cpython-313.pyc
    │           │   ├── _propertyhelper.py
    │           │   ├── __pycache__
    │           │   │   ├── _constants.cpython-313.pyc
    │           │   │   ├── docstring.cpython-313.pyc
    │           │   │   ├── _enum.cpython-313.pyc
    │           │   │   ├── _error.cpython-313.pyc
    │           │   │   ├── events.cpython-313.pyc
    │           │   │   ├── _gtktemplate.cpython-313.pyc
    │           │   │   ├── importer.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── module.cpython-313.pyc
    │           │   │   ├── _option.cpython-313.pyc
    │           │   │   ├── _ossighelper.cpython-313.pyc
    │           │   │   ├── _propertyhelper.cpython-313.pyc
    │           │   │   ├── pygtkcompat.cpython-313.pyc
    │           │   │   ├── _signalhelper.cpython-313.pyc
    │           │   │   ├── _signature.cpython-313.pyc
    │           │   │   └── types.cpython-313.pyc
    │           │   ├── pygtkcompat.py
    │           │   ├── repository
    │           │   │   ├── __init__.py
    │           │   │   └── __pycache__
    │           │   │       └── __init__.cpython-313.pyc
    │           │   ├── _signalhelper.py
    │           │   ├── _signature.py
    │           │   └── types.py
    │           ├── h11
    │           │   ├── _abnf.py
    │           │   ├── _connection.py
    │           │   ├── _events.py
    │           │   ├── _headers.py
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   ├── _abnf.cpython-313.pyc
    │           │   │   ├── _connection.cpython-313.pyc
    │           │   │   ├── _events.cpython-313.pyc
    │           │   │   ├── _headers.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _readers.cpython-313.pyc
    │           │   │   ├── _receivebuffer.cpython-313.pyc
    │           │   │   ├── _state.cpython-313.pyc
    │           │   │   ├── _util.cpython-313.pyc
    │           │   │   ├── _version.cpython-313.pyc
    │           │   │   └── _writers.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── _readers.py
    │           │   ├── _receivebuffer.py
    │           │   ├── _state.py
    │           │   ├── _util.py
    │           │   ├── _version.py
    │           │   └── _writers.py
    │           ├── h11-0.16.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.txt
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── httpcore
    │           │   ├── _api.py
    │           │   ├── _async
    │           │   │   ├── connection_pool.py
    │           │   │   ├── connection.py
    │           │   │   ├── http11.py
    │           │   │   ├── http2.py
    │           │   │   ├── http_proxy.py
    │           │   │   ├── __init__.py
    │           │   │   ├── interfaces.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   ├── connection_pool.cpython-313.pyc
    │           │   │   │   ├── http11.cpython-313.pyc
    │           │   │   │   ├── http2.cpython-313.pyc
    │           │   │   │   ├── http_proxy.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── interfaces.cpython-313.pyc
    │           │   │   │   └── socks_proxy.cpython-313.pyc
    │           │   │   └── socks_proxy.py
    │           │   ├── _backends
    │           │   │   ├── anyio.py
    │           │   │   ├── auto.py
    │           │   │   ├── base.py
    │           │   │   ├── __init__.py
    │           │   │   ├── mock.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── anyio.cpython-313.pyc
    │           │   │   │   ├── auto.cpython-313.pyc
    │           │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── mock.cpython-313.pyc
    │           │   │   │   ├── sync.cpython-313.pyc
    │           │   │   │   └── trio.cpython-313.pyc
    │           │   │   ├── sync.py
    │           │   │   └── trio.py
    │           │   ├── _exceptions.py
    │           │   ├── __init__.py
    │           │   ├── _models.py
    │           │   ├── __pycache__
    │           │   │   ├── _api.cpython-313.pyc
    │           │   │   ├── _exceptions.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _models.cpython-313.pyc
    │           │   │   ├── _ssl.cpython-313.pyc
    │           │   │   ├── _synchronization.cpython-313.pyc
    │           │   │   ├── _trace.cpython-313.pyc
    │           │   │   └── _utils.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── _ssl.py
    │           │   ├── _sync
    │           │   │   ├── connection_pool.py
    │           │   │   ├── connection.py
    │           │   │   ├── http11.py
    │           │   │   ├── http2.py
    │           │   │   ├── http_proxy.py
    │           │   │   ├── __init__.py
    │           │   │   ├── interfaces.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   ├── connection_pool.cpython-313.pyc
    │           │   │   │   ├── http11.cpython-313.pyc
    │           │   │   │   ├── http2.cpython-313.pyc
    │           │   │   │   ├── http_proxy.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── interfaces.cpython-313.pyc
    │           │   │   │   └── socks_proxy.cpython-313.pyc
    │           │   │   └── socks_proxy.py
    │           │   ├── _synchronization.py
    │           │   ├── _trace.py
    │           │   └── _utils.py
    │           ├── httpcore-1.0.9.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.md
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── httptools
    │           │   ├── __init__.py
    │           │   ├── parser
    │           │   │   ├── cparser.pxd
    │           │   │   ├── errors.py
    │           │   │   ├── __init__.py
    │           │   │   ├── parser.cpython-313-x86_64-linux-gnu.so
    │           │   │   ├── parser.pyx
    │           │   │   ├── __pycache__
    │           │   │   │   ├── errors.cpython-313.pyc
    │           │   │   │   └── __init__.cpython-313.pyc
    │           │   │   ├── python.pxd
    │           │   │   ├── url_cparser.pxd
    │           │   │   ├── url_parser.cpython-313-x86_64-linux-gnu.so
    │           │   │   └── url_parser.pyx
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   └── _version.cpython-313.pyc
    │           │   └── _version.py
    │           ├── httptools-0.6.4.dist-info
    │           │   ├── INSTALLER
    │           │   ├── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── httpx
    │           │   ├── _api.py
    │           │   ├── _auth.py
    │           │   ├── _client.py
    │           │   ├── _config.py
    │           │   ├── _content.py
    │           │   ├── _decoders.py
    │           │   ├── _exceptions.py
    │           │   ├── __init__.py
    │           │   ├── _main.py
    │           │   ├── _models.py
    │           │   ├── _multipart.py
    │           │   ├── __pycache__
    │           │   │   ├── _api.cpython-313.pyc
    │           │   │   ├── _auth.cpython-313.pyc
    │           │   │   ├── _client.cpython-313.pyc
    │           │   │   ├── _config.cpython-313.pyc
    │           │   │   ├── _content.cpython-313.pyc
    │           │   │   ├── _decoders.cpython-313.pyc
    │           │   │   ├── _exceptions.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _main.cpython-313.pyc
    │           │   │   ├── _models.cpython-313.pyc
    │           │   │   ├── _multipart.cpython-313.pyc
    │           │   │   ├── _status_codes.cpython-313.pyc
    │           │   │   ├── _types.cpython-313.pyc
    │           │   │   ├── _urlparse.cpython-313.pyc
    │           │   │   ├── _urls.cpython-313.pyc
    │           │   │   ├── _utils.cpython-313.pyc
    │           │   │   └── __version__.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── _status_codes.py
    │           │   ├── _transports
    │           │   │   ├── asgi.py
    │           │   │   ├── base.py
    │           │   │   ├── default.py
    │           │   │   ├── __init__.py
    │           │   │   ├── mock.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── asgi.cpython-313.pyc
    │           │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   ├── default.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── mock.cpython-313.pyc
    │           │   │   │   └── wsgi.cpython-313.pyc
    │           │   │   └── wsgi.py
    │           │   ├── _types.py
    │           │   ├── _urlparse.py
    │           │   ├── _urls.py
    │           │   ├── _utils.py
    │           │   └── __version__.py
    │           ├── httpx-0.28.1.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.md
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── idna
    │           │   ├── codec.py
    │           │   ├── compat.py
    │           │   ├── core.py
    │           │   ├── idnadata.py
    │           │   ├── __init__.py
    │           │   ├── intranges.py
    │           │   ├── package_data.py
    │           │   ├── __pycache__
    │           │   │   ├── codec.cpython-313.pyc
    │           │   │   ├── compat.cpython-313.pyc
    │           │   │   ├── core.cpython-313.pyc
    │           │   │   ├── idnadata.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── intranges.cpython-313.pyc
    │           │   │   ├── package_data.cpython-313.pyc
    │           │   │   └── uts46data.cpython-313.pyc
    │           │   ├── py.typed
    │           │   └── uts46data.py
    │           ├── idna-3.10.dist-info
    │           │   ├── INSTALLER
    │           │   ├── LICENSE.md
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── json5
    │           │   ├── host.py
    │           │   ├── __init__.py
    │           │   ├── lib.py
    │           │   ├── __main__.py
    │           │   ├── parser.py
    │           │   ├── __pycache__
    │           │   │   ├── host.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── lib.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── parser.cpython-313.pyc
    │           │   │   ├── tool.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── tool.py
    │           │   └── version.py
    │           ├── json5-0.12.1.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── lmarena_bridge-3.0.0.dist-info
    │           │   ├── direct_url.json
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── REQUESTED
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── packaging
    │           │   ├── _elffile.py
    │           │   ├── __init__.py
    │           │   ├── licenses
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   └── _spdx.cpython-313.pyc
    │           │   │   └── _spdx.py
    │           │   ├── _manylinux.py
    │           │   ├── markers.py
    │           │   ├── metadata.py
    │           │   ├── _musllinux.py
    │           │   ├── _parser.py
    │           │   ├── __pycache__
    │           │   │   ├── _elffile.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _manylinux.cpython-313.pyc
    │           │   │   ├── markers.cpython-313.pyc
    │           │   │   ├── metadata.cpython-313.pyc
    │           │   │   ├── _musllinux.cpython-313.pyc
    │           │   │   ├── _parser.cpython-313.pyc
    │           │   │   ├── requirements.cpython-313.pyc
    │           │   │   ├── specifiers.cpython-313.pyc
    │           │   │   ├── _structures.cpython-313.pyc
    │           │   │   ├── tags.cpython-313.pyc
    │           │   │   ├── _tokenizer.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── requirements.py
    │           │   ├── specifiers.py
    │           │   ├── _structures.py
    │           │   ├── tags.py
    │           │   ├── _tokenizer.py
    │           │   ├── utils.py
    │           │   └── version.py
    │           ├── packaging-25.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   ├── LICENSE
    │           │   │   ├── LICENSE.APACHE
    │           │   │   └── LICENSE.BSD
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pip
    │           │   ├── __init__.py
    │           │   ├── _internal
    │           │   │   ├── build_env.py
    │           │   │   ├── cache.py
    │           │   │   ├── cli
    │           │   │   │   ├── autocompletion.py
    │           │   │   │   ├── base_command.py
    │           │   │   │   ├── cmdoptions.py
    │           │   │   │   ├── command_context.py
    │           │   │   │   ├── index_command.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── main_parser.py
    │           │   │   │   ├── main.py
    │           │   │   │   ├── parser.py
    │           │   │   │   ├── progress_bars.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── autocompletion.cpython-313.pyc
    │           │   │   │   │   ├── base_command.cpython-313.pyc
    │           │   │   │   │   ├── cmdoptions.cpython-313.pyc
    │           │   │   │   │   ├── command_context.cpython-313.pyc
    │           │   │   │   │   ├── index_command.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── main.cpython-313.pyc
    │           │   │   │   │   ├── main_parser.cpython-313.pyc
    │           │   │   │   │   ├── parser.cpython-313.pyc
    │           │   │   │   │   ├── progress_bars.cpython-313.pyc
    │           │   │   │   │   ├── req_command.cpython-313.pyc
    │           │   │   │   │   ├── spinners.cpython-313.pyc
    │           │   │   │   │   └── status_codes.cpython-313.pyc
    │           │   │   │   ├── req_command.py
    │           │   │   │   ├── spinners.py
    │           │   │   │   └── status_codes.py
    │           │   │   ├── commands
    │           │   │   │   ├── cache.py
    │           │   │   │   ├── check.py
    │           │   │   │   ├── completion.py
    │           │   │   │   ├── configuration.py
    │           │   │   │   ├── debug.py
    │           │   │   │   ├── download.py
    │           │   │   │   ├── freeze.py
    │           │   │   │   ├── hash.py
    │           │   │   │   ├── help.py
    │           │   │   │   ├── index.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── inspect.py
    │           │   │   │   ├── install.py
    │           │   │   │   ├── list.py
    │           │   │   │   ├── lock.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── cache.cpython-313.pyc
    │           │   │   │   │   ├── check.cpython-313.pyc
    │           │   │   │   │   ├── completion.cpython-313.pyc
    │           │   │   │   │   ├── configuration.cpython-313.pyc
    │           │   │   │   │   ├── debug.cpython-313.pyc
    │           │   │   │   │   ├── download.cpython-313.pyc
    │           │   │   │   │   ├── freeze.cpython-313.pyc
    │           │   │   │   │   ├── hash.cpython-313.pyc
    │           │   │   │   │   ├── help.cpython-313.pyc
    │           │   │   │   │   ├── index.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── inspect.cpython-313.pyc
    │           │   │   │   │   ├── install.cpython-313.pyc
    │           │   │   │   │   ├── list.cpython-313.pyc
    │           │   │   │   │   ├── lock.cpython-313.pyc
    │           │   │   │   │   ├── search.cpython-313.pyc
    │           │   │   │   │   ├── show.cpython-313.pyc
    │           │   │   │   │   ├── uninstall.cpython-313.pyc
    │           │   │   │   │   └── wheel.cpython-313.pyc
    │           │   │   │   ├── search.py
    │           │   │   │   ├── show.py
    │           │   │   │   ├── uninstall.py
    │           │   │   │   └── wheel.py
    │           │   │   ├── configuration.py
    │           │   │   ├── distributions
    │           │   │   │   ├── base.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── installed.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── installed.cpython-313.pyc
    │           │   │   │   │   ├── sdist.cpython-313.pyc
    │           │   │   │   │   └── wheel.cpython-313.pyc
    │           │   │   │   ├── sdist.py
    │           │   │   │   └── wheel.py
    │           │   │   ├── exceptions.py
    │           │   │   ├── index
    │           │   │   │   ├── collector.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── package_finder.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── collector.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── package_finder.cpython-313.pyc
    │           │   │   │   │   └── sources.cpython-313.pyc
    │           │   │   │   └── sources.py
    │           │   │   ├── __init__.py
    │           │   │   ├── locations
    │           │   │   │   ├── base.py
    │           │   │   │   ├── _distutils.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   │   ├── _distutils.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   └── _sysconfig.cpython-313.pyc
    │           │   │   │   └── _sysconfig.py
    │           │   │   ├── main.py
    │           │   │   ├── metadata
    │           │   │   │   ├── base.py
    │           │   │   │   ├── importlib
    │           │   │   │   │   ├── _compat.py
    │           │   │   │   │   ├── _dists.py
    │           │   │   │   │   ├── _envs.py
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── _compat.cpython-313.pyc
    │           │   │   │   │       ├── _dists.cpython-313.pyc
    │           │   │   │   │       ├── _envs.cpython-313.pyc
    │           │   │   │   │       └── __init__.cpython-313.pyc
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── _json.py
    │           │   │   │   ├── pkg_resources.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── base.cpython-313.pyc
    │           │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │       ├── _json.cpython-313.pyc
    │           │   │   │       └── pkg_resources.cpython-313.pyc
    │           │   │   ├── models
    │           │   │   │   ├── candidate.py
    │           │   │   │   ├── direct_url.py
    │           │   │   │   ├── format_control.py
    │           │   │   │   ├── index.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── installation_report.py
    │           │   │   │   ├── link.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── candidate.cpython-313.pyc
    │           │   │   │   │   ├── direct_url.cpython-313.pyc
    │           │   │   │   │   ├── format_control.cpython-313.pyc
    │           │   │   │   │   ├── index.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── installation_report.cpython-313.pyc
    │           │   │   │   │   ├── link.cpython-313.pyc
    │           │   │   │   │   ├── pylock.cpython-313.pyc
    │           │   │   │   │   ├── scheme.cpython-313.pyc
    │           │   │   │   │   ├── search_scope.cpython-313.pyc
    │           │   │   │   │   ├── selection_prefs.cpython-313.pyc
    │           │   │   │   │   ├── target_python.cpython-313.pyc
    │           │   │   │   │   └── wheel.cpython-313.pyc
    │           │   │   │   ├── pylock.py
    │           │   │   │   ├── scheme.py
    │           │   │   │   ├── search_scope.py
    │           │   │   │   ├── selection_prefs.py
    │           │   │   │   ├── target_python.py
    │           │   │   │   └── wheel.py
    │           │   │   ├── network
    │           │   │   │   ├── auth.py
    │           │   │   │   ├── cache.py
    │           │   │   │   ├── download.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── lazy_wheel.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── auth.cpython-313.pyc
    │           │   │   │   │   ├── cache.cpython-313.pyc
    │           │   │   │   │   ├── download.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── lazy_wheel.cpython-313.pyc
    │           │   │   │   │   ├── session.cpython-313.pyc
    │           │   │   │   │   ├── utils.cpython-313.pyc
    │           │   │   │   │   └── xmlrpc.cpython-313.pyc
    │           │   │   │   ├── session.py
    │           │   │   │   ├── utils.py
    │           │   │   │   └── xmlrpc.py
    │           │   │   ├── operations
    │           │   │   │   ├── build
    │           │   │   │   │   ├── build_tracker.py
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── metadata_editable.py
    │           │   │   │   │   ├── metadata_legacy.py
    │           │   │   │   │   ├── metadata.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   ├── build_tracker.cpython-313.pyc
    │           │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   ├── metadata.cpython-313.pyc
    │           │   │   │   │   │   ├── metadata_editable.cpython-313.pyc
    │           │   │   │   │   │   ├── metadata_legacy.cpython-313.pyc
    │           │   │   │   │   │   ├── wheel.cpython-313.pyc
    │           │   │   │   │   │   ├── wheel_editable.cpython-313.pyc
    │           │   │   │   │   │   └── wheel_legacy.cpython-313.pyc
    │           │   │   │   │   ├── wheel_editable.py
    │           │   │   │   │   ├── wheel_legacy.py
    │           │   │   │   │   └── wheel.py
    │           │   │   │   ├── check.py
    │           │   │   │   ├── freeze.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── install
    │           │   │   │   │   ├── editable_legacy.py
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   ├── editable_legacy.cpython-313.pyc
    │           │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   └── wheel.cpython-313.pyc
    │           │   │   │   │   └── wheel.py
    │           │   │   │   ├── prepare.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── check.cpython-313.pyc
    │           │   │   │       ├── freeze.cpython-313.pyc
    │           │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │       └── prepare.cpython-313.pyc
    │           │   │   ├── __pycache__
    │           │   │   │   ├── build_env.cpython-313.pyc
    │           │   │   │   ├── cache.cpython-313.pyc
    │           │   │   │   ├── configuration.cpython-313.pyc
    │           │   │   │   ├── exceptions.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── main.cpython-313.pyc
    │           │   │   │   ├── pyproject.cpython-313.pyc
    │           │   │   │   ├── self_outdated_check.cpython-313.pyc
    │           │   │   │   └── wheel_builder.cpython-313.pyc
    │           │   │   ├── pyproject.py
    │           │   │   ├── req
    │           │   │   │   ├── constructors.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── constructors.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── req_dependency_group.cpython-313.pyc
    │           │   │   │   │   ├── req_file.cpython-313.pyc
    │           │   │   │   │   ├── req_install.cpython-313.pyc
    │           │   │   │   │   ├── req_set.cpython-313.pyc
    │           │   │   │   │   └── req_uninstall.cpython-313.pyc
    │           │   │   │   ├── req_dependency_group.py
    │           │   │   │   ├── req_file.py
    │           │   │   │   ├── req_install.py
    │           │   │   │   ├── req_set.py
    │           │   │   │   └── req_uninstall.py
    │           │   │   ├── resolution
    │           │   │   │   ├── base.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── legacy
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   └── resolver.cpython-313.pyc
    │           │   │   │   │   └── resolver.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   └── resolvelib
    │           │   │   │       ├── base.py
    │           │   │   │       ├── candidates.py
    │           │   │   │       ├── factory.py
    │           │   │   │       ├── found_candidates.py
    │           │   │   │       ├── __init__.py
    │           │   │   │       ├── provider.py
    │           │   │   │       ├── __pycache__
    │           │   │   │       │   ├── base.cpython-313.pyc
    │           │   │   │       │   ├── candidates.cpython-313.pyc
    │           │   │   │       │   ├── factory.cpython-313.pyc
    │           │   │   │       │   ├── found_candidates.cpython-313.pyc
    │           │   │   │       │   ├── __init__.cpython-313.pyc
    │           │   │   │       │   ├── provider.cpython-313.pyc
    │           │   │   │       │   ├── reporter.cpython-313.pyc
    │           │   │   │       │   ├── requirements.cpython-313.pyc
    │           │   │   │       │   └── resolver.cpython-313.pyc
    │           │   │   │       ├── reporter.py
    │           │   │   │       ├── requirements.py
    │           │   │   │       └── resolver.py
    │           │   │   ├── self_outdated_check.py
    │           │   │   ├── utils
    │           │   │   │   ├── appdirs.py
    │           │   │   │   ├── compatibility_tags.py
    │           │   │   │   ├── compat.py
    │           │   │   │   ├── datetime.py
    │           │   │   │   ├── deprecation.py
    │           │   │   │   ├── direct_url_helpers.py
    │           │   │   │   ├── egg_link.py
    │           │   │   │   ├── entrypoints.py
    │           │   │   │   ├── filesystem.py
    │           │   │   │   ├── filetypes.py
    │           │   │   │   ├── glibc.py
    │           │   │   │   ├── hashes.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── _jaraco_text.py
    │           │   │   │   ├── logging.py
    │           │   │   │   ├── _log.py
    │           │   │   │   ├── misc.py
    │           │   │   │   ├── packaging.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── appdirs.cpython-313.pyc
    │           │   │   │   │   ├── compat.cpython-313.pyc
    │           │   │   │   │   ├── compatibility_tags.cpython-313.pyc
    │           │   │   │   │   ├── datetime.cpython-313.pyc
    │           │   │   │   │   ├── deprecation.cpython-313.pyc
    │           │   │   │   │   ├── direct_url_helpers.cpython-313.pyc
    │           │   │   │   │   ├── egg_link.cpython-313.pyc
    │           │   │   │   │   ├── entrypoints.cpython-313.pyc
    │           │   │   │   │   ├── filesystem.cpython-313.pyc
    │           │   │   │   │   ├── filetypes.cpython-313.pyc
    │           │   │   │   │   ├── glibc.cpython-313.pyc
    │           │   │   │   │   ├── hashes.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _jaraco_text.cpython-313.pyc
    │           │   │   │   │   ├── _log.cpython-313.pyc
    │           │   │   │   │   ├── logging.cpython-313.pyc
    │           │   │   │   │   ├── misc.cpython-313.pyc
    │           │   │   │   │   ├── packaging.cpython-313.pyc
    │           │   │   │   │   ├── retry.cpython-313.pyc
    │           │   │   │   │   ├── setuptools_build.cpython-313.pyc
    │           │   │   │   │   ├── subprocess.cpython-313.pyc
    │           │   │   │   │   ├── temp_dir.cpython-313.pyc
    │           │   │   │   │   ├── unpacking.cpython-313.pyc
    │           │   │   │   │   ├── urls.cpython-313.pyc
    │           │   │   │   │   ├── virtualenv.cpython-313.pyc
    │           │   │   │   │   └── wheel.cpython-313.pyc
    │           │   │   │   ├── retry.py
    │           │   │   │   ├── setuptools_build.py
    │           │   │   │   ├── subprocess.py
    │           │   │   │   ├── temp_dir.py
    │           │   │   │   ├── unpacking.py
    │           │   │   │   ├── urls.py
    │           │   │   │   ├── virtualenv.py
    │           │   │   │   └── wheel.py
    │           │   │   ├── vcs
    │           │   │   │   ├── bazaar.py
    │           │   │   │   ├── git.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── mercurial.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── bazaar.cpython-313.pyc
    │           │   │   │   │   ├── git.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── mercurial.cpython-313.pyc
    │           │   │   │   │   ├── subversion.cpython-313.pyc
    │           │   │   │   │   └── versioncontrol.cpython-313.pyc
    │           │   │   │   ├── subversion.py
    │           │   │   │   └── versioncontrol.py
    │           │   │   └── wheel_builder.py
    │           │   ├── __main__.py
    │           │   ├── __pip-runner__.py
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   └── __pip-runner__.cpython-313.pyc
    │           │   ├── py.typed
    │           │   └── _vendor
    │           │       ├── cachecontrol
    │           │       │   ├── adapter.py
    │           │       │   ├── cache.py
    │           │       │   ├── caches
    │           │       │   │   ├── file_cache.py
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── file_cache.cpython-313.pyc
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   └── redis_cache.cpython-313.pyc
    │           │       │   │   └── redis_cache.py
    │           │       │   ├── _cmd.py
    │           │       │   ├── controller.py
    │           │       │   ├── filewrapper.py
    │           │       │   ├── heuristics.py
    │           │       │   ├── __init__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── adapter.cpython-313.pyc
    │           │       │   │   ├── cache.cpython-313.pyc
    │           │       │   │   ├── _cmd.cpython-313.pyc
    │           │       │   │   ├── controller.cpython-313.pyc
    │           │       │   │   ├── filewrapper.cpython-313.pyc
    │           │       │   │   ├── heuristics.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── serialize.cpython-313.pyc
    │           │       │   │   └── wrapper.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── serialize.py
    │           │       │   └── wrapper.py
    │           │       ├── certifi
    │           │       │   ├── cacert.pem
    │           │       │   ├── core.py
    │           │       │   ├── __init__.py
    │           │       │   ├── __main__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── core.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   └── __main__.cpython-313.pyc
    │           │       │   └── py.typed
    │           │       ├── dependency_groups
    │           │       │   ├── _implementation.py
    │           │       │   ├── __init__.py
    │           │       │   ├── _lint_dependency_groups.py
    │           │       │   ├── __main__.py
    │           │       │   ├── _pip_wrapper.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── _implementation.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _lint_dependency_groups.cpython-313.pyc
    │           │       │   │   ├── __main__.cpython-313.pyc
    │           │       │   │   ├── _pip_wrapper.cpython-313.pyc
    │           │       │   │   └── _toml_compat.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   └── _toml_compat.py
    │           │       ├── distlib
    │           │       │   ├── compat.py
    │           │       │   ├── __init__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── compat.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── resources.cpython-313.pyc
    │           │       │   │   ├── scripts.cpython-313.pyc
    │           │       │   │   └── util.cpython-313.pyc
    │           │       │   ├── resources.py
    │           │       │   ├── scripts.py
    │           │       │   ├── t32.exe
    │           │       │   ├── t64-arm.exe
    │           │       │   ├── t64.exe
    │           │       │   ├── util.py
    │           │       │   ├── w32.exe
    │           │       │   ├── w64-arm.exe
    │           │       │   └── w64.exe
    │           │       ├── distro
    │           │       │   ├── distro.py
    │           │       │   ├── __init__.py
    │           │       │   ├── __main__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── distro.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   └── __main__.cpython-313.pyc
    │           │       │   └── py.typed
    │           │       ├── idna
    │           │       │   ├── codec.py
    │           │       │   ├── compat.py
    │           │       │   ├── core.py
    │           │       │   ├── idnadata.py
    │           │       │   ├── __init__.py
    │           │       │   ├── intranges.py
    │           │       │   ├── package_data.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── codec.cpython-313.pyc
    │           │       │   │   ├── compat.cpython-313.pyc
    │           │       │   │   ├── core.cpython-313.pyc
    │           │       │   │   ├── idnadata.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── intranges.cpython-313.pyc
    │           │       │   │   ├── package_data.cpython-313.pyc
    │           │       │   │   └── uts46data.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   └── uts46data.py
    │           │       ├── __init__.py
    │           │       ├── msgpack
    │           │       │   ├── exceptions.py
    │           │       │   ├── ext.py
    │           │       │   ├── fallback.py
    │           │       │   ├── __init__.py
    │           │       │   └── __pycache__
    │           │       │       ├── exceptions.cpython-313.pyc
    │           │       │       ├── ext.cpython-313.pyc
    │           │       │       ├── fallback.cpython-313.pyc
    │           │       │       └── __init__.cpython-313.pyc
    │           │       ├── packaging
    │           │       │   ├── _elffile.py
    │           │       │   ├── __init__.py
    │           │       │   ├── licenses
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   └── _spdx.cpython-313.pyc
    │           │       │   │   └── _spdx.py
    │           │       │   ├── _manylinux.py
    │           │       │   ├── markers.py
    │           │       │   ├── metadata.py
    │           │       │   ├── _musllinux.py
    │           │       │   ├── _parser.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── _elffile.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _manylinux.cpython-313.pyc
    │           │       │   │   ├── markers.cpython-313.pyc
    │           │       │   │   ├── metadata.cpython-313.pyc
    │           │       │   │   ├── _musllinux.cpython-313.pyc
    │           │       │   │   ├── _parser.cpython-313.pyc
    │           │       │   │   ├── requirements.cpython-313.pyc
    │           │       │   │   ├── specifiers.cpython-313.pyc
    │           │       │   │   ├── _structures.cpython-313.pyc
    │           │       │   │   ├── tags.cpython-313.pyc
    │           │       │   │   ├── _tokenizer.cpython-313.pyc
    │           │       │   │   ├── utils.cpython-313.pyc
    │           │       │   │   └── version.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── requirements.py
    │           │       │   ├── specifiers.py
    │           │       │   ├── _structures.py
    │           │       │   ├── tags.py
    │           │       │   ├── _tokenizer.py
    │           │       │   ├── utils.py
    │           │       │   └── version.py
    │           │       ├── pkg_resources
    │           │       │   ├── __init__.py
    │           │       │   └── __pycache__
    │           │       │       └── __init__.cpython-313.pyc
    │           │       ├── platformdirs
    │           │       │   ├── android.py
    │           │       │   ├── api.py
    │           │       │   ├── __init__.py
    │           │       │   ├── macos.py
    │           │       │   ├── __main__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── android.cpython-313.pyc
    │           │       │   │   ├── api.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── macos.cpython-313.pyc
    │           │       │   │   ├── __main__.cpython-313.pyc
    │           │       │   │   ├── unix.cpython-313.pyc
    │           │       │   │   ├── version.cpython-313.pyc
    │           │       │   │   └── windows.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── unix.py
    │           │       │   ├── version.py
    │           │       │   └── windows.py
    │           │       ├── __pycache__
    │           │       │   └── __init__.cpython-313.pyc
    │           │       ├── pygments
    │           │       │   ├── console.py
    │           │       │   ├── filter.py
    │           │       │   ├── filters
    │           │       │   │   ├── __init__.py
    │           │       │   │   └── __pycache__
    │           │       │   │       └── __init__.cpython-313.pyc
    │           │       │   ├── formatter.py
    │           │       │   ├── formatters
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── _mapping.py
    │           │       │   │   └── __pycache__
    │           │       │   │       ├── __init__.cpython-313.pyc
    │           │       │   │       └── _mapping.cpython-313.pyc
    │           │       │   ├── __init__.py
    │           │       │   ├── lexer.py
    │           │       │   ├── lexers
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── _mapping.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   ├── _mapping.cpython-313.pyc
    │           │       │   │   │   └── python.cpython-313.pyc
    │           │       │   │   └── python.py
    │           │       │   ├── __main__.py
    │           │       │   ├── modeline.py
    │           │       │   ├── plugin.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── console.cpython-313.pyc
    │           │       │   │   ├── filter.cpython-313.pyc
    │           │       │   │   ├── formatter.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── lexer.cpython-313.pyc
    │           │       │   │   ├── __main__.cpython-313.pyc
    │           │       │   │   ├── modeline.cpython-313.pyc
    │           │       │   │   ├── plugin.cpython-313.pyc
    │           │       │   │   ├── regexopt.cpython-313.pyc
    │           │       │   │   ├── scanner.cpython-313.pyc
    │           │       │   │   ├── sphinxext.cpython-313.pyc
    │           │       │   │   ├── style.cpython-313.pyc
    │           │       │   │   ├── token.cpython-313.pyc
    │           │       │   │   ├── unistring.cpython-313.pyc
    │           │       │   │   └── util.cpython-313.pyc
    │           │       │   ├── regexopt.py
    │           │       │   ├── scanner.py
    │           │       │   ├── sphinxext.py
    │           │       │   ├── style.py
    │           │       │   ├── styles
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── _mapping.py
    │           │       │   │   └── __pycache__
    │           │       │   │       ├── __init__.cpython-313.pyc
    │           │       │   │       └── _mapping.cpython-313.pyc
    │           │       │   ├── token.py
    │           │       │   ├── unistring.py
    │           │       │   └── util.py
    │           │       ├── pyproject_hooks
    │           │       │   ├── _impl.py
    │           │       │   ├── __init__.py
    │           │       │   ├── _in_process
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── _in_process.py
    │           │       │   │   └── __pycache__
    │           │       │   │       ├── __init__.cpython-313.pyc
    │           │       │   │       └── _in_process.cpython-313.pyc
    │           │       │   ├── __pycache__
    │           │       │   │   ├── _impl.cpython-313.pyc
    │           │       │   │   └── __init__.cpython-313.pyc
    │           │       │   └── py.typed
    │           │       ├── requests
    │           │       │   ├── adapters.py
    │           │       │   ├── api.py
    │           │       │   ├── auth.py
    │           │       │   ├── certs.py
    │           │       │   ├── compat.py
    │           │       │   ├── cookies.py
    │           │       │   ├── exceptions.py
    │           │       │   ├── help.py
    │           │       │   ├── hooks.py
    │           │       │   ├── __init__.py
    │           │       │   ├── _internal_utils.py
    │           │       │   ├── models.py
    │           │       │   ├── packages.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── adapters.cpython-313.pyc
    │           │       │   │   ├── api.cpython-313.pyc
    │           │       │   │   ├── auth.cpython-313.pyc
    │           │       │   │   ├── certs.cpython-313.pyc
    │           │       │   │   ├── compat.cpython-313.pyc
    │           │       │   │   ├── cookies.cpython-313.pyc
    │           │       │   │   ├── exceptions.cpython-313.pyc
    │           │       │   │   ├── help.cpython-313.pyc
    │           │       │   │   ├── hooks.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _internal_utils.cpython-313.pyc
    │           │       │   │   ├── models.cpython-313.pyc
    │           │       │   │   ├── packages.cpython-313.pyc
    │           │       │   │   ├── sessions.cpython-313.pyc
    │           │       │   │   ├── status_codes.cpython-313.pyc
    │           │       │   │   ├── structures.cpython-313.pyc
    │           │       │   │   ├── utils.cpython-313.pyc
    │           │       │   │   └── __version__.cpython-313.pyc
    │           │       │   ├── sessions.py
    │           │       │   ├── status_codes.py
    │           │       │   ├── structures.py
    │           │       │   ├── utils.py
    │           │       │   └── __version__.py
    │           │       ├── resolvelib
    │           │       │   ├── __init__.py
    │           │       │   ├── providers.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── providers.cpython-313.pyc
    │           │       │   │   ├── reporters.cpython-313.pyc
    │           │       │   │   └── structs.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── reporters.py
    │           │       │   ├── resolvers
    │           │       │   │   ├── abstract.py
    │           │       │   │   ├── criterion.py
    │           │       │   │   ├── exceptions.py
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── abstract.cpython-313.pyc
    │           │       │   │   │   ├── criterion.cpython-313.pyc
    │           │       │   │   │   ├── exceptions.cpython-313.pyc
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   └── resolution.cpython-313.pyc
    │           │       │   │   └── resolution.py
    │           │       │   └── structs.py
    │           │       ├── rich
    │           │       │   ├── abc.py
    │           │       │   ├── align.py
    │           │       │   ├── ansi.py
    │           │       │   ├── bar.py
    │           │       │   ├── box.py
    │           │       │   ├── cells.py
    │           │       │   ├── _cell_widths.py
    │           │       │   ├── color.py
    │           │       │   ├── color_triplet.py
    │           │       │   ├── columns.py
    │           │       │   ├── console.py
    │           │       │   ├── constrain.py
    │           │       │   ├── containers.py
    │           │       │   ├── control.py
    │           │       │   ├── default_styles.py
    │           │       │   ├── diagnose.py
    │           │       │   ├── _emoji_codes.py
    │           │       │   ├── emoji.py
    │           │       │   ├── _emoji_replace.py
    │           │       │   ├── errors.py
    │           │       │   ├── _export_format.py
    │           │       │   ├── _extension.py
    │           │       │   ├── _fileno.py
    │           │       │   ├── file_proxy.py
    │           │       │   ├── filesize.py
    │           │       │   ├── highlighter.py
    │           │       │   ├── __init__.py
    │           │       │   ├── _inspect.py
    │           │       │   ├── json.py
    │           │       │   ├── jupyter.py
    │           │       │   ├── layout.py
    │           │       │   ├── live.py
    │           │       │   ├── live_render.py
    │           │       │   ├── logging.py
    │           │       │   ├── _log_render.py
    │           │       │   ├── _loop.py
    │           │       │   ├── __main__.py
    │           │       │   ├── markup.py
    │           │       │   ├── measure.py
    │           │       │   ├── _null_file.py
    │           │       │   ├── padding.py
    │           │       │   ├── pager.py
    │           │       │   ├── palette.py
    │           │       │   ├── _palettes.py
    │           │       │   ├── panel.py
    │           │       │   ├── _pick.py
    │           │       │   ├── pretty.py
    │           │       │   ├── progress_bar.py
    │           │       │   ├── progress.py
    │           │       │   ├── prompt.py
    │           │       │   ├── protocol.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── abc.cpython-313.pyc
    │           │       │   │   ├── align.cpython-313.pyc
    │           │       │   │   ├── ansi.cpython-313.pyc
    │           │       │   │   ├── bar.cpython-313.pyc
    │           │       │   │   ├── box.cpython-313.pyc
    │           │       │   │   ├── cells.cpython-313.pyc
    │           │       │   │   ├── _cell_widths.cpython-313.pyc
    │           │       │   │   ├── color.cpython-313.pyc
    │           │       │   │   ├── color_triplet.cpython-313.pyc
    │           │       │   │   ├── columns.cpython-313.pyc
    │           │       │   │   ├── console.cpython-313.pyc
    │           │       │   │   ├── constrain.cpython-313.pyc
    │           │       │   │   ├── containers.cpython-313.pyc
    │           │       │   │   ├── control.cpython-313.pyc
    │           │       │   │   ├── default_styles.cpython-313.pyc
    │           │       │   │   ├── diagnose.cpython-313.pyc
    │           │       │   │   ├── _emoji_codes.cpython-313.pyc
    │           │       │   │   ├── emoji.cpython-313.pyc
    │           │       │   │   ├── _emoji_replace.cpython-313.pyc
    │           │       │   │   ├── errors.cpython-313.pyc
    │           │       │   │   ├── _export_format.cpython-313.pyc
    │           │       │   │   ├── _extension.cpython-313.pyc
    │           │       │   │   ├── _fileno.cpython-313.pyc
    │           │       │   │   ├── file_proxy.cpython-313.pyc
    │           │       │   │   ├── filesize.cpython-313.pyc
    │           │       │   │   ├── highlighter.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _inspect.cpython-313.pyc
    │           │       │   │   ├── json.cpython-313.pyc
    │           │       │   │   ├── jupyter.cpython-313.pyc
    │           │       │   │   ├── layout.cpython-313.pyc
    │           │       │   │   ├── live.cpython-313.pyc
    │           │       │   │   ├── live_render.cpython-313.pyc
    │           │       │   │   ├── logging.cpython-313.pyc
    │           │       │   │   ├── _log_render.cpython-313.pyc
    │           │       │   │   ├── _loop.cpython-313.pyc
    │           │       │   │   ├── __main__.cpython-313.pyc
    │           │       │   │   ├── markup.cpython-313.pyc
    │           │       │   │   ├── measure.cpython-313.pyc
    │           │       │   │   ├── _null_file.cpython-313.pyc
    │           │       │   │   ├── padding.cpython-313.pyc
    │           │       │   │   ├── pager.cpython-313.pyc
    │           │       │   │   ├── palette.cpython-313.pyc
    │           │       │   │   ├── _palettes.cpython-313.pyc
    │           │       │   │   ├── panel.cpython-313.pyc
    │           │       │   │   ├── _pick.cpython-313.pyc
    │           │       │   │   ├── pretty.cpython-313.pyc
    │           │       │   │   ├── progress_bar.cpython-313.pyc
    │           │       │   │   ├── progress.cpython-313.pyc
    │           │       │   │   ├── prompt.cpython-313.pyc
    │           │       │   │   ├── protocol.cpython-313.pyc
    │           │       │   │   ├── _ratio.cpython-313.pyc
    │           │       │   │   ├── region.cpython-313.pyc
    │           │       │   │   ├── repr.cpython-313.pyc
    │           │       │   │   ├── rule.cpython-313.pyc
    │           │       │   │   ├── scope.cpython-313.pyc
    │           │       │   │   ├── screen.cpython-313.pyc
    │           │       │   │   ├── segment.cpython-313.pyc
    │           │       │   │   ├── spinner.cpython-313.pyc
    │           │       │   │   ├── _spinners.cpython-313.pyc
    │           │       │   │   ├── _stack.cpython-313.pyc
    │           │       │   │   ├── status.cpython-313.pyc
    │           │       │   │   ├── style.cpython-313.pyc
    │           │       │   │   ├── styled.cpython-313.pyc
    │           │       │   │   ├── syntax.cpython-313.pyc
    │           │       │   │   ├── table.cpython-313.pyc
    │           │       │   │   ├── terminal_theme.cpython-313.pyc
    │           │       │   │   ├── text.cpython-313.pyc
    │           │       │   │   ├── theme.cpython-313.pyc
    │           │       │   │   ├── themes.cpython-313.pyc
    │           │       │   │   ├── _timer.cpython-313.pyc
    │           │       │   │   ├── traceback.cpython-313.pyc
    │           │       │   │   ├── tree.cpython-313.pyc
    │           │       │   │   ├── _win32_console.cpython-313.pyc
    │           │       │   │   ├── _windows.cpython-313.pyc
    │           │       │   │   ├── _windows_renderer.cpython-313.pyc
    │           │       │   │   └── _wrap.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── _ratio.py
    │           │       │   ├── region.py
    │           │       │   ├── repr.py
    │           │       │   ├── rule.py
    │           │       │   ├── scope.py
    │           │       │   ├── screen.py
    │           │       │   ├── segment.py
    │           │       │   ├── spinner.py
    │           │       │   ├── _spinners.py
    │           │       │   ├── _stack.py
    │           │       │   ├── status.py
    │           │       │   ├── styled.py
    │           │       │   ├── style.py
    │           │       │   ├── syntax.py
    │           │       │   ├── table.py
    │           │       │   ├── terminal_theme.py
    │           │       │   ├── text.py
    │           │       │   ├── theme.py
    │           │       │   ├── themes.py
    │           │       │   ├── _timer.py
    │           │       │   ├── traceback.py
    │           │       │   ├── tree.py
    │           │       │   ├── _win32_console.py
    │           │       │   ├── _windows.py
    │           │       │   ├── _windows_renderer.py
    │           │       │   └── _wrap.py
    │           │       ├── tomli
    │           │       │   ├── __init__.py
    │           │       │   ├── _parser.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _parser.cpython-313.pyc
    │           │       │   │   ├── _re.cpython-313.pyc
    │           │       │   │   └── _types.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── _re.py
    │           │       │   └── _types.py
    │           │       ├── tomli_w
    │           │       │   ├── __init__.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   └── _writer.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   └── _writer.py
    │           │       ├── truststore
    │           │       │   ├── _api.py
    │           │       │   ├── __init__.py
    │           │       │   ├── _macos.py
    │           │       │   ├── _openssl.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── _api.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── _macos.cpython-313.pyc
    │           │       │   │   ├── _openssl.cpython-313.pyc
    │           │       │   │   ├── _ssl_constants.cpython-313.pyc
    │           │       │   │   └── _windows.cpython-313.pyc
    │           │       │   ├── py.typed
    │           │       │   ├── _ssl_constants.py
    │           │       │   └── _windows.py
    │           │       ├── urllib3
    │           │       │   ├── _collections.py
    │           │       │   ├── connectionpool.py
    │           │       │   ├── connection.py
    │           │       │   ├── contrib
    │           │       │   │   ├── _appengine_environ.py
    │           │       │   │   ├── appengine.py
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── ntlmpool.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── appengine.cpython-313.pyc
    │           │       │   │   │   ├── _appengine_environ.cpython-313.pyc
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   ├── ntlmpool.cpython-313.pyc
    │           │       │   │   │   ├── pyopenssl.cpython-313.pyc
    │           │       │   │   │   ├── securetransport.cpython-313.pyc
    │           │       │   │   │   └── socks.cpython-313.pyc
    │           │       │   │   ├── pyopenssl.py
    │           │       │   │   ├── _securetransport
    │           │       │   │   │   ├── bindings.py
    │           │       │   │   │   ├── __init__.py
    │           │       │   │   │   ├── low_level.py
    │           │       │   │   │   └── __pycache__
    │           │       │   │   │       ├── bindings.cpython-313.pyc
    │           │       │   │   │       ├── __init__.cpython-313.pyc
    │           │       │   │   │       └── low_level.cpython-313.pyc
    │           │       │   │   ├── securetransport.py
    │           │       │   │   └── socks.py
    │           │       │   ├── exceptions.py
    │           │       │   ├── fields.py
    │           │       │   ├── filepost.py
    │           │       │   ├── __init__.py
    │           │       │   ├── packages
    │           │       │   │   ├── backports
    │           │       │   │   │   ├── __init__.py
    │           │       │   │   │   ├── makefile.py
    │           │       │   │   │   ├── __pycache__
    │           │       │   │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   │   ├── makefile.cpython-313.pyc
    │           │       │   │   │   │   └── weakref_finalize.cpython-313.pyc
    │           │       │   │   │   └── weakref_finalize.py
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   └── six.cpython-313.pyc
    │           │       │   │   └── six.py
    │           │       │   ├── poolmanager.py
    │           │       │   ├── __pycache__
    │           │       │   │   ├── _collections.cpython-313.pyc
    │           │       │   │   ├── connection.cpython-313.pyc
    │           │       │   │   ├── connectionpool.cpython-313.pyc
    │           │       │   │   ├── exceptions.cpython-313.pyc
    │           │       │   │   ├── fields.cpython-313.pyc
    │           │       │   │   ├── filepost.cpython-313.pyc
    │           │       │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   ├── poolmanager.cpython-313.pyc
    │           │       │   │   ├── request.cpython-313.pyc
    │           │       │   │   ├── response.cpython-313.pyc
    │           │       │   │   └── _version.cpython-313.pyc
    │           │       │   ├── request.py
    │           │       │   ├── response.py
    │           │       │   ├── util
    │           │       │   │   ├── connection.py
    │           │       │   │   ├── __init__.py
    │           │       │   │   ├── proxy.py
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   ├── connection.cpython-313.pyc
    │           │       │   │   │   ├── __init__.cpython-313.pyc
    │           │       │   │   │   ├── proxy.cpython-313.pyc
    │           │       │   │   │   ├── queue.cpython-313.pyc
    │           │       │   │   │   ├── request.cpython-313.pyc
    │           │       │   │   │   ├── response.cpython-313.pyc
    │           │       │   │   │   ├── retry.cpython-313.pyc
    │           │       │   │   │   ├── ssl_.cpython-313.pyc
    │           │       │   │   │   ├── ssl_match_hostname.cpython-313.pyc
    │           │       │   │   │   ├── ssltransport.cpython-313.pyc
    │           │       │   │   │   ├── timeout.cpython-313.pyc
    │           │       │   │   │   ├── url.cpython-313.pyc
    │           │       │   │   │   └── wait.cpython-313.pyc
    │           │       │   │   ├── queue.py
    │           │       │   │   ├── request.py
    │           │       │   │   ├── response.py
    │           │       │   │   ├── retry.py
    │           │       │   │   ├── ssl_match_hostname.py
    │           │       │   │   ├── ssl_.py
    │           │       │   │   ├── ssltransport.py
    │           │       │   │   ├── timeout.py
    │           │       │   │   ├── url.py
    │           │       │   │   └── wait.py
    │           │       │   └── _version.py
    │           │       └── vendor.txt
    │           ├── pip-25.2.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   ├── AUTHORS.txt
    │           │   │   ├── LICENSE.txt
    │           │   │   └── src
    │           │   │       └── pip
    │           │   │           └── _vendor
    │           │   │               ├── cachecontrol
    │           │   │               │   └── LICENSE.txt
    │           │   │               ├── certifi
    │           │   │               │   └── LICENSE
    │           │   │               ├── dependency_groups
    │           │   │               │   └── LICENSE.txt
    │           │   │               ├── distlib
    │           │   │               │   └── LICENSE.txt
    │           │   │               ├── distro
    │           │   │               │   └── LICENSE
    │           │   │               ├── idna
    │           │   │               │   └── LICENSE.md
    │           │   │               ├── msgpack
    │           │   │               │   └── COPYING
    │           │   │               ├── packaging
    │           │   │               │   ├── LICENSE
    │           │   │               │   ├── LICENSE.APACHE
    │           │   │               │   └── LICENSE.BSD
    │           │   │               ├── pkg_resources
    │           │   │               │   └── LICENSE
    │           │   │               ├── platformdirs
    │           │   │               │   └── LICENSE
    │           │   │               ├── pygments
    │           │   │               │   └── LICENSE
    │           │   │               ├── pyproject_hooks
    │           │   │               │   └── LICENSE
    │           │   │               ├── requests
    │           │   │               │   └── LICENSE
    │           │   │               ├── resolvelib
    │           │   │               │   └── LICENSE
    │           │   │               ├── rich
    │           │   │               │   └── LICENSE
    │           │   │               ├── tomli
    │           │   │               │   ├── LICENSE
    │           │   │               │   └── LICENSE-HEADER
    │           │   │               ├── tomli_w
    │           │   │               │   └── LICENSE
    │           │   │               ├── truststore
    │           │   │               │   └── LICENSE
    │           │   │               └── urllib3
    │           │   │                   └── LICENSE.txt
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── REQUESTED
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── pkg_resources
    │           │   ├── api_tests.txt
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   └── __init__.cpython-313.pyc
    │           │   ├── py.typed
    │           │   └── tests
    │           │       ├── data
    │           │       │   ├── my-test-package-source
    │           │       │   │   ├── __pycache__
    │           │       │   │   │   └── setup.cpython-313.pyc
    │           │       │   │   ├── setup.cfg
    │           │       │   │   └── setup.py
    │           │       │   ├── my-test-package_unpacked-egg
    │           │       │   │   └── my_test_package-1.0-py3.7.egg
    │           │       │   │       └── EGG-INFO
    │           │       │   │           ├── dependency_links.txt
    │           │       │   │           ├── PKG-INFO
    │           │       │   │           ├── SOURCES.txt
    │           │       │   │           ├── top_level.txt
    │           │       │   │           └── zip-safe
    │           │       │   ├── my-test-package-zip
    │           │       │   │   └── my-test-package.zip
    │           │       │   └── my-test-package_zipped-egg
    │           │       │       └── my_test_package-1.0-py3.7.egg
    │           │       ├── __init__.py
    │           │       ├── __pycache__
    │           │       │   ├── __init__.cpython-313.pyc
    │           │       │   ├── test_find_distributions.cpython-313.pyc
    │           │       │   ├── test_integration_zope_interface.cpython-313.pyc
    │           │       │   ├── test_markers.cpython-313.pyc
    │           │       │   ├── test_pkg_resources.cpython-313.pyc
    │           │       │   ├── test_resources.cpython-313.pyc
    │           │       │   └── test_working_set.cpython-313.pyc
    │           │       ├── test_find_distributions.py
    │           │       ├── test_integration_zope_interface.py
    │           │       ├── test_markers.py
    │           │       ├── test_pkg_resources.py
    │           │       ├── test_resources.py
    │           │       └── test_working_set.py
    │           ├── __pycache__
    │           │   ├── __editable___lmarena_bridge_3_0_0_finder.cpython-313.pyc
    │           │   └── typing_extensions.cpython-313.pyc
    │           ├── pycairo-1.28.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pydantic
    │           │   ├── aliases.py
    │           │   ├── alias_generators.py
    │           │   ├── annotated_handlers.py
    │           │   ├── class_validators.py
    │           │   ├── color.py
    │           │   ├── config.py
    │           │   ├── dataclasses.py
    │           │   ├── datetime_parse.py
    │           │   ├── decorator.py
    │           │   ├── deprecated
    │           │   │   ├── class_validators.py
    │           │   │   ├── config.py
    │           │   │   ├── copy_internals.py
    │           │   │   ├── decorator.py
    │           │   │   ├── __init__.py
    │           │   │   ├── json.py
    │           │   │   ├── parse.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── class_validators.cpython-313.pyc
    │           │   │   │   ├── config.cpython-313.pyc
    │           │   │   │   ├── copy_internals.cpython-313.pyc
    │           │   │   │   ├── decorator.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── json.cpython-313.pyc
    │           │   │   │   ├── parse.cpython-313.pyc
    │           │   │   │   └── tools.cpython-313.pyc
    │           │   │   └── tools.py
    │           │   ├── env_settings.py
    │           │   ├── errors.py
    │           │   ├── error_wrappers.py
    │           │   ├── experimental
    │           │   │   ├── arguments_schema.py
    │           │   │   ├── __init__.py
    │           │   │   ├── pipeline.py
    │           │   │   └── __pycache__
    │           │   │       ├── arguments_schema.cpython-313.pyc
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       └── pipeline.cpython-313.pyc
    │           │   ├── fields.py
    │           │   ├── functional_serializers.py
    │           │   ├── functional_validators.py
    │           │   ├── generics.py
    │           │   ├── __init__.py
    │           │   ├── _internal
    │           │   │   ├── _config.py
    │           │   │   ├── _core_metadata.py
    │           │   │   ├── _core_utils.py
    │           │   │   ├── _dataclasses.py
    │           │   │   ├── _decorators.py
    │           │   │   ├── _decorators_v1.py
    │           │   │   ├── _discriminated_union.py
    │           │   │   ├── _docs_extraction.py
    │           │   │   ├── _fields.py
    │           │   │   ├── _forward_ref.py
    │           │   │   ├── _generate_schema.py
    │           │   │   ├── _generics.py
    │           │   │   ├── _git.py
    │           │   │   ├── _import_utils.py
    │           │   │   ├── __init__.py
    │           │   │   ├── _internal_dataclass.py
    │           │   │   ├── _known_annotated_metadata.py
    │           │   │   ├── _mock_val_ser.py
    │           │   │   ├── _model_construction.py
    │           │   │   ├── _namespace_utils.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── _config.cpython-313.pyc
    │           │   │   │   ├── _core_metadata.cpython-313.pyc
    │           │   │   │   ├── _core_utils.cpython-313.pyc
    │           │   │   │   ├── _dataclasses.cpython-313.pyc
    │           │   │   │   ├── _decorators.cpython-313.pyc
    │           │   │   │   ├── _decorators_v1.cpython-313.pyc
    │           │   │   │   ├── _discriminated_union.cpython-313.pyc
    │           │   │   │   ├── _docs_extraction.cpython-313.pyc
    │           │   │   │   ├── _fields.cpython-313.pyc
    │           │   │   │   ├── _forward_ref.cpython-313.pyc
    │           │   │   │   ├── _generate_schema.cpython-313.pyc
    │           │   │   │   ├── _generics.cpython-313.pyc
    │           │   │   │   ├── _git.cpython-313.pyc
    │           │   │   │   ├── _import_utils.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── _internal_dataclass.cpython-313.pyc
    │           │   │   │   ├── _known_annotated_metadata.cpython-313.pyc
    │           │   │   │   ├── _mock_val_ser.cpython-313.pyc
    │           │   │   │   ├── _model_construction.cpython-313.pyc
    │           │   │   │   ├── _namespace_utils.cpython-313.pyc
    │           │   │   │   ├── _repr.cpython-313.pyc
    │           │   │   │   ├── _schema_gather.cpython-313.pyc
    │           │   │   │   ├── _schema_generation_shared.cpython-313.pyc
    │           │   │   │   ├── _serializers.cpython-313.pyc
    │           │   │   │   ├── _signature.cpython-313.pyc
    │           │   │   │   ├── _typing_extra.cpython-313.pyc
    │           │   │   │   ├── _utils.cpython-313.pyc
    │           │   │   │   ├── _validate_call.cpython-313.pyc
    │           │   │   │   └── _validators.cpython-313.pyc
    │           │   │   ├── _repr.py
    │           │   │   ├── _schema_gather.py
    │           │   │   ├── _schema_generation_shared.py
    │           │   │   ├── _serializers.py
    │           │   │   ├── _signature.py
    │           │   │   ├── _typing_extra.py
    │           │   │   ├── _utils.py
    │           │   │   ├── _validate_call.py
    │           │   │   └── _validators.py
    │           │   ├── json.py
    │           │   ├── json_schema.py
    │           │   ├── main.py
    │           │   ├── _migration.py
    │           │   ├── mypy.py
    │           │   ├── networks.py
    │           │   ├── parse.py
    │           │   ├── plugin
    │           │   │   ├── __init__.py
    │           │   │   ├── _loader.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── _loader.cpython-313.pyc
    │           │   │   │   └── _schema_validator.cpython-313.pyc
    │           │   │   └── _schema_validator.py
    │           │   ├── __pycache__
    │           │   │   ├── aliases.cpython-313.pyc
    │           │   │   ├── alias_generators.cpython-313.pyc
    │           │   │   ├── annotated_handlers.cpython-313.pyc
    │           │   │   ├── class_validators.cpython-313.pyc
    │           │   │   ├── color.cpython-313.pyc
    │           │   │   ├── config.cpython-313.pyc
    │           │   │   ├── dataclasses.cpython-313.pyc
    │           │   │   ├── datetime_parse.cpython-313.pyc
    │           │   │   ├── decorator.cpython-313.pyc
    │           │   │   ├── env_settings.cpython-313.pyc
    │           │   │   ├── errors.cpython-313.pyc
    │           │   │   ├── error_wrappers.cpython-313.pyc
    │           │   │   ├── fields.cpython-313.pyc
    │           │   │   ├── functional_serializers.cpython-313.pyc
    │           │   │   ├── functional_validators.cpython-313.pyc
    │           │   │   ├── generics.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── json.cpython-313.pyc
    │           │   │   ├── json_schema.cpython-313.pyc
    │           │   │   ├── main.cpython-313.pyc
    │           │   │   ├── _migration.cpython-313.pyc
    │           │   │   ├── mypy.cpython-313.pyc
    │           │   │   ├── networks.cpython-313.pyc
    │           │   │   ├── parse.cpython-313.pyc
    │           │   │   ├── root_model.cpython-313.pyc
    │           │   │   ├── schema.cpython-313.pyc
    │           │   │   ├── tools.cpython-313.pyc
    │           │   │   ├── type_adapter.cpython-313.pyc
    │           │   │   ├── types.cpython-313.pyc
    │           │   │   ├── typing.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   ├── validate_call_decorator.cpython-313.pyc
    │           │   │   ├── validators.cpython-313.pyc
    │           │   │   ├── version.cpython-313.pyc
    │           │   │   └── warnings.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── root_model.py
    │           │   ├── schema.py
    │           │   ├── tools.py
    │           │   ├── type_adapter.py
    │           │   ├── types.py
    │           │   ├── typing.py
    │           │   ├── utils.py
    │           │   ├── v1
    │           │   │   ├── annotated_types.py
    │           │   │   ├── class_validators.py
    │           │   │   ├── color.py
    │           │   │   ├── config.py
    │           │   │   ├── dataclasses.py
    │           │   │   ├── datetime_parse.py
    │           │   │   ├── decorator.py
    │           │   │   ├── env_settings.py
    │           │   │   ├── errors.py
    │           │   │   ├── error_wrappers.py
    │           │   │   ├── fields.py
    │           │   │   ├── generics.py
    │           │   │   ├── _hypothesis_plugin.py
    │           │   │   ├── __init__.py
    │           │   │   ├── json.py
    │           │   │   ├── main.py
    │           │   │   ├── mypy.py
    │           │   │   ├── networks.py
    │           │   │   ├── parse.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── annotated_types.cpython-313.pyc
    │           │   │   │   ├── class_validators.cpython-313.pyc
    │           │   │   │   ├── color.cpython-313.pyc
    │           │   │   │   ├── config.cpython-313.pyc
    │           │   │   │   ├── dataclasses.cpython-313.pyc
    │           │   │   │   ├── datetime_parse.cpython-313.pyc
    │           │   │   │   ├── decorator.cpython-313.pyc
    │           │   │   │   ├── env_settings.cpython-313.pyc
    │           │   │   │   ├── errors.cpython-313.pyc
    │           │   │   │   ├── error_wrappers.cpython-313.pyc
    │           │   │   │   ├── fields.cpython-313.pyc
    │           │   │   │   ├── generics.cpython-313.pyc
    │           │   │   │   ├── _hypothesis_plugin.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── json.cpython-313.pyc
    │           │   │   │   ├── main.cpython-313.pyc
    │           │   │   │   ├── mypy.cpython-313.pyc
    │           │   │   │   ├── networks.cpython-313.pyc
    │           │   │   │   ├── parse.cpython-313.pyc
    │           │   │   │   ├── schema.cpython-313.pyc
    │           │   │   │   ├── tools.cpython-313.pyc
    │           │   │   │   ├── types.cpython-313.pyc
    │           │   │   │   ├── typing.cpython-313.pyc
    │           │   │   │   ├── utils.cpython-313.pyc
    │           │   │   │   ├── validators.cpython-313.pyc
    │           │   │   │   └── version.cpython-313.pyc
    │           │   │   ├── py.typed
    │           │   │   ├── schema.py
    │           │   │   ├── tools.py
    │           │   │   ├── types.py
    │           │   │   ├── typing.py
    │           │   │   ├── utils.py
    │           │   │   ├── validators.py
    │           │   │   └── version.py
    │           │   ├── validate_call_decorator.py
    │           │   ├── validators.py
    │           │   ├── version.py
    │           │   └── warnings.py
    │           ├── pydantic-2.11.10.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pydantic_core
    │           │   ├── core_schema.py
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   ├── core_schema.cpython-313.pyc
    │           │   │   └── __init__.cpython-313.pyc
    │           │   ├── _pydantic_core.cpython-313-x86_64-linux-gnu.so
    │           │   ├── _pydantic_core.pyi
    │           │   └── py.typed
    │           ├── pydantic_core-2.33.2.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pydantic_settings
    │           │   ├── exceptions.py
    │           │   ├── __init__.py
    │           │   ├── main.py
    │           │   ├── __pycache__
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── main.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── sources
    │           │   │   ├── base.py
    │           │   │   ├── __init__.py
    │           │   │   ├── providers
    │           │   │   │   ├── aws.py
    │           │   │   │   ├── azure.py
    │           │   │   │   ├── cli.py
    │           │   │   │   ├── dotenv.py
    │           │   │   │   ├── env.py
    │           │   │   │   ├── gcp.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── json.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── aws.cpython-313.pyc
    │           │   │   │   │   ├── azure.cpython-313.pyc
    │           │   │   │   │   ├── cli.cpython-313.pyc
    │           │   │   │   │   ├── dotenv.cpython-313.pyc
    │           │   │   │   │   ├── env.cpython-313.pyc
    │           │   │   │   │   ├── gcp.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── json.cpython-313.pyc
    │           │   │   │   │   ├── pyproject.cpython-313.pyc
    │           │   │   │   │   ├── secrets.cpython-313.pyc
    │           │   │   │   │   ├── toml.cpython-313.pyc
    │           │   │   │   │   └── yaml.cpython-313.pyc
    │           │   │   │   ├── pyproject.py
    │           │   │   │   ├── secrets.py
    │           │   │   │   ├── toml.py
    │           │   │   │   └── yaml.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── types.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   ├── types.py
    │           │   │   └── utils.py
    │           │   ├── utils.py
    │           │   └── version.py
    │           ├── pydantic_settings-2.11.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pygobject-3.54.3.dist-info
    │           │   ├── COPYING
    │           │   ├── INSTALLER
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── pygtkcompat
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   └── pygtkcompat.cpython-313.pyc
    │           │   └── pygtkcompat.py
    │           ├── python_dotenv-1.1.1.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── pyyaml-6.0.3.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── requests
    │           │   ├── adapters.py
    │           │   ├── api.py
    │           │   ├── auth.py
    │           │   ├── certs.py
    │           │   ├── compat.py
    │           │   ├── cookies.py
    │           │   ├── exceptions.py
    │           │   ├── help.py
    │           │   ├── hooks.py
    │           │   ├── __init__.py
    │           │   ├── _internal_utils.py
    │           │   ├── models.py
    │           │   ├── packages.py
    │           │   ├── __pycache__
    │           │   │   ├── adapters.cpython-313.pyc
    │           │   │   ├── api.cpython-313.pyc
    │           │   │   ├── auth.cpython-313.pyc
    │           │   │   ├── certs.cpython-313.pyc
    │           │   │   ├── compat.cpython-313.pyc
    │           │   │   ├── cookies.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── help.cpython-313.pyc
    │           │   │   ├── hooks.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _internal_utils.cpython-313.pyc
    │           │   │   ├── models.cpython-313.pyc
    │           │   │   ├── packages.cpython-313.pyc
    │           │   │   ├── sessions.cpython-313.pyc
    │           │   │   ├── status_codes.cpython-313.pyc
    │           │   │   ├── structures.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── __version__.cpython-313.pyc
    │           │   ├── sessions.py
    │           │   ├── status_codes.py
    │           │   ├── structures.py
    │           │   ├── utils.py
    │           │   └── __version__.py
    │           ├── requests-2.32.5.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── setuptools
    │           │   ├── archive_util.py
    │           │   ├── build_meta.py
    │           │   ├── cli-32.exe
    │           │   ├── cli-64.exe
    │           │   ├── cli-arm64.exe
    │           │   ├── cli.exe
    │           │   ├── command
    │           │   │   ├── alias.py
    │           │   │   ├── bdist_egg.py
    │           │   │   ├── bdist_rpm.py
    │           │   │   ├── bdist_wheel.py
    │           │   │   ├── build_clib.py
    │           │   │   ├── build_ext.py
    │           │   │   ├── build.py
    │           │   │   ├── build_py.py
    │           │   │   ├── develop.py
    │           │   │   ├── dist_info.py
    │           │   │   ├── easy_install.py
    │           │   │   ├── editable_wheel.py
    │           │   │   ├── egg_info.py
    │           │   │   ├── __init__.py
    │           │   │   ├── install_egg_info.py
    │           │   │   ├── install_lib.py
    │           │   │   ├── install.py
    │           │   │   ├── install_scripts.py
    │           │   │   ├── launcher manifest.xml
    │           │   │   ├── __pycache__
    │           │   │   │   ├── alias.cpython-313.pyc
    │           │   │   │   ├── bdist_egg.cpython-313.pyc
    │           │   │   │   ├── bdist_rpm.cpython-313.pyc
    │           │   │   │   ├── bdist_wheel.cpython-313.pyc
    │           │   │   │   ├── build_clib.cpython-313.pyc
    │           │   │   │   ├── build.cpython-313.pyc
    │           │   │   │   ├── build_ext.cpython-313.pyc
    │           │   │   │   ├── build_py.cpython-313.pyc
    │           │   │   │   ├── develop.cpython-313.pyc
    │           │   │   │   ├── dist_info.cpython-313.pyc
    │           │   │   │   ├── easy_install.cpython-313.pyc
    │           │   │   │   ├── editable_wheel.cpython-313.pyc
    │           │   │   │   ├── egg_info.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── install.cpython-313.pyc
    │           │   │   │   ├── install_egg_info.cpython-313.pyc
    │           │   │   │   ├── install_lib.cpython-313.pyc
    │           │   │   │   ├── install_scripts.cpython-313.pyc
    │           │   │   │   ├── _requirestxt.cpython-313.pyc
    │           │   │   │   ├── rotate.cpython-313.pyc
    │           │   │   │   ├── saveopts.cpython-313.pyc
    │           │   │   │   ├── sdist.cpython-313.pyc
    │           │   │   │   ├── setopt.cpython-313.pyc
    │           │   │   │   └── test.cpython-313.pyc
    │           │   │   ├── _requirestxt.py
    │           │   │   ├── rotate.py
    │           │   │   ├── saveopts.py
    │           │   │   ├── sdist.py
    │           │   │   ├── setopt.py
    │           │   │   └── test.py
    │           │   ├── compat
    │           │   │   ├── __init__.py
    │           │   │   ├── py310.py
    │           │   │   ├── py311.py
    │           │   │   ├── py312.py
    │           │   │   ├── py39.py
    │           │   │   └── __pycache__
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       ├── py310.cpython-313.pyc
    │           │   │       ├── py311.cpython-313.pyc
    │           │   │       ├── py312.cpython-313.pyc
    │           │   │       └── py39.cpython-313.pyc
    │           │   ├── config
    │           │   │   ├── _apply_pyprojecttoml.py
    │           │   │   ├── distutils.schema.json
    │           │   │   ├── expand.py
    │           │   │   ├── __init__.py
    │           │   │   ├── NOTICE
    │           │   │   ├── __pycache__
    │           │   │   │   ├── _apply_pyprojecttoml.cpython-313.pyc
    │           │   │   │   ├── expand.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── pyprojecttoml.cpython-313.pyc
    │           │   │   │   └── setupcfg.cpython-313.pyc
    │           │   │   ├── pyprojecttoml.py
    │           │   │   ├── setupcfg.py
    │           │   │   ├── setuptools.schema.json
    │           │   │   └── _validate_pyproject
    │           │   │       ├── error_reporting.py
    │           │   │       ├── extra_validations.py
    │           │   │       ├── fastjsonschema_exceptions.py
    │           │   │       ├── fastjsonschema_validations.py
    │           │   │       ├── formats.py
    │           │   │       ├── __init__.py
    │           │   │       ├── NOTICE
    │           │   │       └── __pycache__
    │           │   │           ├── error_reporting.cpython-313.pyc
    │           │   │           ├── extra_validations.cpython-313.pyc
    │           │   │           ├── fastjsonschema_exceptions.cpython-313.pyc
    │           │   │           ├── fastjsonschema_validations.cpython-313.pyc
    │           │   │           ├── formats.cpython-313.pyc
    │           │   │           └── __init__.cpython-313.pyc
    │           │   ├── _core_metadata.py
    │           │   ├── depends.py
    │           │   ├── _discovery.py
    │           │   ├── discovery.py
    │           │   ├── dist.py
    │           │   ├── _distutils
    │           │   │   ├── archive_util.py
    │           │   │   ├── ccompiler.py
    │           │   │   ├── cmd.py
    │           │   │   ├── command
    │           │   │   │   ├── bdist_dumb.py
    │           │   │   │   ├── bdist.py
    │           │   │   │   ├── bdist_rpm.py
    │           │   │   │   ├── build_clib.py
    │           │   │   │   ├── build_ext.py
    │           │   │   │   ├── build.py
    │           │   │   │   ├── build_py.py
    │           │   │   │   ├── build_scripts.py
    │           │   │   │   ├── check.py
    │           │   │   │   ├── clean.py
    │           │   │   │   ├── config.py
    │           │   │   │   ├── _framework_compat.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── install_data.py
    │           │   │   │   ├── install_egg_info.py
    │           │   │   │   ├── install_headers.py
    │           │   │   │   ├── install_lib.py
    │           │   │   │   ├── install.py
    │           │   │   │   ├── install_scripts.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── bdist.cpython-313.pyc
    │           │   │   │   │   ├── bdist_dumb.cpython-313.pyc
    │           │   │   │   │   ├── bdist_rpm.cpython-313.pyc
    │           │   │   │   │   ├── build_clib.cpython-313.pyc
    │           │   │   │   │   ├── build.cpython-313.pyc
    │           │   │   │   │   ├── build_ext.cpython-313.pyc
    │           │   │   │   │   ├── build_py.cpython-313.pyc
    │           │   │   │   │   ├── build_scripts.cpython-313.pyc
    │           │   │   │   │   ├── check.cpython-313.pyc
    │           │   │   │   │   ├── clean.cpython-313.pyc
    │           │   │   │   │   ├── config.cpython-313.pyc
    │           │   │   │   │   ├── _framework_compat.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── install.cpython-313.pyc
    │           │   │   │   │   ├── install_data.cpython-313.pyc
    │           │   │   │   │   ├── install_egg_info.cpython-313.pyc
    │           │   │   │   │   ├── install_headers.cpython-313.pyc
    │           │   │   │   │   ├── install_lib.cpython-313.pyc
    │           │   │   │   │   ├── install_scripts.cpython-313.pyc
    │           │   │   │   │   └── sdist.cpython-313.pyc
    │           │   │   │   └── sdist.py
    │           │   │   ├── compat
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── numpy.py
    │           │   │   │   ├── py39.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │       ├── numpy.cpython-313.pyc
    │           │   │   │       └── py39.cpython-313.pyc
    │           │   │   ├── compilers
    │           │   │   │   └── C
    │           │   │   │       ├── base.py
    │           │   │   │       ├── cygwin.py
    │           │   │   │       ├── errors.py
    │           │   │   │       ├── msvc.py
    │           │   │   │       ├── __pycache__
    │           │   │   │       │   ├── base.cpython-313.pyc
    │           │   │   │       │   ├── cygwin.cpython-313.pyc
    │           │   │   │       │   ├── errors.cpython-313.pyc
    │           │   │   │       │   ├── msvc.cpython-313.pyc
    │           │   │   │       │   ├── unix.cpython-313.pyc
    │           │   │   │       │   └── zos.cpython-313.pyc
    │           │   │   │       ├── tests
    │           │   │   │       │   ├── __pycache__
    │           │   │   │       │   │   ├── test_base.cpython-313.pyc
    │           │   │   │       │   │   ├── test_cygwin.cpython-313.pyc
    │           │   │   │       │   │   ├── test_mingw.cpython-313.pyc
    │           │   │   │       │   │   ├── test_msvc.cpython-313.pyc
    │           │   │   │       │   │   └── test_unix.cpython-313.pyc
    │           │   │   │       │   ├── test_base.py
    │           │   │   │       │   ├── test_cygwin.py
    │           │   │   │       │   ├── test_mingw.py
    │           │   │   │       │   ├── test_msvc.py
    │           │   │   │       │   └── test_unix.py
    │           │   │   │       ├── unix.py
    │           │   │   │       └── zos.py
    │           │   │   ├── core.py
    │           │   │   ├── cygwinccompiler.py
    │           │   │   ├── debug.py
    │           │   │   ├── dep_util.py
    │           │   │   ├── dir_util.py
    │           │   │   ├── dist.py
    │           │   │   ├── errors.py
    │           │   │   ├── extension.py
    │           │   │   ├── fancy_getopt.py
    │           │   │   ├── filelist.py
    │           │   │   ├── file_util.py
    │           │   │   ├── __init__.py
    │           │   │   ├── _log.py
    │           │   │   ├── log.py
    │           │   │   ├── _macos_compat.py
    │           │   │   ├── _modified.py
    │           │   │   ├── _msvccompiler.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── archive_util.cpython-313.pyc
    │           │   │   │   ├── ccompiler.cpython-313.pyc
    │           │   │   │   ├── cmd.cpython-313.pyc
    │           │   │   │   ├── core.cpython-313.pyc
    │           │   │   │   ├── cygwinccompiler.cpython-313.pyc
    │           │   │   │   ├── debug.cpython-313.pyc
    │           │   │   │   ├── dep_util.cpython-313.pyc
    │           │   │   │   ├── dir_util.cpython-313.pyc
    │           │   │   │   ├── dist.cpython-313.pyc
    │           │   │   │   ├── errors.cpython-313.pyc
    │           │   │   │   ├── extension.cpython-313.pyc
    │           │   │   │   ├── fancy_getopt.cpython-313.pyc
    │           │   │   │   ├── filelist.cpython-313.pyc
    │           │   │   │   ├── file_util.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── _log.cpython-313.pyc
    │           │   │   │   ├── log.cpython-313.pyc
    │           │   │   │   ├── _macos_compat.cpython-313.pyc
    │           │   │   │   ├── _modified.cpython-313.pyc
    │           │   │   │   ├── _msvccompiler.cpython-313.pyc
    │           │   │   │   ├── spawn.cpython-313.pyc
    │           │   │   │   ├── sysconfig.cpython-313.pyc
    │           │   │   │   ├── text_file.cpython-313.pyc
    │           │   │   │   ├── unixccompiler.cpython-313.pyc
    │           │   │   │   ├── util.cpython-313.pyc
    │           │   │   │   ├── version.cpython-313.pyc
    │           │   │   │   ├── versionpredicate.cpython-313.pyc
    │           │   │   │   └── zosccompiler.cpython-313.pyc
    │           │   │   ├── spawn.py
    │           │   │   ├── sysconfig.py
    │           │   │   ├── tests
    │           │   │   │   ├── compat
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── py39.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │   │       └── py39.cpython-313.pyc
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── support.cpython-313.pyc
    │           │   │   │   │   ├── test_archive_util.cpython-313.pyc
    │           │   │   │   │   ├── test_bdist.cpython-313.pyc
    │           │   │   │   │   ├── test_bdist_dumb.cpython-313.pyc
    │           │   │   │   │   ├── test_bdist_rpm.cpython-313.pyc
    │           │   │   │   │   ├── test_build_clib.cpython-313.pyc
    │           │   │   │   │   ├── test_build.cpython-313.pyc
    │           │   │   │   │   ├── test_build_ext.cpython-313.pyc
    │           │   │   │   │   ├── test_build_py.cpython-313.pyc
    │           │   │   │   │   ├── test_build_scripts.cpython-313.pyc
    │           │   │   │   │   ├── test_check.cpython-313.pyc
    │           │   │   │   │   ├── test_clean.cpython-313.pyc
    │           │   │   │   │   ├── test_cmd.cpython-313.pyc
    │           │   │   │   │   ├── test_config_cmd.cpython-313.pyc
    │           │   │   │   │   ├── test_core.cpython-313.pyc
    │           │   │   │   │   ├── test_dir_util.cpython-313.pyc
    │           │   │   │   │   ├── test_dist.cpython-313.pyc
    │           │   │   │   │   ├── test_extension.cpython-313.pyc
    │           │   │   │   │   ├── test_filelist.cpython-313.pyc
    │           │   │   │   │   ├── test_file_util.cpython-313.pyc
    │           │   │   │   │   ├── test_install.cpython-313.pyc
    │           │   │   │   │   ├── test_install_data.cpython-313.pyc
    │           │   │   │   │   ├── test_install_headers.cpython-313.pyc
    │           │   │   │   │   ├── test_install_lib.cpython-313.pyc
    │           │   │   │   │   ├── test_install_scripts.cpython-313.pyc
    │           │   │   │   │   ├── test_log.cpython-313.pyc
    │           │   │   │   │   ├── test_modified.cpython-313.pyc
    │           │   │   │   │   ├── test_sdist.cpython-313.pyc
    │           │   │   │   │   ├── test_spawn.cpython-313.pyc
    │           │   │   │   │   ├── test_sysconfig.cpython-313.pyc
    │           │   │   │   │   ├── test_text_file.cpython-313.pyc
    │           │   │   │   │   ├── test_util.cpython-313.pyc
    │           │   │   │   │   ├── test_version.cpython-313.pyc
    │           │   │   │   │   ├── test_versionpredicate.cpython-313.pyc
    │           │   │   │   │   └── unix_compat.cpython-313.pyc
    │           │   │   │   ├── support.py
    │           │   │   │   ├── test_archive_util.py
    │           │   │   │   ├── test_bdist_dumb.py
    │           │   │   │   ├── test_bdist.py
    │           │   │   │   ├── test_bdist_rpm.py
    │           │   │   │   ├── test_build_clib.py
    │           │   │   │   ├── test_build_ext.py
    │           │   │   │   ├── test_build.py
    │           │   │   │   ├── test_build_py.py
    │           │   │   │   ├── test_build_scripts.py
    │           │   │   │   ├── test_check.py
    │           │   │   │   ├── test_clean.py
    │           │   │   │   ├── test_cmd.py
    │           │   │   │   ├── test_config_cmd.py
    │           │   │   │   ├── test_core.py
    │           │   │   │   ├── test_dir_util.py
    │           │   │   │   ├── test_dist.py
    │           │   │   │   ├── test_extension.py
    │           │   │   │   ├── test_filelist.py
    │           │   │   │   ├── test_file_util.py
    │           │   │   │   ├── test_install_data.py
    │           │   │   │   ├── test_install_headers.py
    │           │   │   │   ├── test_install_lib.py
    │           │   │   │   ├── test_install.py
    │           │   │   │   ├── test_install_scripts.py
    │           │   │   │   ├── test_log.py
    │           │   │   │   ├── test_modified.py
    │           │   │   │   ├── test_sdist.py
    │           │   │   │   ├── test_spawn.py
    │           │   │   │   ├── test_sysconfig.py
    │           │   │   │   ├── test_text_file.py
    │           │   │   │   ├── test_util.py
    │           │   │   │   ├── test_versionpredicate.py
    │           │   │   │   ├── test_version.py
    │           │   │   │   └── unix_compat.py
    │           │   │   ├── text_file.py
    │           │   │   ├── unixccompiler.py
    │           │   │   ├── util.py
    │           │   │   ├── versionpredicate.py
    │           │   │   ├── version.py
    │           │   │   └── zosccompiler.py
    │           │   ├── _entry_points.py
    │           │   ├── errors.py
    │           │   ├── extension.py
    │           │   ├── glob.py
    │           │   ├── gui-32.exe
    │           │   ├── gui-64.exe
    │           │   ├── gui-arm64.exe
    │           │   ├── gui.exe
    │           │   ├── _importlib.py
    │           │   ├── _imp.py
    │           │   ├── __init__.py
    │           │   ├── installer.py
    │           │   ├── _itertools.py
    │           │   ├── launch.py
    │           │   ├── logging.py
    │           │   ├── modified.py
    │           │   ├── monkey.py
    │           │   ├── msvc.py
    │           │   ├── namespaces.py
    │           │   ├── _normalization.py
    │           │   ├── _path.py
    │           │   ├── __pycache__
    │           │   │   ├── archive_util.cpython-313.pyc
    │           │   │   ├── build_meta.cpython-313.pyc
    │           │   │   ├── _core_metadata.cpython-313.pyc
    │           │   │   ├── depends.cpython-313.pyc
    │           │   │   ├── _discovery.cpython-313.pyc
    │           │   │   ├── discovery.cpython-313.pyc
    │           │   │   ├── dist.cpython-313.pyc
    │           │   │   ├── _entry_points.cpython-313.pyc
    │           │   │   ├── errors.cpython-313.pyc
    │           │   │   ├── extension.cpython-313.pyc
    │           │   │   ├── glob.cpython-313.pyc
    │           │   │   ├── _imp.cpython-313.pyc
    │           │   │   ├── _importlib.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── installer.cpython-313.pyc
    │           │   │   ├── _itertools.cpython-313.pyc
    │           │   │   ├── launch.cpython-313.pyc
    │           │   │   ├── logging.cpython-313.pyc
    │           │   │   ├── modified.cpython-313.pyc
    │           │   │   ├── monkey.cpython-313.pyc
    │           │   │   ├── msvc.cpython-313.pyc
    │           │   │   ├── namespaces.cpython-313.pyc
    │           │   │   ├── _normalization.cpython-313.pyc
    │           │   │   ├── _path.cpython-313.pyc
    │           │   │   ├── _reqs.cpython-313.pyc
    │           │   │   ├── _scripts.cpython-313.pyc
    │           │   │   ├── _shutil.cpython-313.pyc
    │           │   │   ├── _static.cpython-313.pyc
    │           │   │   ├── unicode_utils.cpython-313.pyc
    │           │   │   ├── version.cpython-313.pyc
    │           │   │   ├── warnings.cpython-313.pyc
    │           │   │   ├── wheel.cpython-313.pyc
    │           │   │   └── windows_support.cpython-313.pyc
    │           │   ├── _reqs.py
    │           │   ├── script (dev).tmpl
    │           │   ├── _scripts.py
    │           │   ├── script.tmpl
    │           │   ├── _shutil.py
    │           │   ├── _static.py
    │           │   ├── tests
    │           │   │   ├── compat
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── py39.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │       └── py39.cpython-313.pyc
    │           │   │   ├── config
    │           │   │   │   ├── downloads
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── preload.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │   │       └── preload.cpython-313.pyc
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── test_apply_pyprojecttoml.cpython-313.pyc
    │           │   │   │   │   ├── test_expand.cpython-313.pyc
    │           │   │   │   │   ├── test_pyprojecttoml.cpython-313.pyc
    │           │   │   │   │   ├── test_pyprojecttoml_dynamic_deps.cpython-313.pyc
    │           │   │   │   │   └── test_setupcfg.cpython-313.pyc
    │           │   │   │   ├── setupcfg_examples.txt
    │           │   │   │   ├── test_apply_pyprojecttoml.py
    │           │   │   │   ├── test_expand.py
    │           │   │   │   ├── test_pyprojecttoml_dynamic_deps.py
    │           │   │   │   ├── test_pyprojecttoml.py
    │           │   │   │   └── test_setupcfg.py
    │           │   │   ├── contexts.py
    │           │   │   ├── environment.py
    │           │   │   ├── fixtures.py
    │           │   │   ├── indexes
    │           │   │   │   └── test_links_priority
    │           │   │   │       ├── external.html
    │           │   │   │       └── simple
    │           │   │   │           └── foobar
    │           │   │   │               └── index.html
    │           │   │   ├── __init__.py
    │           │   │   ├── integration
    │           │   │   │   ├── helpers.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── helpers.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── test_pbr.cpython-313.pyc
    │           │   │   │   │   └── test_pip_install_sdist.cpython-313.pyc
    │           │   │   │   ├── test_pbr.py
    │           │   │   │   └── test_pip_install_sdist.py
    │           │   │   ├── mod_with_constant.py
    │           │   │   ├── namespaces.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── contexts.cpython-313.pyc
    │           │   │   │   ├── environment.cpython-313.pyc
    │           │   │   │   ├── fixtures.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── mod_with_constant.cpython-313.pyc
    │           │   │   │   ├── namespaces.cpython-313.pyc
    │           │   │   │   ├── script-with-bom.cpython-313.pyc
    │           │   │   │   ├── test_archive_util.cpython-313.pyc
    │           │   │   │   ├── test_bdist_deprecations.cpython-313.pyc
    │           │   │   │   ├── test_bdist_egg.cpython-313.pyc
    │           │   │   │   ├── test_bdist_wheel.cpython-313.pyc
    │           │   │   │   ├── test_build_clib.cpython-313.pyc
    │           │   │   │   ├── test_build.cpython-313.pyc
    │           │   │   │   ├── test_build_ext.cpython-313.pyc
    │           │   │   │   ├── test_build_meta.cpython-313.pyc
    │           │   │   │   ├── test_build_py.cpython-313.pyc
    │           │   │   │   ├── test_config_discovery.cpython-313.pyc
    │           │   │   │   ├── test_core_metadata.cpython-313.pyc
    │           │   │   │   ├── test_depends.cpython-313.pyc
    │           │   │   │   ├── test_develop.cpython-313.pyc
    │           │   │   │   ├── test_dist.cpython-313.pyc
    │           │   │   │   ├── test_dist_info.cpython-313.pyc
    │           │   │   │   ├── test_distutils_adoption.cpython-313.pyc
    │           │   │   │   ├── test_editable_install.cpython-313.pyc
    │           │   │   │   ├── test_egg_info.cpython-313.pyc
    │           │   │   │   ├── test_extern.cpython-313.pyc
    │           │   │   │   ├── test_find_packages.cpython-313.pyc
    │           │   │   │   ├── test_find_py_modules.cpython-313.pyc
    │           │   │   │   ├── test_glob.cpython-313.pyc
    │           │   │   │   ├── test_install_scripts.cpython-313.pyc
    │           │   │   │   ├── test_logging.cpython-313.pyc
    │           │   │   │   ├── test_manifest.cpython-313.pyc
    │           │   │   │   ├── test_namespaces.cpython-313.pyc
    │           │   │   │   ├── test_scripts.cpython-313.pyc
    │           │   │   │   ├── test_sdist.cpython-313.pyc
    │           │   │   │   ├── test_setopt.cpython-313.pyc
    │           │   │   │   ├── test_setuptools.cpython-313.pyc
    │           │   │   │   ├── test_shutil_wrapper.cpython-313.pyc
    │           │   │   │   ├── test_unicode_utils.cpython-313.pyc
    │           │   │   │   ├── test_virtualenv.cpython-313.pyc
    │           │   │   │   ├── test_warnings.cpython-313.pyc
    │           │   │   │   ├── test_wheel.cpython-313.pyc
    │           │   │   │   ├── test_windows_wrappers.cpython-313.pyc
    │           │   │   │   ├── text.cpython-313.pyc
    │           │   │   │   └── textwrap.cpython-313.pyc
    │           │   │   ├── script-with-bom.py
    │           │   │   ├── test_archive_util.py
    │           │   │   ├── test_bdist_deprecations.py
    │           │   │   ├── test_bdist_egg.py
    │           │   │   ├── test_bdist_wheel.py
    │           │   │   ├── test_build_clib.py
    │           │   │   ├── test_build_ext.py
    │           │   │   ├── test_build_meta.py
    │           │   │   ├── test_build.py
    │           │   │   ├── test_build_py.py
    │           │   │   ├── test_config_discovery.py
    │           │   │   ├── test_core_metadata.py
    │           │   │   ├── test_depends.py
    │           │   │   ├── test_develop.py
    │           │   │   ├── test_dist_info.py
    │           │   │   ├── test_dist.py
    │           │   │   ├── test_distutils_adoption.py
    │           │   │   ├── test_editable_install.py
    │           │   │   ├── test_egg_info.py
    │           │   │   ├── test_extern.py
    │           │   │   ├── test_find_packages.py
    │           │   │   ├── test_find_py_modules.py
    │           │   │   ├── test_glob.py
    │           │   │   ├── test_install_scripts.py
    │           │   │   ├── test_logging.py
    │           │   │   ├── test_manifest.py
    │           │   │   ├── test_namespaces.py
    │           │   │   ├── test_scripts.py
    │           │   │   ├── test_sdist.py
    │           │   │   ├── test_setopt.py
    │           │   │   ├── test_setuptools.py
    │           │   │   ├── test_shutil_wrapper.py
    │           │   │   ├── test_unicode_utils.py
    │           │   │   ├── test_virtualenv.py
    │           │   │   ├── test_warnings.py
    │           │   │   ├── test_wheel.py
    │           │   │   ├── test_windows_wrappers.py
    │           │   │   ├── text.py
    │           │   │   └── textwrap.py
    │           │   ├── unicode_utils.py
    │           │   ├── _vendor
    │           │   │   ├── autocommand
    │           │   │   │   ├── autoasync.py
    │           │   │   │   ├── autocommand.py
    │           │   │   │   ├── automain.py
    │           │   │   │   ├── autoparse.py
    │           │   │   │   ├── errors.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── autoasync.cpython-313.pyc
    │           │   │   │       ├── autocommand.cpython-313.pyc
    │           │   │   │       ├── automain.cpython-313.pyc
    │           │   │   │       ├── autoparse.cpython-313.pyc
    │           │   │   │       ├── errors.cpython-313.pyc
    │           │   │   │       └── __init__.cpython-313.pyc
    │           │   │   ├── autocommand-2.2.2.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── backports
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   └── tarfile
    │           │   │   │       ├── compat
    │           │   │   │       │   ├── __init__.py
    │           │   │   │       │   ├── py38.py
    │           │   │   │       │   └── __pycache__
    │           │   │   │       │       ├── __init__.cpython-313.pyc
    │           │   │   │       │       └── py38.cpython-313.pyc
    │           │   │   │       ├── __init__.py
    │           │   │   │       ├── __main__.py
    │           │   │   │       └── __pycache__
    │           │   │   │           ├── __init__.cpython-313.pyc
    │           │   │   │           └── __main__.cpython-313.pyc
    │           │   │   ├── backports.tarfile-1.2.0.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── importlib_metadata
    │           │   │   │   ├── _adapters.py
    │           │   │   │   ├── _collections.py
    │           │   │   │   ├── compat
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── py311.py
    │           │   │   │   │   ├── py39.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │   │       ├── py311.cpython-313.pyc
    │           │   │   │   │       └── py39.cpython-313.pyc
    │           │   │   │   ├── _compat.py
    │           │   │   │   ├── diagnose.py
    │           │   │   │   ├── _functools.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── _itertools.py
    │           │   │   │   ├── _meta.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── _adapters.cpython-313.pyc
    │           │   │   │   │   ├── _collections.cpython-313.pyc
    │           │   │   │   │   ├── _compat.cpython-313.pyc
    │           │   │   │   │   ├── diagnose.cpython-313.pyc
    │           │   │   │   │   ├── _functools.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _itertools.cpython-313.pyc
    │           │   │   │   │   ├── _meta.cpython-313.pyc
    │           │   │   │   │   └── _text.cpython-313.pyc
    │           │   │   │   ├── py.typed
    │           │   │   │   └── _text.py
    │           │   │   ├── importlib_metadata-8.0.0.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── inflect
    │           │   │   │   ├── compat
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── py38.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │   │       └── py38.cpython-313.pyc
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   └── py.typed
    │           │   │   ├── inflect-7.3.1.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── jaraco
    │           │   │   │   ├── collections
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   │   └── py.typed
    │           │   │   │   ├── context.py
    │           │   │   │   ├── functools
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── __init__.pyi
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   │   └── py.typed
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   └── context.cpython-313.pyc
    │           │   │   │   └── text
    │           │   │   │       ├── __init__.py
    │           │   │   │       ├── layouts.py
    │           │   │   │       ├── Lorem ipsum.txt
    │           │   │   │       ├── __pycache__
    │           │   │   │       │   ├── __init__.cpython-313.pyc
    │           │   │   │       │   ├── layouts.cpython-313.pyc
    │           │   │   │       │   ├── show-newlines.cpython-313.pyc
    │           │   │   │       │   ├── strip-prefix.cpython-313.pyc
    │           │   │   │       │   ├── to-dvorak.cpython-313.pyc
    │           │   │   │       │   └── to-qwerty.cpython-313.pyc
    │           │   │   │       ├── show-newlines.py
    │           │   │   │       ├── strip-prefix.py
    │           │   │   │       ├── to-dvorak.py
    │           │   │   │       └── to-qwerty.py
    │           │   │   ├── jaraco.collections-5.1.0.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── jaraco.context-5.3.0.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── jaraco.functools-4.0.1.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── jaraco.text-3.12.1.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── more_itertools
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __init__.pyi
    │           │   │   │   ├── more.py
    │           │   │   │   ├── more.pyi
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── more.cpython-313.pyc
    │           │   │   │   │   └── recipes.cpython-313.pyc
    │           │   │   │   ├── py.typed
    │           │   │   │   ├── recipes.py
    │           │   │   │   └── recipes.pyi
    │           │   │   ├── more_itertools-10.3.0.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   └── WHEEL
    │           │   │   ├── packaging
    │           │   │   │   ├── _elffile.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── licenses
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   └── _spdx.cpython-313.pyc
    │           │   │   │   │   └── _spdx.py
    │           │   │   │   ├── _manylinux.py
    │           │   │   │   ├── markers.py
    │           │   │   │   ├── metadata.py
    │           │   │   │   ├── _musllinux.py
    │           │   │   │   ├── _parser.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── _elffile.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _manylinux.cpython-313.pyc
    │           │   │   │   │   ├── markers.cpython-313.pyc
    │           │   │   │   │   ├── metadata.cpython-313.pyc
    │           │   │   │   │   ├── _musllinux.cpython-313.pyc
    │           │   │   │   │   ├── _parser.cpython-313.pyc
    │           │   │   │   │   ├── requirements.cpython-313.pyc
    │           │   │   │   │   ├── specifiers.cpython-313.pyc
    │           │   │   │   │   ├── _structures.cpython-313.pyc
    │           │   │   │   │   ├── tags.cpython-313.pyc
    │           │   │   │   │   ├── _tokenizer.cpython-313.pyc
    │           │   │   │   │   ├── utils.cpython-313.pyc
    │           │   │   │   │   └── version.cpython-313.pyc
    │           │   │   │   ├── py.typed
    │           │   │   │   ├── requirements.py
    │           │   │   │   ├── specifiers.py
    │           │   │   │   ├── _structures.py
    │           │   │   │   ├── tags.py
    │           │   │   │   ├── _tokenizer.py
    │           │   │   │   ├── utils.py
    │           │   │   │   └── version.py
    │           │   │   ├── packaging-24.2.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── LICENSE.APACHE
    │           │   │   │   ├── LICENSE.BSD
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   └── WHEEL
    │           │   │   ├── platformdirs
    │           │   │   │   ├── android.py
    │           │   │   │   ├── api.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── macos.py
    │           │   │   │   ├── __main__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── android.cpython-313.pyc
    │           │   │   │   │   ├── api.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── macos.cpython-313.pyc
    │           │   │   │   │   ├── __main__.cpython-313.pyc
    │           │   │   │   │   ├── unix.cpython-313.pyc
    │           │   │   │   │   ├── version.cpython-313.pyc
    │           │   │   │   │   └── windows.cpython-313.pyc
    │           │   │   │   ├── py.typed
    │           │   │   │   ├── unix.py
    │           │   │   │   ├── version.py
    │           │   │   │   └── windows.py
    │           │   │   ├── platformdirs-4.2.2.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── licenses
    │           │   │   │   │   └── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   └── WHEEL
    │           │   │   ├── __pycache__
    │           │   │   │   └── typing_extensions.cpython-313.pyc
    │           │   │   ├── tomli
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── _parser.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _parser.cpython-313.pyc
    │           │   │   │   │   ├── _re.cpython-313.pyc
    │           │   │   │   │   └── _types.cpython-313.pyc
    │           │   │   │   ├── py.typed
    │           │   │   │   ├── _re.py
    │           │   │   │   └── _types.py
    │           │   │   ├── tomli-2.0.1.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   └── WHEEL
    │           │   │   ├── typeguard
    │           │   │   │   ├── _checkers.py
    │           │   │   │   ├── _config.py
    │           │   │   │   ├── _decorators.py
    │           │   │   │   ├── _exceptions.py
    │           │   │   │   ├── _functions.py
    │           │   │   │   ├── _importhook.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── _memo.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── _checkers.cpython-313.pyc
    │           │   │   │   │   ├── _config.cpython-313.pyc
    │           │   │   │   │   ├── _decorators.cpython-313.pyc
    │           │   │   │   │   ├── _exceptions.cpython-313.pyc
    │           │   │   │   │   ├── _functions.cpython-313.pyc
    │           │   │   │   │   ├── _importhook.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _memo.cpython-313.pyc
    │           │   │   │   │   ├── _pytest_plugin.cpython-313.pyc
    │           │   │   │   │   ├── _suppression.cpython-313.pyc
    │           │   │   │   │   ├── _transformer.cpython-313.pyc
    │           │   │   │   │   ├── _union_transformer.cpython-313.pyc
    │           │   │   │   │   └── _utils.cpython-313.pyc
    │           │   │   │   ├── _pytest_plugin.py
    │           │   │   │   ├── py.typed
    │           │   │   │   ├── _suppression.py
    │           │   │   │   ├── _transformer.py
    │           │   │   │   ├── _union_transformer.py
    │           │   │   │   └── _utils.py
    │           │   │   ├── typeguard-4.3.0.dist-info
    │           │   │   │   ├── entry_points.txt
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── top_level.txt
    │           │   │   │   └── WHEEL
    │           │   │   ├── typing_extensions-4.12.2.dist-info
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   └── WHEEL
    │           │   │   ├── typing_extensions.py
    │           │   │   ├── wheel
    │           │   │   │   ├── _bdist_wheel.py
    │           │   │   │   ├── bdist_wheel.py
    │           │   │   │   ├── cli
    │           │   │   │   │   ├── convert.py
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── pack.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   ├── convert.cpython-313.pyc
    │           │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   ├── pack.cpython-313.pyc
    │           │   │   │   │   │   ├── tags.cpython-313.pyc
    │           │   │   │   │   │   └── unpack.cpython-313.pyc
    │           │   │   │   │   ├── tags.py
    │           │   │   │   │   └── unpack.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── macosx_libfile.py
    │           │   │   │   ├── __main__.py
    │           │   │   │   ├── metadata.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── _bdist_wheel.cpython-313.pyc
    │           │   │   │   │   ├── bdist_wheel.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── macosx_libfile.cpython-313.pyc
    │           │   │   │   │   ├── __main__.cpython-313.pyc
    │           │   │   │   │   ├── metadata.cpython-313.pyc
    │           │   │   │   │   ├── _setuptools_logging.cpython-313.pyc
    │           │   │   │   │   ├── util.cpython-313.pyc
    │           │   │   │   │   └── wheelfile.cpython-313.pyc
    │           │   │   │   ├── _setuptools_logging.py
    │           │   │   │   ├── util.py
    │           │   │   │   ├── vendored
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── packaging
    │           │   │   │   │   │   ├── _elffile.py
    │           │   │   │   │   │   ├── __init__.py
    │           │   │   │   │   │   ├── LICENSE
    │           │   │   │   │   │   ├── LICENSE.APACHE
    │           │   │   │   │   │   ├── LICENSE.BSD
    │           │   │   │   │   │   ├── _manylinux.py
    │           │   │   │   │   │   ├── markers.py
    │           │   │   │   │   │   ├── _musllinux.py
    │           │   │   │   │   │   ├── _parser.py
    │           │   │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   │   ├── _elffile.cpython-313.pyc
    │           │   │   │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   │   │   ├── _manylinux.cpython-313.pyc
    │           │   │   │   │   │   │   ├── markers.cpython-313.pyc
    │           │   │   │   │   │   │   ├── _musllinux.cpython-313.pyc
    │           │   │   │   │   │   │   ├── _parser.cpython-313.pyc
    │           │   │   │   │   │   │   ├── requirements.cpython-313.pyc
    │           │   │   │   │   │   │   ├── specifiers.cpython-313.pyc
    │           │   │   │   │   │   │   ├── _structures.cpython-313.pyc
    │           │   │   │   │   │   │   ├── tags.cpython-313.pyc
    │           │   │   │   │   │   │   ├── _tokenizer.cpython-313.pyc
    │           │   │   │   │   │   │   ├── utils.cpython-313.pyc
    │           │   │   │   │   │   │   └── version.cpython-313.pyc
    │           │   │   │   │   │   ├── requirements.py
    │           │   │   │   │   │   ├── specifiers.py
    │           │   │   │   │   │   ├── _structures.py
    │           │   │   │   │   │   ├── tags.py
    │           │   │   │   │   │   ├── _tokenizer.py
    │           │   │   │   │   │   ├── utils.py
    │           │   │   │   │   │   └── version.py
    │           │   │   │   │   ├── __pycache__
    │           │   │   │   │   │   └── __init__.cpython-313.pyc
    │           │   │   │   │   └── vendor.txt
    │           │   │   │   └── wheelfile.py
    │           │   │   ├── wheel-0.45.1.dist-info
    │           │   │   │   ├── entry_points.txt
    │           │   │   │   ├── INSTALLER
    │           │   │   │   ├── LICENSE.txt
    │           │   │   │   ├── METADATA
    │           │   │   │   ├── RECORD
    │           │   │   │   ├── REQUESTED
    │           │   │   │   └── WHEEL
    │           │   │   ├── zipp
    │           │   │   │   ├── compat
    │           │   │   │   │   ├── __init__.py
    │           │   │   │   │   ├── py310.py
    │           │   │   │   │   └── __pycache__
    │           │   │   │   │       ├── __init__.cpython-313.pyc
    │           │   │   │   │       └── py310.cpython-313.pyc
    │           │   │   │   ├── glob.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── glob.cpython-313.pyc
    │           │   │   │       └── __init__.cpython-313.pyc
    │           │   │   └── zipp-3.19.2.dist-info
    │           │   │       ├── INSTALLER
    │           │   │       ├── LICENSE
    │           │   │       ├── METADATA
    │           │   │       ├── RECORD
    │           │   │       ├── REQUESTED
    │           │   │       ├── top_level.txt
    │           │   │       └── WHEEL
    │           │   ├── version.py
    │           │   ├── warnings.py
    │           │   ├── wheel.py
    │           │   └── windows_support.py
    │           ├── setuptools-80.9.0.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── REQUESTED
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── sniffio
    │           │   ├── _impl.py
    │           │   ├── __init__.py
    │           │   ├── __pycache__
    │           │   │   ├── _impl.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   └── _version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── _tests
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   └── test_sniffio.cpython-313.pyc
    │           │   │   └── test_sniffio.py
    │           │   └── _version.py
    │           ├── sniffio-1.3.1.dist-info
    │           │   ├── INSTALLER
    │           │   ├── LICENSE
    │           │   ├── LICENSE.APACHE2
    │           │   ├── LICENSE.MIT
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── starlette
    │           │   ├── applications.py
    │           │   ├── authentication.py
    │           │   ├── background.py
    │           │   ├── concurrency.py
    │           │   ├── config.py
    │           │   ├── convertors.py
    │           │   ├── datastructures.py
    │           │   ├── endpoints.py
    │           │   ├── _exception_handler.py
    │           │   ├── exceptions.py
    │           │   ├── formparsers.py
    │           │   ├── __init__.py
    │           │   ├── middleware
    │           │   │   ├── authentication.py
    │           │   │   ├── base.py
    │           │   │   ├── cors.py
    │           │   │   ├── errors.py
    │           │   │   ├── exceptions.py
    │           │   │   ├── gzip.py
    │           │   │   ├── httpsredirect.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── authentication.cpython-313.pyc
    │           │   │   │   ├── base.cpython-313.pyc
    │           │   │   │   ├── cors.cpython-313.pyc
    │           │   │   │   ├── errors.cpython-313.pyc
    │           │   │   │   ├── exceptions.cpython-313.pyc
    │           │   │   │   ├── gzip.cpython-313.pyc
    │           │   │   │   ├── httpsredirect.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── sessions.cpython-313.pyc
    │           │   │   │   ├── trustedhost.cpython-313.pyc
    │           │   │   │   └── wsgi.cpython-313.pyc
    │           │   │   ├── sessions.py
    │           │   │   ├── trustedhost.py
    │           │   │   └── wsgi.py
    │           │   ├── __pycache__
    │           │   │   ├── applications.cpython-313.pyc
    │           │   │   ├── authentication.cpython-313.pyc
    │           │   │   ├── background.cpython-313.pyc
    │           │   │   ├── concurrency.cpython-313.pyc
    │           │   │   ├── config.cpython-313.pyc
    │           │   │   ├── convertors.cpython-313.pyc
    │           │   │   ├── datastructures.cpython-313.pyc
    │           │   │   ├── endpoints.cpython-313.pyc
    │           │   │   ├── _exception_handler.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── formparsers.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── requests.cpython-313.pyc
    │           │   │   ├── responses.cpython-313.pyc
    │           │   │   ├── routing.cpython-313.pyc
    │           │   │   ├── schemas.cpython-313.pyc
    │           │   │   ├── staticfiles.cpython-313.pyc
    │           │   │   ├── status.cpython-313.pyc
    │           │   │   ├── templating.cpython-313.pyc
    │           │   │   ├── testclient.cpython-313.pyc
    │           │   │   ├── types.cpython-313.pyc
    │           │   │   ├── _utils.cpython-313.pyc
    │           │   │   └── websockets.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── requests.py
    │           │   ├── responses.py
    │           │   ├── routing.py
    │           │   ├── schemas.py
    │           │   ├── staticfiles.py
    │           │   ├── status.py
    │           │   ├── templating.py
    │           │   ├── testclient.py
    │           │   ├── types.py
    │           │   ├── _utils.py
    │           │   └── websockets.py
    │           ├── starlette-0.48.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.md
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── typing_extensions-4.15.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── typing_extensions.py
    │           ├── typing_inspection
    │           │   ├── __init__.py
    │           │   ├── introspection.py
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── introspection.cpython-313.pyc
    │           │   │   └── typing_objects.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── typing_objects.py
    │           │   └── typing_objects.pyi
    │           ├── typing_inspection-0.4.2.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── urllib3
    │           │   ├── _base_connection.py
    │           │   ├── _collections.py
    │           │   ├── connectionpool.py
    │           │   ├── connection.py
    │           │   ├── contrib
    │           │   │   ├── emscripten
    │           │   │   │   ├── connection.py
    │           │   │   │   ├── emscripten_fetch_worker.js
    │           │   │   │   ├── fetch.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   │   ├── fetch.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── request.cpython-313.pyc
    │           │   │   │   │   └── response.cpython-313.pyc
    │           │   │   │   ├── request.py
    │           │   │   │   └── response.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── pyopenssl.cpython-313.pyc
    │           │   │   │   └── socks.cpython-313.pyc
    │           │   │   ├── pyopenssl.py
    │           │   │   └── socks.py
    │           │   ├── exceptions.py
    │           │   ├── fields.py
    │           │   ├── filepost.py
    │           │   ├── http2
    │           │   │   ├── connection.py
    │           │   │   ├── __init__.py
    │           │   │   ├── probe.py
    │           │   │   └── __pycache__
    │           │   │       ├── connection.cpython-313.pyc
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       └── probe.cpython-313.pyc
    │           │   ├── __init__.py
    │           │   ├── poolmanager.py
    │           │   ├── __pycache__
    │           │   │   ├── _base_connection.cpython-313.pyc
    │           │   │   ├── _collections.cpython-313.pyc
    │           │   │   ├── connection.cpython-313.pyc
    │           │   │   ├── connectionpool.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── fields.cpython-313.pyc
    │           │   │   ├── filepost.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── poolmanager.cpython-313.pyc
    │           │   │   ├── _request_methods.cpython-313.pyc
    │           │   │   ├── response.cpython-313.pyc
    │           │   │   └── _version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── _request_methods.py
    │           │   ├── response.py
    │           │   ├── util
    │           │   │   ├── connection.py
    │           │   │   ├── __init__.py
    │           │   │   ├── proxy.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── proxy.cpython-313.pyc
    │           │   │   │   ├── request.cpython-313.pyc
    │           │   │   │   ├── response.cpython-313.pyc
    │           │   │   │   ├── retry.cpython-313.pyc
    │           │   │   │   ├── ssl_.cpython-313.pyc
    │           │   │   │   ├── ssl_match_hostname.cpython-313.pyc
    │           │   │   │   ├── ssltransport.cpython-313.pyc
    │           │   │   │   ├── timeout.cpython-313.pyc
    │           │   │   │   ├── url.cpython-313.pyc
    │           │   │   │   ├── util.cpython-313.pyc
    │           │   │   │   └── wait.cpython-313.pyc
    │           │   │   ├── request.py
    │           │   │   ├── response.py
    │           │   │   ├── retry.py
    │           │   │   ├── ssl_match_hostname.py
    │           │   │   ├── ssl_.py
    │           │   │   ├── ssltransport.py
    │           │   │   ├── timeout.py
    │           │   │   ├── url.py
    │           │   │   ├── util.py
    │           │   │   └── wait.py
    │           │   └── _version.py
    │           ├── urllib3-2.5.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.txt
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── uvicorn
    │           │   ├── _compat.py
    │           │   ├── config.py
    │           │   ├── importer.py
    │           │   ├── __init__.py
    │           │   ├── lifespan
    │           │   │   ├── __init__.py
    │           │   │   ├── off.py
    │           │   │   ├── on.py
    │           │   │   └── __pycache__
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       ├── off.cpython-313.pyc
    │           │   │       └── on.cpython-313.pyc
    │           │   ├── logging.py
    │           │   ├── loops
    │           │   │   ├── asyncio.py
    │           │   │   ├── auto.py
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── asyncio.cpython-313.pyc
    │           │   │   │   ├── auto.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   └── uvloop.cpython-313.pyc
    │           │   │   └── uvloop.py
    │           │   ├── __main__.py
    │           │   ├── main.py
    │           │   ├── middleware
    │           │   │   ├── asgi2.py
    │           │   │   ├── __init__.py
    │           │   │   ├── message_logger.py
    │           │   │   ├── proxy_headers.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── asgi2.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── message_logger.cpython-313.pyc
    │           │   │   │   ├── proxy_headers.cpython-313.pyc
    │           │   │   │   └── wsgi.cpython-313.pyc
    │           │   │   └── wsgi.py
    │           │   ├── protocols
    │           │   │   ├── http
    │           │   │   │   ├── auto.py
    │           │   │   │   ├── flow_control.py
    │           │   │   │   ├── h11_impl.py
    │           │   │   │   ├── httptools_impl.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   └── __pycache__
    │           │   │   │       ├── auto.cpython-313.pyc
    │           │   │   │       ├── flow_control.cpython-313.pyc
    │           │   │   │       ├── h11_impl.cpython-313.pyc
    │           │   │   │       ├── httptools_impl.cpython-313.pyc
    │           │   │   │       └── __init__.cpython-313.pyc
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   ├── utils.py
    │           │   │   └── websockets
    │           │   │       ├── auto.py
    │           │   │       ├── __init__.py
    │           │   │       ├── __pycache__
    │           │   │       │   ├── auto.cpython-313.pyc
    │           │   │       │   ├── __init__.cpython-313.pyc
    │           │   │       │   ├── websockets_impl.cpython-313.pyc
    │           │   │       │   ├── websockets_sansio_impl.cpython-313.pyc
    │           │   │       │   └── wsproto_impl.cpython-313.pyc
    │           │   │       ├── websockets_impl.py
    │           │   │       ├── websockets_sansio_impl.py
    │           │   │       └── wsproto_impl.py
    │           │   ├── __pycache__
    │           │   │   ├── _compat.cpython-313.pyc
    │           │   │   ├── config.cpython-313.pyc
    │           │   │   ├── importer.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── logging.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── main.cpython-313.pyc
    │           │   │   ├── server.cpython-313.pyc
    │           │   │   ├── _subprocess.cpython-313.pyc
    │           │   │   ├── _types.cpython-313.pyc
    │           │   │   └── workers.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── server.py
    │           │   ├── _subprocess.py
    │           │   ├── supervisors
    │           │   │   ├── basereload.py
    │           │   │   ├── __init__.py
    │           │   │   ├── multiprocess.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── basereload.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── multiprocess.cpython-313.pyc
    │           │   │   │   ├── statreload.cpython-313.pyc
    │           │   │   │   └── watchfilesreload.cpython-313.pyc
    │           │   │   ├── statreload.py
    │           │   │   └── watchfilesreload.py
    │           │   ├── _types.py
    │           │   └── workers.py
    │           ├── uvicorn-0.37.0.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE.md
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── uvloop
    │           │   ├── cbhandles.pxd
    │           │   ├── cbhandles.pyx
    │           │   ├── dns.pyx
    │           │   ├── errors.pyx
    │           │   ├── handles
    │           │   │   ├── async_.pxd
    │           │   │   ├── async_.pyx
    │           │   │   ├── basetransport.pxd
    │           │   │   ├── basetransport.pyx
    │           │   │   ├── check.pxd
    │           │   │   ├── check.pyx
    │           │   │   ├── fsevent.pxd
    │           │   │   ├── fsevent.pyx
    │           │   │   ├── handle.pxd
    │           │   │   ├── handle.pyx
    │           │   │   ├── idle.pxd
    │           │   │   ├── idle.pyx
    │           │   │   ├── pipe.pxd
    │           │   │   ├── pipe.pyx
    │           │   │   ├── poll.pxd
    │           │   │   ├── poll.pyx
    │           │   │   ├── process.pxd
    │           │   │   ├── process.pyx
    │           │   │   ├── stream.pxd
    │           │   │   ├── stream.pyx
    │           │   │   ├── streamserver.pxd
    │           │   │   ├── streamserver.pyx
    │           │   │   ├── tcp.pxd
    │           │   │   ├── tcp.pyx
    │           │   │   ├── timer.pxd
    │           │   │   ├── timer.pyx
    │           │   │   ├── udp.pxd
    │           │   │   └── udp.pyx
    │           │   ├── includes
    │           │   │   ├── consts.pxi
    │           │   │   ├── debug.pxd
    │           │   │   ├── flowcontrol.pxd
    │           │   │   ├── __init__.py
    │           │   │   ├── __pycache__
    │           │   │   │   └── __init__.cpython-313.pyc
    │           │   │   ├── python.pxd
    │           │   │   ├── stdlib.pxi
    │           │   │   ├── system.pxd
    │           │   │   └── uv.pxd
    │           │   ├── __init__.py
    │           │   ├── loop.cpython-313-x86_64-linux-gnu.so
    │           │   ├── loop.pxd
    │           │   ├── loop.pyi
    │           │   ├── loop.pyx
    │           │   ├── lru.pyx
    │           │   ├── _noop.py
    │           │   ├── pseudosock.pyx
    │           │   ├── __pycache__
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── _noop.cpython-313.pyc
    │           │   │   ├── _testbase.cpython-313.pyc
    │           │   │   └── _version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── request.pxd
    │           │   ├── request.pyx
    │           │   ├── server.pxd
    │           │   ├── server.pyx
    │           │   ├── sslproto.pxd
    │           │   ├── sslproto.pyx
    │           │   ├── _testbase.py
    │           │   └── _version.py
    │           ├── uvloop-0.21.0.dist-info
    │           │   ├── INSTALLER
    │           │   ├── LICENSE-APACHE
    │           │   ├── LICENSE-MIT
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── watchfiles
    │           │   ├── cli.py
    │           │   ├── filters.py
    │           │   ├── __init__.py
    │           │   ├── __main__.py
    │           │   ├── main.py
    │           │   ├── __pycache__
    │           │   │   ├── cli.cpython-313.pyc
    │           │   │   ├── filters.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── main.cpython-313.pyc
    │           │   │   ├── run.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── run.py
    │           │   ├── _rust_notify.cpython-313-x86_64-linux-gnu.so
    │           │   ├── _rust_notify.pyi
    │           │   └── version.py
    │           ├── watchfiles-1.1.0.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── licenses
    │           │   │   └── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   └── WHEEL
    │           ├── websockets
    │           │   ├── asyncio
    │           │   │   ├── async_timeout.py
    │           │   │   ├── client.py
    │           │   │   ├── compatibility.py
    │           │   │   ├── connection.py
    │           │   │   ├── __init__.py
    │           │   │   ├── messages.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── async_timeout.cpython-313.pyc
    │           │   │   │   ├── client.cpython-313.pyc
    │           │   │   │   ├── compatibility.cpython-313.pyc
    │           │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── messages.cpython-313.pyc
    │           │   │   │   ├── router.cpython-313.pyc
    │           │   │   │   └── server.cpython-313.pyc
    │           │   │   ├── router.py
    │           │   │   └── server.py
    │           │   ├── auth.py
    │           │   ├── client.py
    │           │   ├── cli.py
    │           │   ├── connection.py
    │           │   ├── datastructures.py
    │           │   ├── exceptions.py
    │           │   ├── extensions
    │           │   │   ├── base.py
    │           │   │   ├── __init__.py
    │           │   │   ├── permessage_deflate.py
    │           │   │   └── __pycache__
    │           │   │       ├── base.cpython-313.pyc
    │           │   │       ├── __init__.cpython-313.pyc
    │           │   │       └── permessage_deflate.cpython-313.pyc
    │           │   ├── frames.py
    │           │   ├── headers.py
    │           │   ├── http11.py
    │           │   ├── http.py
    │           │   ├── imports.py
    │           │   ├── __init__.py
    │           │   ├── legacy
    │           │   │   ├── auth.py
    │           │   │   ├── client.py
    │           │   │   ├── exceptions.py
    │           │   │   ├── framing.py
    │           │   │   ├── handshake.py
    │           │   │   ├── http.py
    │           │   │   ├── __init__.py
    │           │   │   ├── protocol.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── auth.cpython-313.pyc
    │           │   │   │   ├── client.cpython-313.pyc
    │           │   │   │   ├── exceptions.cpython-313.pyc
    │           │   │   │   ├── framing.cpython-313.pyc
    │           │   │   │   ├── handshake.cpython-313.pyc
    │           │   │   │   ├── http.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── protocol.cpython-313.pyc
    │           │   │   │   └── server.cpython-313.pyc
    │           │   │   └── server.py
    │           │   ├── __main__.py
    │           │   ├── protocol.py
    │           │   ├── __pycache__
    │           │   │   ├── auth.cpython-313.pyc
    │           │   │   ├── cli.cpython-313.pyc
    │           │   │   ├── client.cpython-313.pyc
    │           │   │   ├── connection.cpython-313.pyc
    │           │   │   ├── datastructures.cpython-313.pyc
    │           │   │   ├── exceptions.cpython-313.pyc
    │           │   │   ├── frames.cpython-313.pyc
    │           │   │   ├── headers.cpython-313.pyc
    │           │   │   ├── http11.cpython-313.pyc
    │           │   │   ├── http.cpython-313.pyc
    │           │   │   ├── imports.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── protocol.cpython-313.pyc
    │           │   │   ├── server.cpython-313.pyc
    │           │   │   ├── streams.cpython-313.pyc
    │           │   │   ├── typing.cpython-313.pyc
    │           │   │   ├── uri.cpython-313.pyc
    │           │   │   ├── utils.cpython-313.pyc
    │           │   │   └── version.cpython-313.pyc
    │           │   ├── py.typed
    │           │   ├── server.py
    │           │   ├── speedups.c
    │           │   ├── speedups.cpython-313-x86_64-linux-gnu.so
    │           │   ├── speedups.pyi
    │           │   ├── streams.py
    │           │   ├── sync
    │           │   │   ├── client.py
    │           │   │   ├── connection.py
    │           │   │   ├── __init__.py
    │           │   │   ├── messages.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── client.cpython-313.pyc
    │           │   │   │   ├── connection.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── messages.cpython-313.pyc
    │           │   │   │   ├── router.cpython-313.pyc
    │           │   │   │   ├── server.cpython-313.pyc
    │           │   │   │   └── utils.cpython-313.pyc
    │           │   │   ├── router.py
    │           │   │   ├── server.py
    │           │   │   └── utils.py
    │           │   ├── typing.py
    │           │   ├── uri.py
    │           │   ├── utils.py
    │           │   └── version.py
    │           ├── websockets-15.0.1.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── LICENSE
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── top_level.txt
    │           │   └── WHEEL
    │           ├── wheel
    │           │   ├── _bdist_wheel.py
    │           │   ├── bdist_wheel.py
    │           │   ├── cli
    │           │   │   ├── convert.py
    │           │   │   ├── __init__.py
    │           │   │   ├── pack.py
    │           │   │   ├── __pycache__
    │           │   │   │   ├── convert.cpython-313.pyc
    │           │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   ├── pack.cpython-313.pyc
    │           │   │   │   ├── tags.cpython-313.pyc
    │           │   │   │   └── unpack.cpython-313.pyc
    │           │   │   ├── tags.py
    │           │   │   └── unpack.py
    │           │   ├── __init__.py
    │           │   ├── macosx_libfile.py
    │           │   ├── __main__.py
    │           │   ├── metadata.py
    │           │   ├── __pycache__
    │           │   │   ├── _bdist_wheel.cpython-313.pyc
    │           │   │   ├── bdist_wheel.cpython-313.pyc
    │           │   │   ├── __init__.cpython-313.pyc
    │           │   │   ├── macosx_libfile.cpython-313.pyc
    │           │   │   ├── __main__.cpython-313.pyc
    │           │   │   ├── metadata.cpython-313.pyc
    │           │   │   ├── _setuptools_logging.cpython-313.pyc
    │           │   │   ├── util.cpython-313.pyc
    │           │   │   └── wheelfile.cpython-313.pyc
    │           │   ├── _setuptools_logging.py
    │           │   ├── util.py
    │           │   ├── vendored
    │           │   │   ├── __init__.py
    │           │   │   ├── packaging
    │           │   │   │   ├── _elffile.py
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── LICENSE
    │           │   │   │   ├── LICENSE.APACHE
    │           │   │   │   ├── LICENSE.BSD
    │           │   │   │   ├── _manylinux.py
    │           │   │   │   ├── markers.py
    │           │   │   │   ├── _musllinux.py
    │           │   │   │   ├── _parser.py
    │           │   │   │   ├── __pycache__
    │           │   │   │   │   ├── _elffile.cpython-313.pyc
    │           │   │   │   │   ├── __init__.cpython-313.pyc
    │           │   │   │   │   ├── _manylinux.cpython-313.pyc
    │           │   │   │   │   ├── markers.cpython-313.pyc
    │           │   │   │   │   ├── _musllinux.cpython-313.pyc
    │           │   │   │   │   ├── _parser.cpython-313.pyc
    │           │   │   │   │   ├── requirements.cpython-313.pyc
    │           │   │   │   │   ├── specifiers.cpython-313.pyc
    │           │   │   │   │   ├── _structures.cpython-313.pyc
    │           │   │   │   │   ├── tags.cpython-313.pyc
    │           │   │   │   │   ├── _tokenizer.cpython-313.pyc
    │           │   │   │   │   ├── utils.cpython-313.pyc
    │           │   │   │   │   └── version.cpython-313.pyc
    │           │   │   │   ├── requirements.py
    │           │   │   │   ├── specifiers.py
    │           │   │   │   ├── _structures.py
    │           │   │   │   ├── tags.py
    │           │   │   │   ├── _tokenizer.py
    │           │   │   │   ├── utils.py
    │           │   │   │   └── version.py
    │           │   │   ├── __pycache__
    │           │   │   │   └── __init__.cpython-313.pyc
    │           │   │   └── vendor.txt
    │           │   └── wheelfile.py
    │           ├── wheel-0.45.1.dist-info
    │           │   ├── entry_points.txt
    │           │   ├── INSTALLER
    │           │   ├── LICENSE.txt
    │           │   ├── METADATA
    │           │   ├── RECORD
    │           │   ├── REQUESTED
    │           │   └── WHEEL
    │           ├── _yaml
    │           │   ├── __init__.py
    │           │   └── __pycache__
    │           │       └── __init__.cpython-313.pyc
    │           └── yaml
    │               ├── composer.py
    │               ├── constructor.py
    │               ├── cyaml.py
    │               ├── dumper.py
    │               ├── emitter.py
    │               ├── error.py
    │               ├── events.py
    │               ├── __init__.py
    │               ├── loader.py
    │               ├── nodes.py
    │               ├── parser.py
    │               ├── __pycache__
    │               │   ├── composer.cpython-313.pyc
    │               │   ├── constructor.cpython-313.pyc
    │               │   ├── cyaml.cpython-313.pyc
    │               │   ├── dumper.cpython-313.pyc
    │               │   ├── emitter.cpython-313.pyc
    │               │   ├── error.cpython-313.pyc
    │               │   ├── events.cpython-313.pyc
    │               │   ├── __init__.cpython-313.pyc
    │               │   ├── loader.cpython-313.pyc
    │               │   ├── nodes.cpython-313.pyc
    │               │   ├── parser.cpython-313.pyc
    │               │   ├── reader.cpython-313.pyc
    │               │   ├── representer.cpython-313.pyc
    │               │   ├── resolver.cpython-313.pyc
    │               │   ├── scanner.cpython-313.pyc
    │               │   ├── serializer.cpython-313.pyc
    │               │   └── tokens.cpython-313.pyc
    │               ├── reader.py
    │               ├── representer.py
    │               ├── resolver.py
    │               ├── scanner.py
    │               ├── serializer.py
    │               ├── tokens.py
    │               └── _yaml.cpython-313-x86_64-linux-gnu.so
    ├── lib64 -> lib
    └── pyvenv.cfg

499 directories, 3378 files

################################################################################
# PROJECT FILES CONTENT
################################################################################


################################################################################
# FILE: __init__.py
################################################################################


################################################################################
# FILE: .editorconfig
################################################################################
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true

################################################################################
# FILE: Dockerfile
################################################################################
FROM python:3.11-slim

WORKDIR /app
COPY . /app

RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e .

EXPOSE 5102
CMD ["lmarena-bridge", "--host", "0.0.0.0", "--port", "5102"]

################################################################################
# FILE: Makefile
################################################################################
VENV ?= .venv
PY = $(VENV)/bin/python
PIP = $(VENV)/bin/pip

.PHONY: venv install install-gui dev run gui lint format precommit hooks clean

venv:
	python3 -m venv $(VENV)

install: venv
	$(PIP) install --upgrade pip
	$(PIP) install -e .

install-gui: install
	$(PIP) install -e .[gui]

install-dev: install-gui
	$(PIP) install -e .[dev]

dev:
	$(VENV)/bin/uvicorn lmarena_bridge.main:create_app --factory --reload --port 5102

run:
	$(VENV)/bin/lmarena-bridge --port 5102

gui: install-gui
	$(VENV)/bin/lmarena-bridge-gui

lint:
	$(VENV)/bin/ruff check .

format:
	$(VENV)/bin/ruff format .

precommit:
	$(VENV)/bin/pre-commit run --all-files

hooks:
	$(VENV)/bin/pre-commit install

clean:
	rm -rf $(VENV)
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

################################################################################
# FILE: pre-commit-config.yaml
################################################################################
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.5
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace

################################################################################
# FILE: pyproject.toml
################################################################################
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_backend"

[project]
name = "lmarena-bridge"
version = "3.0.0"
description = "OpenAI-compatible API bridge for LMArena with GTK4 GUI"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email @example.com"}
]
keywords = ["lmarena", "api", "bridge", "openai", "gtk"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "httpx>=0.27.0",
    "json5>=0.9.25",
    "packaging>=24.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
]

[project.optional-dependencies]
gui = [
    "PyGObject>=3.48.0",
]
dev = [
    "ruff>=0.6.0",
    "pre-commit>=3.7.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "mypy>=1.10.0",
    "types-requests",
]
all = ["lmarena-bridge[gui,dev]"]

[project.urls]
Homepage = "https://github.com/Lianues/LMArenaBridge"
Documentation = "https://github.com/Lianues/LMArenaBridge/blob/main/README.md"
Repository = "https://github.com/Lianues/LMArenaBridge"
Issues = "https://github.com/Lianues/LMArenaBridge/issues"

[project.scripts]
lmarena-bridge = "lmarena_bridge.main:cli"
lmarena-bridge-gui = "lmarena_bridge_gui.gtk_app:main"

[tool.setuptools.packages.find]
include = ["lmarena_bridge*", "lmarena_bridge_gui*"]

[tool.setuptools.package-data]
lmarena_bridge = ["py.typed"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "SIM", "TCH"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

################################################################################
# FILE: ruff.toml
################################################################################
line-length = 100
target-version = "py311"

[lint]
select = ["E", "F", "I", "UP", "B"]
ignore = ["E501"]

################################################################################
# FILE: lmarena_bridge/__init__.py
################################################################################
__all__ = []

################################################################################
# FILE: lmarena_bridge/logging_config.py
################################################################################
import logging
import sys
from typing import Optional

def setup_logging(debug: bool = False, log_file: Optional[str] = None) -> None:
    """
    Configure logging for the application.
    """
    # Create a custom formatter that includes colors for console output
    class ColoredFormatter(logging.Formatter):
        """Custom formatter to add colors to log levels."""
        
        # ANSI color codes
        COLORS = {
            'DEBUG': '\033[36m',    # Cyan
            'INFO': '\033[32m',     # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m',    # Red
            'CRITICAL': '\033[35m', # Magenta
            'RESET': '\033[0m'      # Reset
        }

        def format(self, record):
            # Add color to the level name
            if record.levelname in self.COLORS:
                record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
            
            return super().format(record)

    # Determine log level
    log_level = logging.DEBUG if debug else logging.INFO
    
    # Create root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    
    # Clear any existing handlers
    root_logger.handlers.clear()
    
    # Create console handler with colored formatter
    console_handler = logging.StreamHandler(sys.stdout)
    console_formatter = ColoredFormatter(
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)
    
    # Add file handler if log_file is specified
    if log_file:
        file_handler = logging.FileHandler(log_file)
        file_formatter = logging.Formatter(
            fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)

    # Set specific log levels for noisy libraries
    logging.getLogger("uvicorn").setLevel(logging.WARNING if not debug else logging.INFO)
    logging.getLogger("httpx").setLevel(logging.WARNING if not debug else logging.INFO)
    logging.getLogger("httpcore").setLevel(logging.WARNING if not debug else logging.INFO)

################################################################################
# FILE: lmarena_bridge/main.py
################################################################################
"""
Main FastAPI application for LMArena Bridge.
This is the entry point for the API server.
"""

import sys
import argparse
import uvicorn
import logging
import asyncio
from typing import Optional
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from .settings import load_settings
from .logging_config import setup_logging
from .api.routes_internal import router as internal_router
from .api.routes_models import router as models_router  
from .api.routes_chat import router as chat_router


def create_app() -> FastAPI:
    """
    Create and configure the FastAPI application.
    """
    # Load settings
    settings = load_settings()
    
    # Create FastAPI app
    app = FastAPI(
        title="LMArena Bridge API",
        description="OpenAI-compatible API bridge for LMArena",
        version=settings.version,
        docs_url="/docs",  # Enable Swagger docs
        redoc_url="/redoc",  # Enable ReDoc
    )
    
    # Add CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # In production, be more restrictive
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Include API routers
    app.include_router(internal_router)
    app.include_router(models_router)
    app.include_router(chat_router)
    
    # Add startup and shutdown events
    @app.on_event("startup")
    async def startup_event():
        """Tasks to run when the application starts."""
        print(f"LMArena Bridge v{settings.version} starting up...")
        logging.info(f"LMArena Bridge v{settings.version} started successfully")
    
    @app.on_event("shutdown")
    async def shutdown_event():
        """Tasks to run when the application shuts down."""
        logging.info("LMArena Bridge shutting down...")
    
    @app.get("/")
    async def root():
        """Root endpoint providing basic info about the API."""
        return {
            "message": "LMArena Bridge API",
            "version": settings.version,
            "status": "running",
            "endpoints": {
                "openai_models": "/v1/models",
                "openai_chat": "/v1/chat/completions",
                "health": "/internal/healthz",
                "docs": "/docs"
            }
        }
    
    return app


def cli():
    """
    Command-line interface entry point.
    """
    parser = argparse.ArgumentParser(description="LMArena Bridge API Server")
    parser.add_argument(
        "--host", 
        type=str, 
        default=None,
        help="Host to bind to (defaults to server_host from config)"
    )
    parser.add_argument(
        "--port", 
        type=int, 
        default=None,
        help="Port to bind to (defaults to server_port from config)"
    )
    parser.add_argument(
        "--debug", 
        action="store_true", 
        help="Enable debug logging"
    )
    parser.add_argument(
        "--log-file",
        type=str,
        default=None,
        help="Log to file instead of stdout"
    )
    
    args = parser.parse_args()
    
    # Load settings
    settings = load_settings()
    
    # Use command line args or fallback to settings
    host = args.host or settings.server_host
    port = args.port or settings.server_port
    
    # Setup logging
    setup_logging(debug=args.debug, log_file=args.log_file)
    
    # Get the app
    app = create_app()
    
    # Run with uvicorn
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="debug" if args.debug else "info",
        reload=False,  # Don't enable reload in production
    )


if __name__ == "__main__":
    cli()

################################################################################
# FILE: lmarena_bridge/settings.py
################################################################################
"""
Configuration settings for LMArena Bridge.
Handles loading, validation, and saving of configuration files.
"""

import json
import os
import uuid
from pathlib import Path
from typing import Any, Dict, List, Optional, Union
import json5  # type: ignore
from pydantic import BaseModel, field_validator, model_validator
from .utils.jsonc import load_jsonc_file, save_jsonc_file

# Define the config directory path
CONFIG_DIR = Path(os.environ.get('LMABRIDGE_CONFIG_DIR', 
                                os.path.expanduser('~/.config/lmarena-bridge')))

# Ensure config directory exists
CONFIG_DIR.mkdir(parents=True, exist_ok=True)

# Define default config file paths
CONFIG_FILE = CONFIG_DIR / 'config.jsonc'
MODELS_FILE = CONFIG_DIR / 'models.json'
MODEL_ENDPOINT_MAP_FILE = CONFIG_DIR / 'model_endpoint_map.json'


class Settings(BaseModel):
    """Main application settings model with validation."""
    
    # Version tracking
    version: str = "3.0.0"
    
    # Session configuration
    session_id: str = "YOUR_SESSION_ID"
    message_id: str = "YOUR_MESSAGE_ID"
    
    # Operation modes
    id_updater_last_mode: str = "direct_chat"  # "direct_chat" or "battle"
    id_updater_battle_target: Optional[str] = "A"  # "A" or "B" for battle mode
    
    # Feature flags
    enable_auto_update: bool = True
    bypass_enabled: bool = True
    tavern_mode_enabled: bool = False
    
    # File bed configuration (for image uploads)
    file_bed_enabled: bool = False
    file_bed_upload_url: str = "http://127.0.0.1:5180/upload"
    file_bed_api_key: str = ""
    
    # Behavior settings
    use_default_ids_if_mapping_not_found: bool = True
    
    # Server settings
    stream_response_timeout_seconds: int = 360
    enable_idle_restart: bool = False
    idle_restart_timeout_seconds: int = -1
    api_key: Optional[str] = ""
    auto_open_browser: bool = False
    server_host: str = "127.0.0.1"
    server_port: int = 5102
    
    # Validation methods
    @field_validator('session_id', 'message_id')
    @classmethod
    def validate_uuid(cls, v: str) -> str:
        if v == "YOUR_SESSION_ID" or v == "YOUR_MESSAGE_ID":
            return v
        try:
            uuid.UUID(v)
            return v
        except ValueError:
            raise ValueError(f'Invalid UUID: {v}')
    
    @field_validator('id_updater_last_mode')
    @classmethod
    def validate_mode(cls, v: str) -> str:
        if v not in ["direct_chat", "battle"]:
            raise ValueError(f'Mode must be "direct_chat" or "battle", got: {v}')
        return v
    
    @field_validator('id_updater_battle_target')
    @classmethod
    def validate_battle_target(cls, v: Optional[str]) -> Optional[str]:
        if v and v not in ["A", "B"]:
            raise ValueError(f'Battle target must be "A" or "B", got: {v}')
        return v
    
    @field_validator('server_port')
    @classmethod
    def validate_port(cls, v: int) -> int:
        if not (1 <= v <= 65535):
            raise ValueError(f'Port must be between 1 and 65535, got: {v}')
        return v
    
    @field_validator('stream_response_timeout_seconds')
    @classmethod
    def validate_timeout(cls, v: int) -> int:
        if v <= 0:
            raise ValueError(f'Timeout must be positive, got: {v}')
        return v
    
    @model_validator(mode='after')
    def validate_battle_mode(self) -> 'Settings':
        if self.id_updater_last_mode == "battle" and not self.id_updater_battle_target:
            raise ValueError('Battle target must be specified when in battle mode')
        return self


def create_default_config() -> Dict[str, Any]:
    """Create default configuration dictionary."""
    return {
        "version": "3.0.0",
        "session_id": "YOUR_SESSION_ID",
        "message_id": "YOUR_MESSAGE_ID",
        "id_updater_last_mode": "direct_chat",
        "id_updater_battle_target": "A",
        "enable_auto_update": True,
        "bypass_enabled": True,
        "tavern_mode_enabled": False,
        "file_bed_enabled": False,
        "file_bed_upload_url": "http://127.0.0.1:5180/upload",
        "file_bed_api_key": "",
        "use_default_ids_if_mapping_not_found": True,
        "stream_response_timeout_seconds": 360,
        "enable_idle_restart": False,
        "idle_restart_timeout_seconds": -1,
        "api_key": "",
        "auto_open_browser": False,
        "server_host": "127.0.0.1",
        "server_port": 5102
    }


def create_default_models() -> Dict[str, str]:
    """Create default models mapping."""
    return {
        "gemini-2.5-pro": "YOUR_MODEL_ID:text",
        "gpt-4": "YOUR_MODEL_ID:text",
        "claude-3": "YOUR_MODEL_ID:text"
    }


def create_default_model_endpoint_map() -> Dict[str, Any]:
    """Create default model endpoint mapping."""
    return {}


def ensure_config_files_exist() -> None:
    """Ensure all required config files exist with default content."""
    # Create config.jsonc if it doesn't exist
    if not CONFIG_FILE.exists():
        config_data = create_default_config()
        save_jsonc_file(CONFIG_FILE, config_data)
        print(f"Created default config file: {CONFIG_FILE}")
    
    # Create models.json if it doesn't exist
    if not MODELS_FILE.exists():
        models_data = create_default_models()
        save_jsonc_file(MODELS_FILE, models_data)
        print(f"Created default models file: {MODELS_FILE}")
    
    # Create model_endpoint_map.json if it doesn't exist
    if not MODEL_ENDPOINT_MAP_FILE.exists():
        map_data = create_default_model_endpoint_map()
        save_jsonc_file(MODEL_ENDPOINT_MAP_FILE, map_data)
        print(f"Created default model endpoint map file: {MODEL_ENDPOINT_MAP_FILE}")


def load_settings() -> Settings:
    """Load settings from config file with fallback to defaults."""
    ensure_config_files_exist()
    
    try:
        # Try to load config from file
        config_data = load_jsonc_file(CONFIG_FILE)
        
        # Update with defaults for missing keys
        default_config = create_default_config()
        for key, value in default_config.items():
            if key not in config_data:
                config_data[key] = value
        
        # Create settings instance with validation
        settings = Settings(**config_data)
        
        # Save back to file if there were updates (new defaults added)
        current_data = config_data.copy()
        for key in ["session_id", "message_id"]:
            if key in current_data and current_data[key] != getattr(settings, key):
                current_data[key] = getattr(settings, key)
        
        if current_data != config_data:
            save_jsonc_file(CONFIG_FILE, current_data)
        
        return settings
        
    except Exception as e:
        print(f"Error loading config, using defaults: {e}")
        # Return default settings
        return Settings()


def update_config_partial(updates: Dict[str, Any]) -> bool:
    """Update configuration with partial data."""
    try:
        # Load existing config
        if CONFIG_FILE.exists():
            config_data = load_jsonc_file(CONFIG_FILE)
        else:
            config_data = create_default_config()
        
        # Apply updates
        config_data.update(updates)
        
        # Validate the updated config
        Settings(**config_data)
        
        # Save updated config
        save_jsonc_file(CONFIG_FILE, config_data)
        return True
        
    except Exception as e:
        print(f"Error updating config: {e}")
        return False


def load_models() -> Dict[str, str]:
    """Load the models mapping from file."""
    ensure_config_files_exist()
    try:
        return load_jsonc_file(MODELS_FILE)
    except Exception as e:
        print(f"Error loading models, using defaults: {e}")
        models_data = create_default_models()
        save_jsonc_file(MODELS_FILE, models_data)
        return models_data


def load_model_endpoint_map() -> Dict[str, Any]:
    """Load the model endpoint mapping from file."""
    ensure_config_files_exist()
    try:
        return load_jsonc_file(MODEL_ENDPOINT_MAP_FILE)
    except Exception as e:
        print(f"Error loading model endpoint map, using defaults: {e}")
        map_data = create_default_model_endpoint_map()
        save_jsonc_file(MODEL_ENDPOINT_MAP_FILE, map_data)
        return map_data

################################################################################
# FILE: lmarena_bridge/api/routes_models.py
################################################################################
"""
API routes for models endpoint.
Implements the /v1/models endpoint to list available models.
"""

import logging
from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import time

from ..settings import load_settings, load_models
from ..services.openai_adapter import create_openai_model_list

logger = logging.getLogger(__name__)
router = APIRouter()


@router.get("/v1/models", tags=["models"])
async def list_models() -> Dict[str, Any]:
    """
    List all available models in OpenAI-compatible format.
    """
    try:
        # Load current settings and models
        settings = load_settings()
        models_map = load_models()
        
        logger.debug(f"Available models: {list(models_map.keys())}")
        
        # Create OpenAI-compatible model list
        openai_model_response = create_openai_model_list(models_map)
        
        # Add request timestamp
        response = openai_model_response.model_dump()
        response["created"] = int(time.time())
        
        logger.info(f"Returning {len(response['data'])} models to client")
        
        return response
        
    except Exception as e:
        logger.error(f"Error in list_models: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading models: {str(e)}")


@router.get("/v1/models/{model}", tags=["models"])
async def retrieve_model(model: str) -> Dict[str, Any]:
    """
    Retrieve information about a specific model.
    """
    try:
        # Load current models
        models_map = load_models()
        
        if model not in models_map:
            raise HTTPException(status_code=404, detail=f"Model '{model}' not found")
        
        # Get the model specification
        model_spec = models_map[model]
        
        # Extract model ID (without type suffix)
        if ':' in model_spec:
            model_id = model_spec.split(':')[0]
        else:
            model_id = model_spec
        
        # Create response in OpenAI format
        response = {
            "id": model,
            "object": "model",
            "created": 1234567890,  # Placeholder timestamp
            "owned_by": "LMArenaBridge",
            "root": model,
            "parent": None,
            "metadata": {
                "lmarena_model_id": model_id,
                "model_type": model_spec.split(':')[1] if ':' in model_spec else 'text'
            }
        }
        
        logger.debug(f"Returning model info for: {model}")
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error in retrieve_model for '{model}': {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving model: {str(e)}")


@router.get("/internal/models/refresh", tags=["internal"])
async def refresh_models() -> Dict[str, Any]:
    """
    Internal endpoint to refresh the models list from configuration.
    This doesn't fetch from LMArena but reloads from our config files.
    """
    try:
        # Load models to ensure they're fresh
        models_map = load_models()
        
        # Return the number of models loaded
        result = {
            "status": "success",
            "message": f"Refreshed {len(models_map)} models from configuration",
            "model_count": len(models_map),
            "models": list(models_map.keys())
        }
        
        logger.info(f"Models refreshed: {len(models_map)} models loaded")
        
        return result
        
    except Exception as e:
        logger.error(f"Error refreshing models: {e}")
        raise HTTPException(status_code=500, detail=f"Error refreshing models: {str(e)}")


@router.get("/internal/models/raw", tags=["internal"])
async def get_raw_models() -> Dict[str, str]:
    """
    Internal endpoint to get raw models mapping (for debugging).
    """
    try:
        models_map = load_models()
        
        # Return the raw mapping
        return models_map
        
    except Exception as e:
        logger.error(f"Error getting raw models: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading raw models: {str(e)}")

################################################################################
# FILE: lmarena_bridge/api/routes_internal.py
################################################################################
"""
Internal API routes for health checks and debugging.
These are not part of the OpenAI API but are used for internal purposes.
"""

import logging
from fastapi import APIRouter, HTTPException, WebSocket, WebSocketDisconnect
from typing import Dict, Any
import asyncio
import time

from ..settings import load_settings
from ..services.websocket_hub import websocket_hub

logger = logging.getLogger(__name__)
router = APIRouter()


@router.get("/internal/healthz", tags=["internal"])
async def health_check() -> Dict[str, str]:
    """
    Health check endpoint to verify the server is running.
    """
    return {"status": "ok"}


@router.get("/internal/config", tags=["internal"])
async def get_config() -> Dict[str, Any]:
    """
    Get current server configuration (excluding sensitive data).
    """
    settings = load_settings()
    
    # Create a safe config dict without sensitive information
    safe_config = {
        "version": settings.version,
        "server_host": settings.server_host,
        "server_port": settings.server_port,
        "session_id": settings.session_id if settings.session_id != "YOUR_SESSION_ID" else None,
        "message_id": settings.message_id if settings.message_id != "YOUR_MESSAGE_ID" else None,
        "id_updater_last_mode": settings.id_updater_last_mode,
        "id_updater_battle_target": settings.id_updater_battle_target,
        "enable_auto_update": settings.enable_auto_update,
        "bypass_enabled": settings.bypass_enabled,
        "tavern_mode_enabled": settings.tavern_mode_enabled,
        "file_bed_enabled": settings.file_bed_enabled,
        "use_default_ids_if_mapping_not_found": settings.use_default_ids_if_mapping_not_found,
        "stream_response_timeout_seconds": settings.stream_response_timeout_seconds,
        "enable_idle_restart": settings.enable_idle_restart,
        "idle_restart_timeout_seconds": settings.idle_restart_timeout_seconds,
        "has_api_key": bool(settings.api_key),  # Only indicate if set, not the actual value
        "auto_open_browser": settings.auto_open_browser,
    }
    
    return safe_config


@router.get("/internal/status", tags=["internal"])
async def get_status() -> Dict[str, Any]:
    """
    Get server status including connection information.
    """
    connected_clients = await websocket_hub.get_connected_clients()
    
    status = {
        "server_time": int(time.time()),
        "connected_clients_count": len(connected_clients),
        "connected_clients": list(connected_clients),
        "has_active_connections": len(connected_clients) > 0,
    }
    
    return status


@router.websocket("/internal/ws-debug")
async def websocket_debug(websocket: WebSocket):
    """
    WebSocket endpoint for debugging connections.
    """
    await websocket.accept()
    
    # Generate a client ID
    client_id = websocket_hub.create_client_id()
    
    try:
        # Register with the hub
        await websocket_hub.register_client(client_id, websocket)
        
        # Send welcome message
        await websocket.send_json({
            "type": "connection_established",
            "client_id": client_id,
            "server_time": int(time.time()),
            "message": f"Debug WebSocket connection established with ID: {client_id}"
        })
        
        # Listen for messages (though this is primarily a server-sent connection)
        while True:
            try:
                # Wait for any message from client
                data = await websocket.receive_json()
                logger.info(f"Debug WS {client_id} received: {data}")
                
                # Echo back the received message
                await websocket.send_json({
                    "type": "echo",
                    "original_data": data,
                    "server_time": int(time.time())
                })
                
            except WebSocketDisconnect:
                logger.info(f"Debug WebSocket disconnected: {client_id}")
                break
            except Exception as e:
                logger.error(f"Error handling debug WebSocket message from {client_id}: {e}")
                break
    
    except WebSocketDisconnect:
        logger.info(f"Debug WebSocket disconnected: {client_id}")
    except Exception as e:
        logger.error(f"Error in debug WebSocket connection {client_id}: {e}")
    finally:
        # Clean up the connection
        await websocket_hub.handle_client_disconnect(client_id)


@router.get("/internal/debug/hub-status", tags=["internal"])
async def get_hub_status() -> Dict[str, Any]:
    """
    Get detailed status of the WebSocket hub.
    """
    connected_clients = await websocket_hub.get_connected_clients()
    
    hub_status = {
        "total_connections": len(websocket_hub.connections),
        "connected_clients": list(connected_clients),
        "request_routing_count": len(websocket_hub.request_routing),
        "pending_requests_count": sum(len(reqs) for reqs in websocket_hub.pending_requests.values()),
        "routing_table": websocket_hub.request_routing.copy()
    }
    
    return hub_status


@router.get("/internal/uptime", tags=["internal"])
async def get_uptime() -> Dict[str, float]:
    """
    Get server uptime information.
    """
    # For now, we'll return a simple timestamp
    # In the future, we could track actual uptime
    return {
        "server_start_time": time.time(),  # This would be set at server start
        "current_time": time.time(),
        "uptime_seconds": 0  # Placeholder
    }


@router.get("/internal/metrics", tags=["internal"])
async def get_metrics() -> Dict[str, Any]:
    """
    Get server metrics and statistics.
    """
    connected_clients = await websocket_hub.get_connected_clients()
    
    metrics = {
        "timestamp": int(time.time()),
        "connected_browser_clients": len(connected_clients),
        "has_browser_connection": len(connected_clients) > 0,
        "estimated_active_sessions": len(connected_clients),  # Rough estimate
    }
    
    return metrics


@router.post("/internal/reload-config", tags=["internal"])
async def reload_config() -> Dict[str, str]:
    """
    Reload configuration from disk.
    """
    try:
        # For now, we'll just verify the config can be loaded
        settings = load_settings()
        
        # This would trigger any config reload logic
        logger.info("Configuration reloaded successfully")
        
        return {"status": "success", "message": "Configuration reloaded"}
    except Exception as e:
        logger.error(f"Error reloading config: {e}")
        raise HTTPException(status_code=500, detail=f"Error reloading config: {str(e)}")


@router.get("/internal/info", tags=["internal"])
async def get_server_info() -> Dict[str, Any]:
    """
    Get general server information.
    """
    settings = load_settings()
    
    info = {
        "version": settings.version,
        "server_type": "LMArena Bridge",
        "api_compatibility": "OpenAI v1",
        "features": {
            "streaming": True,
            "non_streaming": True,
            "bypass_mode": settings.bypass_enabled,
            "tavern_mode": settings.tavern_mode_enabled,
            "file_bed": settings.file_bed_enabled,
            "battle_mode": True
        },
        "config_location": str(settings.__class__.__module__),  # Placeholder
    }
    
    return info

################################################################################
# FILE: lmarena_bridge/api/__init__.py
################################################################################


################################################################################
# FILE: lmarena_bridge/api/routes_chat.py
################################################################################
"""
API routes for chat completions.
Implements the /v1/chat/completions endpoint for OpenAI compatibility.
"""

import logging
import asyncio
import time
import json
from typing import Dict, Any, AsyncGenerator
from fastapi import APIRouter, HTTPException, Request, Response, status
from fastapi.responses import StreamingResponse

from ..settings import load_settings, load_models, load_model_endpoint_map
from ..services.openai_adapter import (
    OpenAIChatRequest, 
    convert_openai_request_to_lmarena,
    extract_model_info,
    is_image_model,
    apply_tavern_mode,
    apply_bypass_mode,
    validate_api_key,
    get_lmarena_model_type
)
from ..services.websocket_hub import websocket_hub
from ..services.stream_parser import parse_stream_response

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post("/v1/chat/completions", tags=["chat"])
async def chat_completions(request: Request) -> Response:
    """
    Create a chat completion using LMArena as the backend.
    Supports both streaming and non-streaming responses.
    """
    # Get API key from header
    auth_header = request.headers.get("Authorization")
    provided_api_key = None
    if auth_header and auth_header.startswith("Bearer "):
        provided_api_key = auth_header[7:]
    
    # Load settings and models
    settings = load_settings()
    
    # Validate API key if one is required
    if not validate_api_key(provided_api_key, settings.api_key):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API key"
        )
    
    # Parse the request body
    try:
        request_json = await request.json()
        openai_request = OpenAIChatRequest.model_validate(request_json)
    except Exception as e:
        logger.error(f"Invalid request format: {e}")
        raise HTTPException(status_code=400, detail=f"Invalid request format: {str(e)}")
    
    logger.info(f"API CALL [ID: {openai_request.model}] Request for model: {openai_request.model}")
    
    # Check if we have a browser connection
    if not await websocket_hub.has_connections():
        raise HTTPException(
            status_code=503,
            detail="No browser connected to the bridge. Please ensure LMArena is open in a browser with the Tampermonkey script installed."
        )
    
    # Load models and endpoint mapping
    models_map = load_models()
    endpoint_map = load_model_endpoint_map()
    
    # Get the LMArena model ID
    model_id = extract_model_info(openai_request.model, models_map)
    if not model_id:
        raise HTTPException(
            status_code=404, 
            detail=f"Model '{openai_request.model}' not found in models configuration"
        )
    
    # Determine if this is an image model
    is_img_model = is_image_model(openai_request.model, models_map)
    
    # Apply tavern mode if enabled
    messages = openai_request.messages
    if settings.tavern_mode_enabled:
        messages = apply_tavern_mode(messages)
    
    # Apply bypass mode if enabled
    if settings.bypass_enabled:
        messages = apply_bypass_mode(messages)
    
    # Determine session configuration
    session_config = {
        "session_id": settings.session_id,
        "message_id": settings.message_id,
        "mode": settings.id_updater_last_mode,
    }
    
    # Check if there's a specific endpoint mapping for this model
    if openai_request.model in endpoint_map:
        model_config = endpoint_map[openai_request.model]
        
        # Handle multiple possible configurations (random selection)
        if isinstance(model_config, list):
            import random
            model_config = random.choice(model_config)
        
        # Override session config with model-specific settings
        session_config.update(model_config)
    elif not settings.use_default_ids_if_mapping_not_found:
        raise HTTPException(
            status_code=400,
            detail=f"No endpoint mapping found for model '{openai_request.model}' and default fallback is disabled"
        )
    
    # Validate required session IDs are present
    if (session_config["session_id"] == "YOUR_SESSION_ID" or 
        session_config["message_id"] == "YOUR_MESSAGE_ID"):
        raise HTTPException(
            status_code=500,
            detail="Session IDs not configured. Please capture session IDs using the GUI or setup wizard."
        )
    
    # Generate a unique request ID
    request_id = websocket_hub.create_request_id()
    
    # Convert OpenAI request to LMArena format
    lmarena_request = convert_openai_request_to_lmarena(
        openai_request,
        model_id,
        **session_config
    )
    
    # Add the messages to the LMArena request
    lmarena_request["messages"] = messages
    
    # Update start time for timeout calculation
    start_time = time.time()
    
    # Check if streaming is requested
    if openai_request.stream:
        logger.info(f"STREAMER [ID: {request_id}] Initiating streaming request")
        
        async def generate_stream():
            """Generate streaming response from LMArena."""
            try:
                # Assign request to a client
                client_id = await websocket_hub.assign_request_to_any_client(request_id)
                if not client_id:
                    logger.error(f"No available client for request {request_id}")
                    yield f"data: {str({'error': 'No browser client available'})}\n\n"
                    return
                
                # Forward request to browser client
                success = await websocket_hub.forward_request_to_client(request_id, lmarena_request)
                if not success:
                    logger.error(f"Failed to forward request {request_id} to client")
                    yield f"data: {str({'error': 'Failed to communicate with browser client'})}\n\n"
                    return
                
                # Create a mock SSE stream (in real implementation, this would come from browser)
                # For now, we'll simulate the streaming response
                sample_response = "This is a simulated streaming response from LMArena."
                for i, char in enumerate(sample_response.split()):
                    if time.time() - start_time > settings.stream_response_timeout_seconds:
                        logger.warning(f"Request {request_id} timed out")
                        yield f"data: {str({'error': 'Request timed out'})}\n\n"
                        break
                    
                    chunk_data = {
                        "id": f"chatcmpl-{request_id}",
                        "object": "chat.completion.chunk",
                        "created": int(time.time()),
                        "model": openai_request.model,
                        "choices": [{
                            "index": 0,
                            "delta": {"content": char + " "},
                            "finish_reason": None
                        }]
                    }
                    yield f"data: {json.dumps(chunk_data)}\n\n"
                    await asyncio.sleep(0.01)  # Small delay to simulate streaming
                
                # Send finish chunk
                finish_chunk = {
                    "id": f"chatcmpl-{request_id}",
                    "object": "chat.completion.chunk",
                    "created": int(time.time()),
                    "model": openai_request.model,
                    "choices": [{
                        "index": 0,
                        "delta": {},
                        "finish_reason": "stop"
                    }]
                }
                yield f"data: {json.dumps(finish_chunk)}\n\n"
                yield "data: [DONE]\n\n"
                
            except asyncio.CancelledError:
                logger.info(f"Request {request_id} was cancelled")
                # Cleanup if needed
                raise
            except Exception as e:
                logger.error(f"Error in streaming response for {request_id}: {e}")
                error_chunk = {
                    "error": {
                        "type": "server_error",
                        "message": str(e)
                    }
                }
                yield f"data: {json.dumps(error_chunk)}\n\n"
                yield "data: [DONE]\n\n"
        
        # Return streaming response
        return StreamingResponse(
            generate_stream(),
            media_type="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "Access-Control-Allow-Origin": "*",
            }
        )
    
    else:  # Non-streaming request
        logger.info(f"COMPLETION [ID: {request_id}] Initiating completion request")
        
        try:
            # Assign request to a client
            client_id = await websocket_hub.assign_request_to_any_client(request_id)
            if not client_id:
                raise HTTPException(
                    status_code=503,
                    detail="No browser client available"
                )
            
            # Forward request to browser client
            success = await websocket_hub.forward_request_to_client(request_id, lmarena_request)
            if not success:
                raise HTTPException(
                    status_code=500,
                    detail="Failed to communicate with browser client"
                )
            
            # In a real implementation, we would wait for the response from the browser
            # For now, we'll return a simulated response
            response_content = "This is a simulated completion response from LMArena."
            
            # Calculate token usage (simulated)
            prompt_tokens = sum(len(str(msg.get("content", ""))) for msg in messages)
            completion_tokens = len(response_content.split())
            total_tokens = prompt_tokens + completion_tokens
            
            response = {
                "id": f"chatcmpl-{request_id}",
                "object": "chat.completion",
                "created": int(time.time()),
                "model": openai_request.model,
                "choices": [{
                    "index": 0,
                    "message": {
                        "role": "assistant",
                        "content": response_content
                    },
                    "finish_reason": "stop"
                }],
                "usage": {
                    "prompt_tokens": prompt_tokens,
                    "completion_tokens": completion_tokens,
                    "total_tokens": total_tokens
                }
            }
            
            logger.info(f"COMPLETION [ID: {request_id}] Completed successfully")
            return response
            
        except Exception as e:
            logger.error(f"Error in completion request {request_id}: {e}")
            raise HTTPException(status_code=500, detail=f"Error processing completion: {str(e)}")




################################################################################
# FILE: lmarena_bridge/services/websocket_hub.py
################################################################################
"""
WebSocket Hub for managing connections between API requests and browser clients.
This allows multiple tabs/api clients to potentially connect to browser instances.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Set, Any, Callable, Awaitable
from uuid import uuid4
from fastapi import WebSocket, WebSocketDisconnect
from collections import defaultdict

logger = logging.getLogger(__name__)


class WebSocketHub:
    """Manages WebSocket connections between API layer and browser clients."""
    
    def __init__(self):
        # Map of client IDs to WebSocket connections
        self.connections: Dict[str, WebSocket] = {}
        
        # Map of API request IDs to client IDs (to route responses)
        self.request_routing: Dict[str, str] = {}
        
        # Map of client IDs to pending API requests
        self.pending_requests: Dict[str, Dict[str, Any]] = defaultdict(dict)
        
        # Set of connected client IDs
        self.connected_clients: Set[str] = set()
        
        # Callbacks for handling events
        self.on_client_connect: List[Callable[[str], None]] = []
        self.on_client_disconnect: List[Callable[[str], None]] = []
        self.on_request_forward: List[Callable[[str, Dict[str, Any]], None]] = []
        self.on_response_receive: List[Callable[[str, Dict[str, Any]], None]] = []
        
        # Lock for thread safety
        self._lock = asyncio.Lock()
    
    async def register_client(self, client_id: str, websocket: WebSocket) -> None:
        """Register a new browser client connection."""
        async with self._lock:
            self.connections[client_id] = websocket
            self.connected_clients.add(client_id)
        
        # Notify listeners
        for callback in self.on_client_connect:
            try:
                callback(client_id)
            except Exception as e:
                logger.error(f"Error in client connect callback: {e}")
        
        logger.info(f"Browser client connected: {client_id}")
    
    async def unregister_client(self, client_id: str) -> None:
        """Unregister a browser client connection."""
        async with self._lock:
            if client_id in self.connections:
                del self.connections[client_id]
            
            if client_id in self.connected_clients:
                self.connected_clients.remove(client_id)
            
            # Clean up pending requests for this client
            if client_id in self.pending_requests:
                del self.pending_requests[client_id]
            
            # Remove routing entries for this client
            request_ids_to_remove = [
                req_id for req_id, client_id_route in self.request_routing.items()
                if client_id_route == client_id
            ]
            for req_id in request_ids_to_remove:
                del self.request_routing[req_id]
        
        # Notify listeners
        for callback in self.on_client_disconnect:
            try:
                callback(client_id)
            except Exception as e:
                logger.error(f"Error in client disconnect callback: {e}")
        
        logger.info(f"Browser client disconnected: {client_id}")
    
    async def has_connections(self) -> bool:
        """Check if there are any connected clients."""
        return len(self.connected_clients) > 0
    
    async def get_connected_clients(self) -> Set[str]:
        """Get a set of currently connected client IDs."""
        return self.connected_clients.copy()
    
    async def route_request_to_client(self, request_id: str, client_id: str) -> bool:
        """Route an API request to a specific client."""
        async with self._lock:
            if client_id not in self.connected_clients:
                return False
            self.request_routing[request_id] = client_id
            return True
    
    async def assign_request_to_any_client(self, request_id: str) -> Optional[str]:
        """Assign an API request to any available client."""
        if not self.connected_clients:
            return None
        
        # For now, just pick the first available client
        # In the future, we could implement more sophisticated routing
        client_id = next(iter(self.connected_clients))
        async with self._lock:
            self.request_routing[request_id] = client_id
        return client_id
    
    async def forward_request_to_client(self, request_id: str, request_data: Dict[str, Any]) -> bool:
        """Forward an API request to the appropriate browser client."""
        async with self._lock:
            if request_id not in self.request_routing:
                logger.warning(f"No client assigned for request: {request_id}")
                return False
            
            client_id = self.request_routing[request_id]
            if client_id not in self.connections:
                logger.warning(f"Client {client_id} not found for request: {request_id}")
                return False
            
            websocket = self.connections[client_id]
        
        # Add request ID to the data so client knows which request this is for
        request_data['request_id'] = request_id
        
        try:
            # Notify listeners
            for callback in self.on_request_forward:
                try:
                    callback(client_id, request_data)
                except Exception as e:
                    logger.error(f"Error in request forward callback: {e}")
            
            # Send the request to the browser client
            await websocket.send_json(request_data)
            
            # Track this pending request
            async with self._lock:
                self.pending_requests[client_id][request_id] = request_data
            
            logger.debug(f"Forwarded request {request_id} to client {client_id}")
            return True
            
        except WebSocketDisconnect:
            logger.warning(f"Client {client_id} disconnected while forwarding request {request_id}")
            await self.unregister_client(client_id)
            return False
        except Exception as e:
            logger.error(f"Error forwarding request {request_id} to client {client_id}: {e}")
            return False
    
    async def send_response_to_api_client(self, request_id: str, response_data: Dict[str, Any], send_to_websocket: Optional[WebSocket] = None) -> bool:
        """Send a response back to the API client."""
        # In the actual implementation, we'd have a way to send back to the API client
        # For now, we'll just call any registered callbacks
        
        # Notify listeners
        for callback in self.on_response_receive:
            try:
                callback(request_id, response_data)
            except Exception as e:
                logger.error(f"Error in response receive callback: {e}")
        
        logger.debug(f"Received response for request {request_id}")
        
        # Remove from pending requests
        async with self._lock:
            for client_id, pending in self.pending_requests.items():
                if request_id in pending:
                    del pending[request_id]
        
        return True
    
    async def handle_client_disconnect(self, client_id: str) -> None:
        """Handle client disconnection and clean up related data."""
        await self.unregister_client(client_id)
    
    def create_request_id(self) -> str:
        """Create a unique request ID."""
        return f"req_{uuid4().hex[:8]}"
    
    def create_client_id(self) -> str:
        """Create a unique client ID."""
        return f"client_{uuid4().hex[:8]}"


# Global hub instance
websocket_hub = WebSocketHub()

################################################################################
# FILE: lmarena_bridge/services/openai_adapter.py
################################################################################
"""
OpenAI API adapter for converting OpenAI requests to LMArena-compatible format
and converting LMArena responses back to OpenAI format.
"""

import logging
import json
from typing import Dict, List, Any, Optional, Union
from pydantic import BaseModel, field_validator
from pathlib import Path
import base64

logger = logging.getLogger(__name__)


class OpenAIChatRequest(BaseModel):
    """Model for OpenAI chat completion request."""
    
    model: str
    messages: List[Dict[str, str]]
    temperature: Optional[float] = 1.0
    top_p: Optional[float] = 1.0
    n: Optional[int] = 1
    stream: Optional[bool] = False
    stop: Optional[Union[str, List[str]]] = None
    max_tokens: Optional[int] = None
    presence_penalty: Optional[float] = 0
    frequency_penalty: Optional[float] = 0
    logit_bias: Optional[Dict[str, float]] = None
    user: Optional[str] = None
    
    @field_validator('temperature')
    @classmethod
    def validate_temperature(cls, v: Optional[float]) -> Optional[float]:
        if v is not None and (v < 0 or v > 2):
            raise ValueError('Temperature must be between 0 and 2')
        return v
    
    @field_validator('top_p')
    @classmethod
    def validate_top_p(cls, v: Optional[float]) -> Optional[float]:
        if v is not None and (v < 0 or v > 1):
            raise ValueError('Top_p must be between 0 and 1')
        return v


class OpenAIModelResponse(BaseModel):
    """Model for OpenAI list models response."""
    
    object: str = "list"
    data: List[Dict[str, Any]]


class OpenAIChatResponse(BaseModel):
    """Model for OpenAI chat completion response."""
    
    id: str
    object: str
    created: int
    model: str
    choices: List[Dict[str, Any]]
    usage: Optional[Dict[str, int]] = None


def convert_openai_request_to_lmarena(request: OpenAIChatRequest, model_id: str, **kwargs) -> Dict[str, Any]:
    """
    Convert OpenAI chat request to LMArena-compatible format.
    
    Args:
        request: OpenAI chat request
        model_id: LMArena model ID
        **kwargs: Additional parameters like session_id, message_id, etc.
    
    Returns:
        Dictionary in LMArena-compatible format
    """
    # Extract conversation history from OpenAI messages
    conversation = []
    
    # Process messages to extract user/assistant turns
    for msg in request.messages:
        role = msg.get("role", "user")
        content = msg.get("content", "")
        
        # Handle content that is a list (for multimodal)
        if isinstance(content, list):
            # For multimodal content, we need to handle both text and images
            text_content = ""
            image_urls = []
            
            for item in content:
                if isinstance(item, dict):
                    if item.get("type") == "text":
                        text_content = item.get("text", "")
                    elif item.get("type") == "image_url":
                        image_url = item.get("image_url", {}).get("url", "")
                        if image_url.startswith("data:image"):
                            # Handle base64 encoded images
                            image_urls.append(image_url)
                        else:
                            image_urls.append(image_url)
            
            if role == "user":
                conversation.append({"role": "user", "content": text_content, "images": image_urls})
            elif role == "assistant":
                conversation.append({"role": "assistant", "content": text_content})
        else:
            # Handle simple string content
            if role == "user":
                # Check if content contains image data
                if "![image](" in content or "data:image" in content:
                    # Simple image extraction for base64 images
                    import re
                    image_urls = re.findall(r'data:image/[^;]+;base64,[^\s\)]+', content)
                    text_content = re.sub(r'data:image/[^;]+;base64,[^\s\)]+\s*', '', content).strip()
                    conversation.append({"role": "user", "content": text_content, "images": image_urls})
                else:
                    conversation.append({"role": "user", "content": content})
            elif role == "assistant":
                conversation.append({"role": "assistant", "content": content})
            elif role == "system":
                # Handle system messages (will be converted based on settings)
                conversation.append({"role": "system", "content": content})
    
    # Prepare the LMArena request
    lmarena_request = {
        "conversation": conversation,
        "model": model_id,
        "temperature": request.temperature or 1.0,
        "top_p": request.top_p or 1.0,
        "max_tokens": request.max_tokens,
        "stream": request.stream or False,
    }
    
    # Add any additional parameters
    lmarena_request.update(kwargs)
    
    return lmarena_request


def format_lmarena_message_for_sending(text: str, images: Optional[List[str]] = None) -> str:
    """
    Format a message with optional images for sending to LMArena.
    """
    if not images:
        return text
    
    # For now, we'll just append image descriptions to the text
    # In the future, we'll handle actual image uploading
    message = text
    for img in images:
        if img.startswith("data:image"):
            # This is a base64 encoded image
            # We might need to upload to file bed first
            message += f" [Image: base64_data]"
        else:
            # Just a URL
            message += f" [Image: {img}]"
    
    return message


def convert_lmarena_response_to_openai_chunk(
    content: str,
    finish_reason: Optional[str] = None,
    request_id: str = "",
    model: str = "",
    index: int = 0
) -> Dict[str, Any]:
    """
    Convert a chunk of LMArena response to OpenAI format.
    """
    chunk = {
        "id": f"chatcmpl-{request_id}",
        "object": "chat.completion.chunk",
        "created": 0,  # Will be set by caller
        "model": model,
        "choices": [{
            "index": index,
            "delta": {},
            "finish_reason": finish_reason
        }]
    }
    
    if finish_reason is None and content:
        chunk["choices"][0]["delta"] = {"content": content}
        chunk["choices"][0]["finish_reason"] = None
    elif finish_reason is not None:
        chunk["choices"][0]["delta"] = {}
        chunk["choices"][0]["finish_reason"] = finish_reason
    
    return chunk


def convert_lmarena_response_to_openai_completion(
    content: str,
    request_id: str,
    model: str,
    finish_reason: str = "stop",
    prompt_tokens: int = 0,
    completion_tokens: Optional[int] = None
) -> Dict[str, Any]:
    """
    Convert LMArena response to OpenAI completion format.
    """
    # Calculate token counts if not provided
    if completion_tokens is None:
        completion_tokens = len(content.split())  # Rough estimate
    
    total_tokens = prompt_tokens + completion_tokens
    
    return {
        "id": f"chatcmpl-{request_id}",
        "object": "chat.completion",
        "created": 0,  # Will be set by caller
        "model": model,
        "choices": [{
            "index": 0,
            "message": {
                "role": "assistant",
                "content": content
            },
            "finish_reason": finish_reason
        }],
        "usage": {
            "prompt_tokens": prompt_tokens,
            "completion_tokens": completion_tokens,
            "total_tokens": total_tokens
        }
    }


def extract_model_info(model_name: str, models_map: Dict[str, str]) -> Optional[str]:
    """
    Extract the LMArena model ID from the requested model name.
    
    Args:
        model_name: The model name as requested by the client
        models_map: Mapping of friendly names to LMArena IDs
        
    Returns:
        LMArena model ID or None if not found
    """
    if model_name in models_map:
        model_spec = models_map[model_name]
        # The model spec can be just the UUID or UUID:type
        if ':' in model_spec:
            return model_spec.split(':')[0]  # Return just the UUID part
        return model_spec
    
    return None


def is_image_model(model_name: str, models_map: Dict[str, str]) -> bool:
    """
    Check if a model is an image generation model.
    
    Args:
        model_name: The model name as requested by the client
        models_map: Mapping of friendly names to LMArena IDs
        
    Returns:
        True if the model is an image model, False otherwise
    """
    if model_name in models_map:
        model_spec = models_map[model_name]
        if ':' in model_spec:
            model_type = model_spec.split(':')[1]
            return model_type == 'image'
    return False


def apply_tavern_mode(messages: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """
    Apply tavern mode: merge all system messages into one at the beginning.
    
    Args:
        messages: List of OpenAI messages
        
    Returns:
        Modified list of messages with merged system messages
    """
    system_messages = []
    other_messages = []
    
    for msg in messages:
        if msg.get("role") == "system":
            system_messages.append(msg.get("content", ""))
        else:
            other_messages.append(msg)
    
    if system_messages:
        # Combine all system messages into one
        combined_system_content = "\n".join(system_messages)
        # Put the combined system message at the beginning
        return [{"role": "system", "content": combined_system_content}] + other_messages
    
    return messages


def apply_bypass_mode(messages: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """
    Apply bypass mode: inject an empty user message before the last user message.
    
    Args:
        messages: List of OpenAI messages
        
    Returns:
        Modified list of messages with bypass message injected
    """
    if not messages:
        return messages
    
    # Find the last user message
    last_user_idx = -1
    for i in range(len(messages) - 1, -1, -1):
        if messages[i].get("role") == "user":
            last_user_idx = i
            break
    
    if last_user_idx != -1:
        # Insert an empty user message before the last user message
        messages.insert(last_user_idx, {"role": "user", "content": ""})
    
    return messages


def validate_api_key(provided_key: Optional[str], expected_key: Optional[str]) -> bool:
    """
    Validate the API key from the request against the expected key.
    
    Args:
        provided_key: API key provided in the request
        expected_key: Expected API key from settings
        
    Returns:
        True if valid or if no key is required, False otherwise
    """
    if not expected_key:
        # No API key required
        return True
    
    if not provided_key:
        # Key required but not provided
        return False
    
    return provided_key == expected_key


def create_openai_model_list(models_map: Dict[str, str]) -> OpenAIModelResponse:
    """
    Create OpenAI-compatible model list from models mapping.
    
    Args:
        models_map: Dictionary mapping friendly names to LMArena IDs
        
    Returns:
        OpenAIModelResponse with model list
    """
    models = []
    
    for friendly_name, model_spec in models_map.items():
        # Extract just the name part if it has type info
        if ':' in model_spec:
            model_id = model_spec.split(':')[0]
        else:
            model_id = model_spec
            
        models.append({
            "id": friendly_name,
            "object": "model",
            "created": 1234567890,  # Placeholder timestamp
            "owned_by": "LMArenaBridge"
        })
    
    return OpenAIModelResponse(data=models)


def get_lmarena_model_type(model_name: str, models_map: Dict[str, str]) -> str:
    """
    Get the model type (text or image) for a given model name.
    
    Args:
        model_name: The model name as requested by the client
        models_map: Mapping of friendly names to LMArena IDs
        
    Returns:
        Model type as string ('text' or 'image')
    """
    if model_name in models_map:
        model_spec = models_map[model_name]
        if ':' in model_spec:
            model_type = model_spec.split(':')[1]
            return model_type
    return 'text'  # Default to text

################################################################################
# FILE: lmarena_bridge/services/stream_parser.py
################################################################################
"""
Stream parser for processing LMArena server-sent events (SSE).
This module handles parsing the complex streaming responses from LMArena
and converting them to OpenAI-compatible format.
"""

import re
import json
import logging
import asyncio
from typing import AsyncGenerator, Dict, Any, Optional, Tuple
from fastapi import HTTPException

logger = logging.getLogger(__name__)

# Regular expressions to parse LMArena's SSE format
# These patterns are adapted from the original implementation
TEXT_RE = re.compile(r'a\d+:"([^"]*)"')
IMG_RE = re.compile(r'a\d+:\[(\{.*\})\]')
FINISH_RE = re.compile(r'ad:(\{.*\})')
CLOUDFLARE_RE = re.compile(r'Cloudflare')

# Pattern to extract finish reason from finish event
FINISH_REASON_RE = re.compile(r'"finishReason":"([^"]*)"')


class StreamParser:
    """Parser for LMArena's server-sent events stream."""
    
    def __init__(self, request_id: str, model: str):
        self.request_id = request_id
        self.model = model
        self.has_content = False
        self.full_content = ""
        self.cloudflare_detected = False
    
    def parse_sse_line(self, line: str) -> Optional[Dict[str, Any]]:
        """
        Parse a single line from the SSE stream.
        Returns either a delta dictionary or None if not a content line.
        """
        # Check for Cloudflare detection
        if CLOUDFLARE_RE.search(line):
            self.cloudflare_detected = True
            return {
                "type": "error",
                "error": "Cloudflare verification required",
                "message": "Please complete Cloudflare verification in your browser and try again."
            }
        
        # Try to match text content
        text_match = TEXT_RE.search(line)
        if text_match:
            content = text_match.group(1)
            self.full_content += content
            self.has_content = True
            
            return {
                "type": "text",
                "content": content
            }
        
        # Try to match image content
        img_match = IMG_RE.search(line)
        if img_match:
            try:
                img_data = json.loads(img_match.group(1))
                return {
                    "type": "image",
                    "data": img_data
                }
            except json.JSONDecodeError:
                logger.warning(f"Failed to parse image data: {img_match.group(1)}")
                return None
        
        # Try to match finish event
        finish_match = FINISH_RE.search(line)
        if finish_match:
            try:
                finish_data = json.loads(finish_match.group(1))
                finish_reason = finish_data.get("finishReason", "stop")
                
                return {
                    "type": "finish",
                    "finish_reason": finish_reason,
                    "raw_data": finish_data
                }
            except json.JSONDecodeError:
                logger.warning(f"Failed to parse finish data: {finish_match.group(1)}")
                return {
                    "type": "finish",
                    "finish_reason": "stop",
                    "raw_data": {}
                }
        
        return None
    
    async def convert_to_openai_format(self, parsed_data: Dict[str, Any], 
                                     chunk_id: str, index: int = 0) -> Dict[str, Any]:
        """
        Convert parsed LMArena data to OpenAI-compatible format.
        """
        if parsed_data["type"] == "text":
            return {
                "id": chunk_id,
                "object": "chat.completion.chunk",
                "created": int(asyncio.get_event_loop().time()),
                "model": self.model,
                "choices": [{
                    "index": index,
                    "delta": {"content": parsed_data["content"]},
                    "finish_reason": None
                }]
            }
        
        elif parsed_data["type"] == "image":
            # For image models, we include the image data
            return {
                "id": chunk_id,
                "object": "chat.completion.chunk",
                "created": int(asyncio.get_event_loop().time()),
                "model": self.model,
                "choices": [{
                    "index": index,
                    "delta": {"content": f"[Image: {parsed_data['data'].get('image', 'Generated image')}]"},
                    "finish_reason": None
                }]
            }
        
        elif parsed_data["type"] == "finish":
            finish_reason = parsed_data["finish_reason"]
            # Map LMArena finish reasons to OpenAI equivalents
            if finish_reason.lower() in ["stop", "eos_token"]:
                mapped_reason = "stop"
            elif "length" in finish_reason.lower():
                mapped_reason = "length"
            elif "content" in finish_reason.lower():
                mapped_reason = "content_filter"
            else:
                mapped_reason = finish_reason.lower()
            
            return {
                "id": chunk_id,
                "object": "chat.completion.chunk",
                "created": int(asyncio.get_event_loop().time()),
                "model": self.model,
                "choices": [{
                    "index": index,
                    "delta": {},
                    "finish_reason": mapped_reason
                }]
            }
        
        elif parsed_data["type"] == "error":
            return {
                "id": chunk_id,
                "object": "chat.completion.chunk",
                "created": int(asyncio.get_event_loop().time()),
                "model": self.model,
                "choices": [{
                    "index": index,
                    "delta": {},
                    "finish_reason": "error"
                }],
                "error": parsed_data.get("error", "Stream error"),
                "error_message": parsed_data.get("message", "An error occurred while processing the stream")
            }
        
        return None
    
    def finalize(self) -> Tuple[bool, str]:
        """
        Get final status and content after parsing is complete.
        Returns (has_content, full_content).
        """
        return self.has_content, self.full_content


class NonStreamingConverter:
    """Converter for non-streaming responses."""
    
    @staticmethod
    def convert_to_openai_completion(response_text: str, 
                                   model: str, 
                                   prompt_tokens: int = 0,
                                   completion_tokens: Optional[int] = None) -> Dict[str, Any]:
        """
        Convert LMArena response to OpenAI-compatible completion format.
        """
        # If we don't have completion tokens, make a rough estimate
        if completion_tokens is None:
            completion_tokens = len(response_text.split())  # Very rough estimate
        
        total_tokens = prompt_tokens + completion_tokens
        
        return {
            "id": f"chatcmpl-{asyncio.get_event_loop().time()}",
            "object": "chat.completion",
            "created": int(asyncio.get_event_loop().time()),
            "model": model,
            "choices": [{
                "index": 0,
                "message": {
                    "role": "assistant",
                    "content": response_text
                },
                "finish_reason": "stop"
            }],
            "usage": {
                "prompt_tokens": prompt_tokens,
                "completion_tokens": completion_tokens,
                "total_tokens": total_tokens
            }
        }


async def parse_stream_response(sse_stream: AsyncGenerator[str, None], 
                              request_id: str, 
                              model: str,
                              is_streaming: bool = True) -> AsyncGenerator[Dict[str, Any], None]:
    """
    Parse the SSE stream from LMArena and yield OpenAI-compatible chunks.
    """
    parser = StreamParser(request_id, model)
    chunk_index = 0
    
    async for line in sse_stream:
        if line.startswith("data: "):
            data = line[6:]  # Remove "data: " prefix
            
            if data.strip() == "[DONE]":
                # Send final chunk with finish reason
                if is_streaming:
                    final_chunk = {
                        "id": f"chatcmpl-{request_id}-{chunk_index}",
                        "object": "chat.completion.chunk",
                        "created": int(asyncio.get_event_loop().time()),
                        "model": model,
                        "choices": [{
                            "index": 0,
                            "delta": {},
                            "finish_reason": "stop"
                        }]
                    }
                    yield final_chunk
                break
            
            parsed = parser.parse_sse_line(data)
            if parsed:
                if parsed["type"] == "error":
                    # For errors, yield error chunk and return
                    error_chunk = await parser.convert_to_openai_format(
                        parsed, f"chatcmpl-{request_id}-error", chunk_index
                    )
                    yield error_chunk
                    return  # Stop processing on error
                elif parsed["type"] == "finish":
                    if is_streaming:
                        finish_chunk = await parser.convert_to_openai_format(
                            parsed, f"chatcmpl-{request_id}-{chunk_index}", chunk_index
                        )
                        yield finish_chunk
                    break
                elif parsed["type"] in ["text", "image"]:
                    if is_streaming:
                        chunk = await parser.convert_to_openai_format(
                            parsed, f"chatcmpl-{request_id}-{chunk_index}", chunk_index
                        )
                        if chunk:
                            yield chunk
                        chunk_index += 1
    
    # Set the full content on the parser so the caller can access it
    # This is important for non-streaming responses
    if not is_streaming:
        has_content, full_content = parser.finalize()
        if has_content:
            # For non-streaming, we return the complete response at once
            completion = NonStreamingConverter.convert_to_openai_completion(
                full_content, model
            )
            yield completion


def extract_finish_reason(sse_line: str) -> Optional[str]:
    """
    Extract finish reason from an SSE line.
    """
    match = FINISH_RE.search(sse_line)
    if match:
        try:
            data = json.loads(match.group(1))
            return data.get("finishReason")
        except json.JSONDecodeError:
            pass
    return None


def is_cloudflare_challenge(sse_line: str) -> bool:
    """
    Check if the SSE line indicates a Cloudflare challenge.
    """
    return CLOUDFLARE_RE.search(sse_line) is not None

################################################################################
# FILE: lmarena_bridge/services/file_bed_client.py
################################################################################
"""
File bed client for uploading images and files to external storage.
This allows large files to be uploaded to a separate service before
being referenced in LMArena requests.
"""

import logging
import httpx
from typing import Optional, Dict, Any, Union
from pathlib import Path
import base64

logger = logging.getLogger(__name__)


class FileBedClient:
    """Client for interacting with an external file bed service."""
    
    def __init__(self, upload_url: str, api_key: Optional[str] = None):
        self.upload_url = upload_url
        self.api_key = api_key
        self.client = httpx.AsyncClient(timeout=30.0)
        
        # Add authorization header if API key is provided
        if self.api_key:
            self.client.headers.update({"Authorization": f"Bearer {self.api_key}"})
    
    async def close(self):
        """Close the HTTP client."""
        await self.client.aclose()
    
    async def upload_file(self, file_path: Union[str, Path], filename: Optional[str] = None) -> Optional[str]:
        """Upload a file and return the URL of the uploaded file."""
        try:
            file_path = Path(file_path)
            if not file_path.exists():
                logger.error(f"File does not exist: {file_path}")
                return None
            
            if filename is None:
                filename = file_path.name
            
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            # Create multipart form data
            files = {"file": (filename, file_content, "application/octet-stream")}
            
            response = await self.client.post(
                self.upload_url,
                files=files
            )
            
            if response.status_code == 200:
                # Assuming the response contains the uploaded file URL
                result = response.json()
                if isinstance(result, str):
                    # If response is directly the URL
                    return result
                elif isinstance(result, dict) and "url" in result:
                    # If response has a "url" field
                    return result["url"]
                elif isinstance(result, dict) and "file_url" in result:
                    # If response has a "file_url" field
                    return result["file_url"]
                else:
                    logger.error(f"Unexpected response format: {result}")
                    return None
            else:
                logger.error(f"File upload failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Error uploading file: {e}")
            return None
    
    async def upload_base64_image(self, base64_image: str, filename: str = "image.png") -> Optional[str]:
        """Upload a base64-encoded image and return the URL."""
        try:
            # Decode the base64 string
            image_data = base64.b64decode(base64_image)
            
            # Create multipart form data
            files = {"file": (filename, image_data, "image/png")}
            
            response = await self.client.post(
                self.upload_url,
                files=files
            )
            
            if response.status_code == 200:
                # Assuming the response contains the uploaded file URL
                result = response.json()
                if isinstance(result, str):
                    # If response is directly the URL
                    return result
                elif isinstance(result, dict) and "url" in result:
                    # If response has a "url" field
                    return result["url"]
                elif isinstance(result, dict) and "file_url" in result:
                    # If response has a "file_url" field
                    return result["file_url"]
                else:
                    logger.error(f"Unexpected response format: {result}")
                    return None
            else:
                logger.error(f"Image upload failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Error uploading base64 image: {e}")
            return None
    
    async def upload_bytes(self, data: bytes, filename: str, content_type: str = "application/octet-stream") -> Optional[str]:
        """Upload raw bytes and return the URL."""
        try:
            # Create multipart form data
            files = {"file": (filename, data, content_type)}
            
            response = await self.client.post(
                self.upload_url,
                files=files
            )
            
            if response.status_code == 200:
                # Assuming the response contains the uploaded file URL
                result = response.json()
                if isinstance(result, str):
                    # If response is directly the URL
                    return result
                elif isinstance(result, dict) and "url" in result:
                    # If response has a "url" field
                    return result["url"]
                elif isinstance(result, dict) and "file_url" in result:
                    # If response has a "file_url" field
                    return result["file_url"]
                else:
                    logger.error(f"Unexpected response format: {result}")
                    return None
            else:
                logger.error(f"Bytes upload failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Error uploading bytes: {e}")
            return None


# Global file bed client instance (will be initialized when needed)
file_bed_client: Optional[FileBedClient] = None


async def get_file_bed_client(upload_url: str, api_key: Optional[str] = None) -> FileBedClient:
    """Get or create the global file bed client instance."""
    global file_bed_client
    if file_bed_client is None:
        file_bed_client = FileBedClient(upload_url, api_key)
    return file_bed_client


async def close_file_bed_client():
    """Close the global file bed client."""
    global file_bed_client
    if file_bed_client:
        await file_bed_client.close()
        file_bed_client = None

################################################################################
# FILE: lmarena_bridge/services/__init__.py
################################################################################


################################################################################
# FILE: lmarena_bridge/utils/jsonc.py
################################################################################
"""
JSONC (JSON with Comments) parser utility.
Supports both JSON and JSONC files with comments and trailing commas.
"""

import json
import re
from pathlib import Path
from typing import Any, Union


def remove_comments(text: str) -> str:
    """
    Remove comments from JSONC text.
    Supports both // single-line and /* */ multi-line comments.
    """
    # Remove single-line comments
    text = re.sub(r'//.*$', '', text, flags=re.MULTILINE)
    # Remove multi-line comments
    text = re.sub(r'/\*.*?\*/', '', text, flags=re.DOTALL)
    return text


def parse_jsonc(content: str) -> Any:
    """
    Parse JSONC content (JSON with comments) into Python object.
    """
    content = remove_comments(content)
    # Remove trailing commas before closing braces/brackets
    content = re.sub(r',(\s*[}\]])', r'\1', content)
    return json.loads(content)


def load_jsonc_file(file_path: Union[str, Path]) -> Any:
    """
    Load and parse a JSONC file.
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    return parse_jsonc(content)


def save_jsonc_file(file_path: Union[str, Path], data: Any, indent: int = 2) -> None:
    """
    Save data to a JSON file with formatting.
    While we save as regular JSON, the loader will handle comments when reading.
    """
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=indent, ensure_ascii=False)
        f.write('\n')


# For backward compatibility
loads = parse_jsonc
dumps = json.dumps

################################################################################
# FILE: lmarena_bridge/utils/__init__.py
################################################################################


################################################################################
# FILE: lmarena_bridge_gui/__init__.py
################################################################################
__all__ = []

################################################################################
# FILE: lmarena_bridge_gui/gtk_app.py
################################################################################
from __future__ import annotations
import sys
import os
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib, Gio
from .utils.http_client import BridgeClient
from .ui.main_window import MainWindow
from .ui.setup_wizard import SetupWizard

SERVER_URL_DEFAULT = "http://127.0.0.1:5102"

class BridgeApp(Gtk.Application):
    def __init__(self, server_url: str):
        super().__init__(application_id="ai.lmarena.bridge.gui", flags=Gio.ApplicationFlags.FLAGS_NONE)
        self.server_url = server_url
        self.client = BridgeClient(server_url)
        self.main_window = None

    def do_startup(self):
        Gtk.Application.do_startup(self)
        self._setup_actions()

    def _setup_actions(self):
        action = Gio.SimpleAction.new("setup_wizard", None)
        action.connect("activate", self.on_setup_wizard)
        self.add_action(action)

        action = Gio.SimpleAction.new("about", None)
        action.connect("activate", self.on_about)
        self.add_action(action)

        action = Gio.SimpleAction.new("quit", None)
        action.connect("activate", lambda *_: self.quit())
        self.add_action(action)
        self.set_accels_for_action("app.quit", ["<Control>Q"])

    def do_activate(self):
        if not self.main_window:
            self.main_window = MainWindow(self, self.client)
            # Check if first run
            if self._is_first_run():
                self._show_setup_wizard()
        self.main_window.present()

    def _is_first_run(self) -> bool:
        # Check if session IDs are still default
        cfg = self.client.get_config()
        if cfg:
            sid = cfg.get("session_id", "")
            if not sid or "YOUR_" in sid:
                return True
        else:
            # Offline check
            try:
                from lmarena_bridge.settings import load_settings
                s = load_settings()
                if not s.session_id or "YOUR_" in s.session_id:
                    return True
            except Exception:
                pass
        return False

    def _show_setup_wizard(self):
        wizard = SetupWizard(self.main_window, self.client, lambda: self.main_window.config_editor.fetch_config())
        wizard.present()

    def on_setup_wizard(self, *_):
        self._show_setup_wizard()

    def on_about(self, *_):
        about = Gtk.AboutDialog(
            transient_for=self.main_window,
            modal=True,
            program_name="LMArena Bridge",
            version="3.0.0",
            comments="A bridge for using LMArena models via OpenAI-compatible API",
            website="https://github.com/Lianues/LMArenaBridge",
            license_type=Gtk.License.MIT_X11,
        )
        about.present()

def main():
    server_url = SERVER_URL_DEFAULT
    if len(sys.argv) > 1 and sys.argv[1].startswith("http"):
        server_url = sys.argv[1]
    app = BridgeApp(server_url)
    app.run()

if __name__ == "__main__":
    main()

################################################################################
# FILE: lmarena_bridge_gui/ui/__init__.py
################################################################################
__all__ = []

################################################################################
# FILE: lmarena_bridge_gui/ui/widgets.py
################################################################################
from __future__ import annotations
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk

def info_dialog(parent: Gtk.Window, title: str, text: str):
    md = Gtk.MessageDialog(
        transient_for=parent,
        modal=True,
        buttons=Gtk.ButtonsType.OK,
        message_type=Gtk.MessageType.INFO,
        text=title,
    )
    md.set_property("secondary-text", text)
    md.connect("response", lambda d, *_: d.destroy())
    md.present()

def error_dialog(parent: Gtk.Window, title: str, text: str):
    md = Gtk.MessageDialog(
        transient_for=parent,
        modal=True,
        buttons=Gtk.ButtonsType.OK,
        message_type=Gtk.MessageType.ERROR,
        text=title,
    )
    md.set_property("secondary-text", text)
    md.connect("response", lambda d, *_: d.destroy())
    md.present()

def confirm_dialog(parent: Gtk.Window, title: str, text: str, callback) -> None:
    md = Gtk.MessageDialog(
        transient_for=parent,
        modal=True,
        buttons=Gtk.ButtonsType.YES_NO,
        message_type=Gtk.MessageType.QUESTION,
        text=title,
    )
    md.set_property("secondary-text", text)
    def on_response(dialog, response_id):
        dialog.destroy()
        if response_id == Gtk.ResponseType.YES:
            callback()
    md.connect("response", on_response)
    md.present()

class StatusIndicator(Gtk.Box):
    """Visual connection status indicator"""
    def __init__(self):
        super().__init__(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.indicator = Gtk.DrawingArea()
        self.indicator.set_size_request(12, 12)
        self.indicator.set_draw_func(self._draw_circle)
        self.label = Gtk.Label(label="Unknown")
        self.append(self.indicator)
        self.append(self.label)
        self.status = "disconnected"  # connected | disconnected | warning

    def _draw_circle(self, area, cr, width, height):
        colors = {
            "connected": (0.0, 0.8, 0.0),
            "disconnected": (0.8, 0.0, 0.0),
            "warning": (0.9, 0.7, 0.0),
        }
        color = colors.get(self.status, (0.5, 0.5, 0.5))
        cr.arc(width / 2, height / 2, min(width, height) / 2 - 1, 0, 2 * 3.14159)
        cr.set_source_rgb(*color)
        cr.fill()

    def set_status(self, status: str, text: str):
        self.status = status
        self.label.set_text(text)
        self.indicator.queue_draw()

################################################################################
# FILE: lmarena_bridge_gui/ui/log_viewer.py
################################################################################
from __future__ import annotations
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk

class LogViewer(Gtk.Box):
    def __init__(self):
        super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        # Toolbar
        toolbar = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.append(toolbar)

        self.search_entry = Gtk.SearchEntry()
        self.search_entry.set_placeholder_text("Search logs...")
        self.search_entry.connect("search-changed", self.on_search)
        toolbar.append(self.search_entry)

        clear_btn = Gtk.Button(label="Clear")
        clear_btn.connect("clicked", lambda *_: self.clear())
        toolbar.append(clear_btn)

        save_btn = Gtk.Button(label="Save...")
        save_btn.connect("clicked", self.on_save)
        toolbar.append(save_btn)

        # Text view
        self.scrolled = Gtk.ScrolledWindow()
        self.scrolled.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.scrolled.set_vexpand(True)
        self.append(self.scrolled)

        self.textview = Gtk.TextView(editable=False, monospace=True, wrap_mode=Gtk.WrapMode.WORD_CHAR)
        self.buffer = self.textview.get_buffer()
        self.scrolled.set_child(self.textview)

        # Tags for highlighting
        self.tag_highlight = self.buffer.create_tag("highlight", background="yellow")

    def append(self, line: str):
        end = self.buffer.get_end_iter()
        self.buffer.insert(end, line)
        # Auto-scroll
        mark = self.buffer.create_mark(None, self.buffer.get_end_iter(), False)
        self.textview.scroll_to_mark(mark, 0.0, True, 0.0, 1.0)
        # Re-apply search highlight if active
        self.on_search(self.search_entry)

    def clear(self):
        self.buffer.set_text("")

    def on_search(self, entry: Gtk.SearchEntry):
        # Remove old highlights
        start, end = self.buffer.get_bounds()
        self.buffer.remove_tag(self.tag_highlight, start, end)

        query = entry.get_text().strip()
        if not query:
            return

        # Highlight all matches
        cursor = self.buffer.get_start_iter()
        while True:
            match = cursor.forward_search(query, Gtk.TextSearchFlags.CASE_INSENSITIVE, None)
            if not match:
                break
            match_start, match_end = match
            self.buffer.apply_tag(self.tag_highlight, match_start, match_end)
            cursor = match_end

    def on_save(self, *_):
        dialog = Gtk.FileDialog()
        dialog.set_initial_name("lmarena-bridge.log")
        dialog.save(callback=self._save_callback)

    def _save_callback(self, dialog, result):
        try:
            file = dialog.save_finish(result)
            path = file.get_path()
            start, end = self.buffer.get_bounds()
            text = self.buffer.get_text(start, end, False)
            with open(path, "w", encoding="utf-8") as f:
                f.write(text)
        except Exception:
            pass

################################################################################
# FILE: lmarena_bridge_gui/ui/config_editor.py
################################################################################
from __future__ import annotations
import re
import threading
from typing import Any, Dict, Optional
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib
from ..utils.http_client import BridgeClient
from .widgets import info_dialog, error_dialog

UUID_RE = re.compile(r"^[a-f0-9-]{36}$", re.IGNORECASE)

class ConfigEditor(Gtk.ScrolledWindow):
    def __init__(self, parent_window: Gtk.Window, client: BridgeClient):
        super().__init__()
        self.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        self.parent_window = parent_window
        self.client = client
        self.values: Dict[str, Any] = {}
        self.widgets: Dict[str, Gtk.Widget] = {}
        self._build()

    def _build(self):
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=12, margin_bottom=12, margin_start=12, margin_end=12)
        self.set_child(box)

        # Session section
        session_frame = Gtk.Frame(label="Session Settings")
        session_grid = Gtk.Grid(column_spacing=12, row_spacing=8, margin_top=8, margin_bottom=8, margin_start=8, margin_end=8)
        session_frame.set_child(session_grid)
        box.append(session_frame)

        row = 0
        for key, label in [("session_id", "Session ID"), ("message_id", "Message ID")]:
            session_grid.attach(Gtk.Label(label=label, xalign=0), 0, row, 1, 1)
            w = Gtk.Entry()
            w.set_hexpand(True)
            self.widgets[key] = w
            session_grid.attach(w, 1, row, 1, 1)
            row += 1

        # Mode section
        mode_frame = Gtk.Frame(label="Operation Mode")
        mode_grid = Gtk.Grid(column_spacing=12, row_spacing=8, margin_top=8, margin_bottom=8, margin_start=8, margin_end=8)
        mode_frame.set_child(mode_grid)
        box.append(mode_frame)

        mode_grid.attach(Gtk.Label(label="Mode", xalign=0), 0, 0, 1, 1)
        mode_combo = Gtk.ComboBoxText()
        mode_combo.append("direct_chat", "Direct Chat")
        mode_combo.append("battle", "Battle")
        self.widgets["id_updater_last_mode"] = mode_combo
        mode_grid.attach(mode_combo, 1, 0, 1, 1)

        mode_grid.attach(Gtk.Label(label="Battle Target", xalign=0), 0, 1, 1, 1)
        target_combo = Gtk.ComboBoxText()
        target_combo.append("A", "Assistant A")
        target_combo.append("B", "Assistant B")
        self.widgets["id_updater_battle_target"] = target_combo
        mode_grid.attach(target_combo, 1, 1, 1, 1)

        # Features section
        features_frame = Gtk.Frame(label="Features")
        features_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6, margin_top=8, margin_bottom=8, margin_start=8, margin_end=8)
        features_frame.set_child(features_box)
        box.append(features_frame)

        for key, label in [
            ("bypass_enabled", "Bypass Mode (inject empty user message)"),
            ("tavern_mode_enabled", "Tavern Mode (merge system prompts)"),
            ("enable_auto_update", "Auto-check for updates"),
            ("auto_open_browser", "Auto-open LMArena on start"),
            ("use_default_ids_if_mapping_not_found", "Fallback to default IDs if model mapping not found"),
        ]:
            hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=12)
            sw = Gtk.Switch()
            self.widgets[key] = sw
            lbl = Gtk.Label(label=label, xalign=0)
            lbl.set_hexpand(True)
            hbox.append(lbl)
            hbox.append(sw)
            features_box.append(hbox)

        # File bed section
        filebed_frame = Gtk.Frame(label="File Bed (Optional)")
        filebed_grid = Gtk.Grid(column_spacing=12, row_spacing=8, margin_top=8, margin_bottom=8, margin_start=8, margin_end=8)
        filebed_frame.set_child(filebed_grid)
        box.append(filebed_frame)

        row = 0
        filebed_grid.attach(Gtk.Label(label="Enabled", xalign=0), 0, row, 1, 1)
        sw = Gtk.Switch()
        self.widgets["file_bed_enabled"] = sw
        filebed_grid.attach(sw, 1, row, 1, 1)
        row += 1

        filebed_grid.attach(Gtk.Label(label="Upload URL", xalign=0), 0, row, 1, 1)
        w = Gtk.Entry()
        w.set_hexpand(True)
        w.set_placeholder_text("http://127.0.0.1:5180/upload")
        self.widgets["file_bed_upload_url"] = w
        filebed_grid.attach(w, 1, row, 1, 1)
        row += 1

        filebed_grid.attach(Gtk.Label(label="API Key", xalign=0), 0, row, 1, 1)
        w = Gtk.Entry()
        w.set_visibility(False)
        w.set_input_purpose(Gtk.InputPurpose.PASSWORD)
        self.widgets["file_bed_api_key"] = w
        filebed_grid.attach(w, 1, row, 1, 1)

        # Advanced section
        adv_frame = Gtk.Frame(label="Advanced")
        adv_grid = Gtk.Grid(column_spacing=12, row_spacing=8, margin_top=8, margin_bottom=8, margin_start=8, margin_end=8)
        adv_frame.set_child(adv_grid)
        box.append(adv_frame)

        row = 0
        adv_grid.attach(Gtk.Label(label="Server Port", xalign=0), 0, row, 1, 1)
        adj = Gtk.Adjustment(lower=1024, upper=65535, value=5102, step_increment=1, page_increment=10)
        spin = Gtk.SpinButton(adjustment=adj, digits=0)
        self.widgets["server_port"] = spin
        adv_grid.attach(spin, 1, row, 1, 1)
        row += 1

        adv_grid.attach(Gtk.Label(label="Stream Timeout (s)", xalign=0), 0, row, 1, 1)
        adj = Gtk.Adjustment(lower=10, upper=3600, value=360, step_increment=10, page_increment=60)
        spin = Gtk.SpinButton(adjustment=adj, digits=0)
        self.widgets["stream_response_timeout_seconds"] = spin
        adv_grid.attach(spin, 1, row, 1, 1)
        row += 1

        adv_grid.attach(Gtk.Label(label="API Key (optional)", xalign=0), 0, row, 1, 1)
        w = Gtk.Entry()
        w.set_visibility(False)
        w.set_input_purpose(Gtk.InputPurpose.PASSWORD)
        self.widgets["api_key"] = w
        adv_grid.attach(w, 1, row, 1, 1)

        # Buttons
        btn_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=8, margin_top=12)
        btn_box.set_halign(Gtk.Align.END)
        save_btn = Gtk.Button(label="Save Configuration")
        save_btn.add_css_class("suggested-action")
        reload_btn = Gtk.Button(label="Reload")
        btn_box.append(reload_btn)
        btn_box.append(save_btn)
        box.append(btn_box)

        save_btn.connect("clicked", self.on_save)
        reload_btn.connect("clicked", lambda *_: self.fetch_config())

    def set_value(self, key: str, value: Any):
        w = self.widgets.get(key)
        if w is None:
            return
        if isinstance(w, Gtk.Entry):
            w.set_text(str(value or ""))
        elif isinstance(w, Gtk.SpinButton):
            try:
                w.set_value(float(value or 0))
            except Exception:
                w.set_value(0.0)
        elif isinstance(w, Gtk.Switch):
            w.set_active(bool(value))
        elif isinstance(w, Gtk.ComboBoxText):
            w.set_active_id(str(value))

    def get_value(self, key: str) -> Any:
        w = self.widgets.get(key)
        if w is None:
            return None
        if isinstance(w, Gtk.Entry):
            return w.get_text()
        elif isinstance(w, Gtk.SpinButton):
            return int(w.get_value())
        elif isinstance(w, Gtk.Switch):
            return w.get_active()
        elif isinstance(w, Gtk.ComboBoxText):
            return w.get_active_id()
        return None

    def load_from_dict(self, data: Dict[str, Any]):
        self.values = data.copy()
        for k in self.widgets.keys():
            self.set_value(k, data.get(k))
        # Don't save masked API key
        if data.get("api_key") == "********":
            self.set_value("api_key", "")

    def validate(self) -> Optional[str]:
        sid = self.get_value("session_id") or ""
        mid = self.get_value("message_id") or ""
        if sid and not UUID_RE.match(sid):
            return "Session ID must be a valid UUID."
        if mid and not UUID_RE.match(mid):
            return "Message ID must be a valid UUID."
        port = self.get_value("server_port")
        if port and not (1024 <= int(port) <= 65535):
            return "Server port must be between 1024 and 65535."
        timeout = self.get_value("stream_response_timeout_seconds")
        if timeout and int(timeout) <= 0:
            return "Stream timeout must be positive."
        return None

    def collect_updates(self) -> Dict[str, Any]:
        updates = {}
        for k in self.widgets.keys():
            val = self.get_value(k)
            if self.values.get(k) != val:
                # Skip empty password fields
                if k in ("api_key", "file_bed_api_key") and not val:
                    continue
                updates[k] = val
        return updates

    def on_save(self, *_):
        err = self.validate()
        if err:
            error_dialog(self.parent_window, "Invalid Configuration", err)
            return

        updates = self.collect_updates()
        if not updates:
            info_dialog(self.parent_window, "No Changes", "No changes detected.")
            return

        def worker():
            ok = self.client.patch_config(updates)
            if ok:
                GLib.idle_add(info_dialog, self.parent_window, "Saved", "Configuration updated successfully.")
                GLib.idle_add(self.fetch_config)
            else:
                # Fallback to offline
                try:
                    from lmarena_bridge.settings import update_config_partial
                    if update_config_partial(updates):
                        GLib.idle_add(info_dialog, self.parent_window, "Saved (Offline)", "Configuration updated in file.")
                    else:
                        GLib.idle_add(error_dialog, self.parent_window, "Failed", "Could not update configuration.")
                except Exception as e:
                    GLib.idle_add(error_dialog, self.parent_window, "Failed", str(e))

        threading.Thread(target=worker, daemon=True).start()

    def fetch_config(self):
        def worker():
            cfg = self.client.get_config()
            if cfg:
                GLib.idle_add(self.load_from_dict, cfg)
            else:
                try:
                    from lmarena_bridge.settings import load_settings
                    s = load_settings()
                    GLib.idle_add(self.load_from_dict, s.model_dump())
                except Exception as e:
                    GLib.idle_add(error_dialog, self.parent_window, "Failed", f"Could not load config: {e}")

        threading.Thread(target=worker, daemon=True).start()

################################################################################
# FILE: lmarena_bridge_gui/ui/chat_playground.py
################################################################################
from __future__ import annotations
import json
import threading
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib
from ..utils.http_client import BridgeClient
from .widgets import error_dialog

class ChatPlayground(Gtk.Box):
    def __init__(self, parent_window: Gtk.Window, client: BridgeClient):
        super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6, margin_top=6, margin_bottom=6, margin_start=6, margin_end=6)
        self.parent_window = parent_window
        self.client = client
        self.messages = []
        self._build()

    def _build(self):
        # Model selector
        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.append(hbox)
        hbox.append(Gtk.Label(label="Model:"))
        self.model_combo = Gtk.ComboBoxText()
        self.model_combo.set_hexpand(True)
        hbox.append(self.model_combo)
        refresh_btn = Gtk.Button(label="↻")
        refresh_btn.connect("clicked", lambda *_: self.refresh_models())
        hbox.append(refresh_btn)

        # System prompt
        self.append(Gtk.Label(label="System Prompt (optional):", xalign=0))
        self.system_entry = Gtk.Entry()
        self.system_entry.set_placeholder_text("You are a helpful assistant...")
        self.append(self.system_entry)

        # Chat history
        self.append(Gtk.Label(label="Chat History:", xalign=0))
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_vexpand(True)
        scrolled.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.history_view = Gtk.TextView(editable=False, wrap_mode=Gtk.WrapMode.WORD_CHAR)
        self.history_buffer = self.history_view.get_buffer()
        scrolled.set_child(self.history_view)
        self.append(scrolled)

        # User input
        self.append(Gtk.Label(label="Your Message:", xalign=0))
        self.user_entry = Gtk.Entry()
        self.user_entry.set_placeholder_text("Type your message here...")
        self.user_entry.connect("activate", self.on_send)
        self.append(self.user_entry)

        # Buttons
        btn_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        btn_box.set_halign(Gtk.Align.END)
        self.send_btn = Gtk.Button(label="Send")
        self.send_btn.add_css_class("suggested-action")
        self.send_btn.connect("clicked", self.on_send)
        clear_btn = Gtk.Button(label="Clear History")
        clear_btn.connect("clicked", lambda *_: self.clear_history())
        btn_box.append(clear_btn)
        btn_box.append(self.send_btn)
        self.append(btn_box)

        self.refresh_models()

    def refresh_models(self):
        def worker():
            data = self.client.get_models()
            if data and "data" in data:
                models = [m["id"] for m in data["data"]]
                GLib.idle_add(self._populate_models, models)

        threading.Thread(target=worker, daemon=True).start()

    def _populate_models(self, models: list):
        self.model_combo.remove_all()
        for m in models:
            self.model_combo.append(m, m)
        if models:
            self.model_combo.set_active(0)

    def clear_history(self):
        self.messages = []
        self.history_buffer.set_text("")

    def on_send(self, *_):
        user_msg = self.user_entry.get_text().strip()
        if not user_msg:
            return
        model = self.model_combo.get_active_id()
        if not model:
            error_dialog(self.parent_window, "No Model Selected", "Please select a model first.")
            return

        # Build messages
        msgs = []
        system = self.system_entry.get_text().strip()
        if system:
            msgs.append({"role": "system", "content": system})
        msgs.extend(self.messages)
        msgs.append({"role": "user", "content": user_msg})

        self.user_entry.set_text("")
        self.send_btn.set_sensitive(False)
        self.append_to_history(f"You: {user_msg}\n")

        def worker():
            try:
                with self.client.chat_completion(model, msgs, stream=True) as response:
                    if response.status_code != 200:
                        GLib.idle_add(self.append_to_history, f"[Error: {response.text}]\n")
                        return
                    assistant_msg = ""
                    for line in response.iter_lines():
                        if not line:
                            continue
                        if line.startswith("data: "):
                            chunk = line[6:]
                            if chunk == "[DONE]":
                                break
                            try:
                                data = json.loads(chunk)
                                delta = data.get("choices", [{}])[0].get("delta", {})
                                content = delta.get("content", "")
                                if content:
                                    assistant_msg += content
                                    GLib.idle_add(self.append_to_history, content)
                            except Exception:
                                pass
                    GLib.idle_add(self.append_to_history, "\n")
                    # Update message history
                    self.messages.append({"role": "user", "content": user_msg})
                    self.messages.append({"role": "assistant", "content": assistant_msg})
            except Exception as e:
                GLib.idle_add(self.append_to_history, f"[Error: {e}]\n")
            finally:
                GLib.idle_add(self.send_btn.set_sensitive, True)

        threading.Thread(target=worker, daemon=True).start()

    def append_to_history(self, text: str):
        end = self.history_buffer.get_end_iter()
        self.history_buffer.insert(end, text)
        mark = self.history_buffer.create_mark(None, self.history_buffer.get_end_iter(), False)
        self.history_view.scroll_to_mark(mark, 0.0, True, 0.0, 1.0)

################################################################################
# FILE: lmarena_bridge_gui/ui/model_manager.py
################################################################################
from __future__ import annotations
import json
import os
import threading
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib
from ..utils.http_client import BridgeClient
from .widgets import info_dialog, error_dialog, confirm_dialog

class ModelManager(Gtk.Box):
    def __init__(self, parent_window: Gtk.Window, client: BridgeClient):
        super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6, margin_top=6, margin_bottom=6, margin_start=6, margin_end=6)
        self.parent_window = parent_window
        self.client = client
        self.models = {}
        self._build()
        self.load_models()

    def _build(self):
        # Toolbar
        toolbar = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.append(toolbar)
        add_btn = Gtk.Button(label="Add Model")
        add_btn.connect("clicked", self.on_add_model)
        toolbar.append(add_btn)
        refresh_btn = Gtk.Button(label="Refresh from Server")
        refresh_btn.connect("clicked", lambda *_: self.refresh_from_server())
        toolbar.append(refresh_btn)

        # Model list
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_vexpand(True)
        scrolled.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.append(scrolled)

        self.list_store = Gtk.ListStore(str, str, str)  # name, id, type
        self.tree_view = Gtk.TreeView(model=self.list_store)

        for i, title in enumerate(["Model Name", "Model ID", "Type"]):
            renderer = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn(title, renderer, text=i)
            column.set_resizable(True)
            column.set_sort_column_id(i)
            self.tree_view.append_column(column)

        scrolled.set_child(self.tree_view)

        # Action buttons
        btn_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        btn_box.set_halign(Gtk.Align.END)
        edit_btn = Gtk.Button(label="Edit")
        edit_btn.connect("clicked", self.on_edit_model)
        delete_btn = Gtk.Button(label="Delete")
        delete_btn.add_css_class("destructive-action")
        delete_btn.connect("clicked", self.on_delete_model)
        btn_box.append(edit_btn)
        btn_box.append(delete_btn)
        self.append(btn_box)

    def load_models(self):
        def worker():
            try:
                from lmarena_bridge.settings import MODELS_PATH
                if os.path.exists(MODELS_PATH):
                    with open(MODELS_PATH, "r") as f:
                        raw = json.load(f)
                        models = {}
                        for name, val in raw.items():
                            if isinstance(val, str) and ":" in val:
                                mid, mtype = val.split(":", 1)
                                models[name] = {"id": mid if mid.lower() != "null" else None, "type": mtype}
                            else:
                                models[name] = {"id": val, "type": "text"}
                        GLib.idle_add(self._populate_list, models)
            except Exception as e:
                GLib.idle_add(error_dialog, self.parent_window, "Failed to load models", str(e))

        threading.Thread(target=worker, daemon=True).start()

    def _populate_list(self, models: dict):
        self.models = models
        self.list_store.clear()
        for name, info in sorted(models.items()):
            self.list_store.append([name, info.get("id") or "null", info.get("type", "text")])

    def refresh_from_server(self):
        def worker():
            ok, msg = self.client.request_model_update()
            if ok:
                GLib.idle_add(info_dialog, self.parent_window, "Model Update", "Requested model list from browser. Wait a moment, then click 'Refresh'.")
            else:
                GLib.idle_add(error_dialog, self.parent_window, "Failed", msg)

        threading.Thread(target=worker, daemon=True).start()

    def on_add_model(self, *_):
        dialog = ModelDialog(self.parent_window, "Add Model", None, None, "text")
        dialog.present()
        dialog.connect("response", self._on_dialog_response)

    def on_edit_model(self, *_):
        selection = self.tree_view.get_selection()
        model, treeiter = selection.get_selected()
        if not treeiter:
            error_dialog(self.parent_window, "No Selection", "Please select a model to edit.")
            return
        name = model[treeiter][0]
        mid = model[treeiter][1]
        mtype = model[treeiter][2]
        dialog = ModelDialog(self.parent_window, "Edit Model", name, mid, mtype)
        dialog.present()
        dialog.connect("response", self._on_dialog_response)

    def on_delete_model(self, *_):
        selection = self.tree_view.get_selection()
        model, treeiter = selection.get_selected()
        if not treeiter:
            error_dialog(self.parent_window, "No Selection", "Please select a model to delete.")
            return
        name = model[treeiter][0]
        confirm_dialog(self.parent_window, "Delete Model", f"Are you sure you want to delete '{name}'?", lambda: self._delete_model(name))

    def _delete_model(self, name: str):
        def worker():
            try:
                from lmarena_bridge.settings import MODELS_PATH
                with open(MODELS_PATH, "r") as f:
                    raw = json.load(f)
                if name in raw:
                    del raw[name]
                with open(MODELS_PATH, "w") as f:
                    json.dump(raw, f, indent=2, ensure_ascii=False)
                GLib.idle_add(info_dialog, self.parent_window, "Deleted", f"Model '{name}' deleted.")
                GLib.idle_add(self.load_models)
            except Exception as e:
                GLib.idle_add(error_dialog, self.parent_window, "Failed", str(e))

        threading.Thread(target=worker, daemon=True).start()

    def _on_dialog_response(self, dialog: Gtk.Dialog, response_id: int):
        if response_id == Gtk.ResponseType.OK:
            name = dialog.name_entry.get_text().strip()
            mid = dialog.id_entry.get_text().strip()
            mtype = dialog.type_combo.get_active_id() or "text"
            old_name = dialog.old_name

            if not name:
                error_dialog(self.parent_window, "Invalid", "Model name cannot be empty.")
                return

            def worker():
                try:
                    from lmarena_bridge.settings import MODELS_PATH
                    with open(MODELS_PATH, "r") as f:
                        raw = json.load(f)
                    # Remove old if editing
                    if old_name and old_name != name and old_name in raw:
                        del raw[old_name]
                    # Add/update
                    if mid:
                        raw[name] = f"{mid}:{mtype}"
                    else:
                        raw[name] = f"null:{mtype}"
                    with open(MODELS_PATH, "w") as f:
                        json.dump(raw, f, indent=2, ensure_ascii=False)
                    GLib.idle_add(info_dialog, self.parent_window, "Saved", f"Model '{name}' saved.")
                    GLib.idle_add(self.load_models)
                except Exception as e:
                    GLib.idle_add(error_dialog, self.parent_window, "Failed", str(e))

            threading.Thread(target=worker, daemon=True).start()

        dialog.destroy()

class ModelDialog(Gtk.Dialog):
    def __init__(self, parent: Gtk.Window, title: str, name: str | None, mid: str | None, mtype: str):
        super().__init__(transient_for=parent, modal=True, title=title)
        self.old_name = name
        self.set_default_size(400, -1)

        box = self.get_content_area()
        box.set_spacing(8)
        box.set_margin_top(12)
        box.set_margin_bottom(12)
        box.set_margin_start(12)
        box.set_margin_end(12)

        grid = Gtk.Grid(column_spacing=12, row_spacing=8)
        box.append(grid)

        grid.attach(Gtk.Label(label="Model Name:", xalign=0), 0, 0, 1, 1)
        self.name_entry = Gtk.Entry()
        self.name_entry.set_text(name or "")
        self.name_entry.set_hexpand(True)
        grid.attach(self.name_entry, 1, 0, 1, 1)

        grid.attach(Gtk.Label(label="Model ID:", xalign=0), 0, 1, 1, 1)
        self.id_entry = Gtk.Entry()
        self.id_entry.set_text(mid or "")
        self.id_entry.set_placeholder_text("Leave empty for 'null'")
        grid.attach(self.id_entry, 1, 1, 1, 1)

        grid.attach(Gtk.Label(label="Type:", xalign=0), 0, 2, 1, 1)
        self.type_combo = Gtk.ComboBoxText()
        self.type_combo.append("text", "Text")
        self.type_combo.append("image", "Image")
        self.type_combo.set_active_id(mtype or "text")
        grid.attach(self.type_combo, 1, 2, 1, 1)

        self.add_button("Cancel", Gtk.ResponseType.CANCEL)
        self.add_button("Save", Gtk.ResponseType.OK)

################################################################################
# FILE: lmarena_bridge_gui/ui/endpoint_mapper.py
################################################################################
from __future__ import annotations
import json
import os
import threading
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib
from ..utils.http_client import BridgeClient
from .widgets import info_dialog, error_dialog, confirm_dialog

class EndpointMapper(Gtk.Box):
    def __init__(self, parent_window: Gtk.Window, client: BridgeClient):
        super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6, margin_top=6, margin_bottom=6, margin_start=6, margin_end=6)
        self.parent_window = parent_window
        self.client = client
        self.mappings = {}
        self._build()
        self.load_mappings()

    def _build(self):
        # Info label
        info = Gtk.Label(label="Map models to specific session/message IDs and modes.", xalign=0, wrap=True)
        info.add_css_class("dim-label")
        self.append(info)

        # Toolbar
        toolbar = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6, margin_top=6)
        self.append(toolbar)
        add_btn = Gtk.Button(label="Add Mapping")
        add_btn.connect("clicked", self.on_add)
        toolbar.append(add_btn)

        # List
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_vexpand(True)
        scrolled.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.append(scrolled)

        self.list_store = Gtk.ListStore(str, str, str, str, str)  # model, session_id, message_id, mode, target
        self.tree_view = Gtk.TreeView(model=self.list_store)

        for i, title in enumerate(["Model", "Session ID", "Message ID", "Mode", "Target"]):
            renderer = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn(title, renderer, text=i)
            column.set_resizable(True)
            self.tree_view.append_column(column)

        scrolled.set_child(self.tree_view)

        # Actions
        btn_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        btn_box.set_halign(Gtk.Align.END)
        edit_btn = Gtk.Button(label="Edit")
        edit_btn.connect("clicked", self.on_edit)
        delete_btn = Gtk.Button(label="Delete")
        delete_btn.add_css_class("destructive-action")
        delete_btn.connect("clicked", self.on_delete)
        btn_box.append(edit_btn)
        btn_box.append(delete_btn)
        self.append(btn_box)

    def load_mappings(self):
        def worker():
            try:
                from lmarena_bridge.settings import MODEL_ENDPOINT_MAP_PATH
                if os.path.exists(MODEL_ENDPOINT_MAP_PATH):
                    with open(MODEL_ENDPOINT_MAP_PATH, "r") as f:
                        mappings = json.load(f)
                        GLib.idle_add(self._populate_list, mappings)
            except Exception as e:
                GLib.idle_add(error_dialog, self.parent_window, "Failed to load mappings", str(e))

        threading.Thread(target=worker, daemon=True).start()

    def _populate_list(self, mappings: dict):
        self.mappings = mappings
        self.list_store.clear()
        for model, val in sorted(mappings.items()):
            # Handle both list and dict formats
            entries = val if isinstance(val, list) else [val]
            for entry in entries:
                sid = entry.get("session_id", "")
                mid = entry.get("message_id", "")
                mode = entry.get("mode", "direct_chat")
                target = entry.get("battle_target", "")
                self.list_store.append([model, sid, mid, mode, target])

    def on_add(self, *_):
        dialog = EndpointDialog(self.parent_window, "Add Endpoint", None, None, None, "direct_chat", "A")
        dialog.present()
        dialog.connect("response", self._on_dialog_response)

    def on_edit(self, *_):
        selection = self.tree_view.get_selection()
        model, treeiter = selection.get_selected()
        if not treeiter:
            error_dialog(self.parent_window, "No Selection", "Please select a mapping to edit.")
            return
        name = model[treeiter][0]
        sid = model[treeiter][1]
        mid = model[treeiter][2]
        mode = model[treeiter][3]
        target = model[treeiter][4]
        dialog = EndpointDialog(self.parent_window, "Edit Endpoint", name, sid, mid, mode, target)
        dialog.present()
        dialog.connect("response", self._on_dialog_response)

    def on_delete(self, *_):
        selection = self.tree_view.get_selection()
        model, treeiter = selection.get_selected()
        if not treeiter:
            error_dialog(self.parent_window, "No Selection", "Please select a mapping to delete.")
            return
        name = model[treeiter][0]
        confirm_dialog(self.parent_window, "Delete Mapping", f"Delete mapping for '{name}'?", lambda: self._delete_mapping(name))

    def _delete_mapping(self, name: str):
        def worker():
            try:
                from lmarena_bridge.settings import MODEL_ENDPOINT_MAP_PATH
                with open(MODEL_ENDPOINT_MAP_PATH, "r") as f:
                    raw = json.load(f)
                if name in raw:
                    del raw[name]
                with open(MODEL_ENDPOINT_MAP_PATH, "w") as f:
                    json.dump(raw, f, indent=2, ensure_ascii=False)
                GLib.idle_add(info_dialog, self.parent_window, "Deleted", f"Mapping for '{name}' deleted.")
                GLib.idle_add(self.load_mappings)
            except Exception as e:
                GLib.idle_add(error_dialog, self.parent_window, "Failed", str(e))

        threading.Thread(target=worker, daemon=True).start()

    def _on_dialog_response(self, dialog: Gtk.Dialog, response_id: int):
        if response_id == Gtk.ResponseType.OK:
            model = dialog.model_entry.get_text().strip()
            sid = dialog.sid_entry.get_text().strip()
            mid = dialog.mid_entry.get_text().strip()
            mode = dialog.mode_combo.get_active_id() or "direct_chat"
            target = dialog.target_combo.get_active_id() or "A"

            if not (model and sid and mid):
                error_dialog(self.parent_window, "Invalid", "Model name, Session ID, and Message ID are required.")
                return

            def worker():
                try:
                    from lmarena_bridge.settings import MODEL_ENDPOINT_MAP_PATH
                    with open(MODEL_ENDPOINT_MAP_PATH, "r") as f:
                        raw = json.load(f)
                    # Simple single-entry format for now
                    raw[model] = {
                        "session_id": sid,
                        "message_id": mid,
                        "mode": mode,
                        "battle_target": target,
                    }
                    with open(MODEL_ENDPOINT_MAP_PATH, "w") as f:
                        json.dump(raw, f, indent=2, ensure_ascii=False)
                    GLib.idle_add(info_dialog, self.parent_window, "Saved", f"Mapping for '{model}' saved.")
                    GLib.idle_add(self.load_mappings)
                except Exception as e:
                    GLib.idle_add(error_dialog, self.parent_window, "Failed", str(e))

            threading.Thread(target=worker, daemon=True).start()

        dialog.destroy()

class EndpointDialog(Gtk.Dialog):
    def __init__(self, parent: Gtk.Window, title: str, model: str | None, sid: str | None, mid: str | None, mode: str, target: str):
        super().__init__(transient_for=parent, modal=True, title=title)
        self.set_default_size(500, -1)

        box = self.get_content_area()
        box.set_spacing(8)
        box.set_margin_top(12)
        box.set_margin_bottom(12)
        box.set_margin_start(12)
        box.set_margin_end(12)

        grid = Gtk.Grid(column_spacing=12, row_spacing=8)
        box.append(grid)

        grid.attach(Gtk.Label(label="Model Name:", xalign=0), 0, 0, 1, 1)
        self.model_entry = Gtk.Entry()
        self.model_entry.set_text(model or "")
        self.model_entry.set_hexpand(True)
        grid.attach(self.model_entry, 1, 0, 1, 1)

        grid.attach(Gtk.Label(label="Session ID:", xalign=0), 0, 1, 1, 1)
        self.sid_entry = Gtk.Entry()
        self.sid_entry.set_text(sid or "")
        grid.attach(self.sid_entry, 1, 1, 1, 1)

        grid.attach(Gtk.Label(label="Message ID:", xalign=0), 0, 2, 1, 1)
        self.mid_entry = Gtk.Entry()
        self.mid_entry.set_text(mid or "")
        grid.attach(self.mid_entry, 1, 2, 1, 1)

        grid.attach(Gtk.Label(label="Mode:", xalign=0), 0, 3, 1, 1)
        self.mode_combo = Gtk.ComboBoxText()
        self.mode_combo.append("direct_chat", "Direct Chat")
        self.mode_combo.append("battle", "Battle")
        self.mode_combo.set_active_id(mode or "direct_chat")
        grid.attach(self.mode_combo, 1, 3, 1, 1)

        grid.attach(Gtk.Label(label="Battle Target:", xalign=0), 0, 4, 1, 1)
        self.target_combo = Gtk.ComboBoxText()
        self.target_combo.append("A", "Assistant A")
        self.target_combo.append("B", "Assistant B")
        self.target_combo.set_active_id(target or "A")
        grid.attach(self.target_combo, 1, 4, 1, 1)

        self.add_button("Cancel", Gtk.ResponseType.CANCEL)
        self.add_button("Save", Gtk.ResponseType.OK)

################################################################################
# FILE: lmarena_bridge_gui/ui/setup_wizard.py
################################################################################
from __future__ import annotations
import webbrowser
import threading
import time
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib
from ..utils.http_client import BridgeClient
from .widgets import info_dialog, error_dialog

class SetupWizard(Gtk.Assistant):
    def __init__(self, parent: Gtk.Window, client: BridgeClient, on_complete_callback):
        super().__init__(transient_for=parent, modal=True)
        self.client = client
        self.on_complete = on_complete_callback
        self.set_default_size(600, 400)
        self._build()

    def _build(self):
        # Page 1: Welcome
        page1 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=24, margin_bottom=24, margin_start=24, margin_end=24)
        label = Gtk.Label(label="<big><b>Welcome to LMArena Bridge</b></big>", use_markup=True)
        page1.append(label)
        desc = Gtk.Label(label="This wizard will help you set up the bridge in a few simple steps.", wrap=True)
        page1.append(desc)
        self.append_page(page1)
        self.set_page_type(page1, Gtk.AssistantPageType.INTRO)
        self.set_page_title(page1, "Welcome")
        self.set_page_complete(page1, True)

        # Page 2: Browser connection
        page2 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=24, margin_bottom=24, margin_start=24, margin_end=24)
        page2.append(Gtk.Label(label="<b>Step 1: Connect Browser</b>", use_markup=True, xalign=0))
        page2.append(Gtk.Label(label="Open https://lmarena.ai in your browser and ensure the Tampermonkey userscript is installed and running.", wrap=True, xalign=0))
        open_btn = Gtk.Button(label="Open LMArena in Browser")
        open_btn.connect("clicked", lambda *_: webbrowser.open_new_tab("https://lmarena.ai"))
        page2.append(open_btn)
        self.browser_status = Gtk.Label(label="Status: Not Connected", xalign=0)
        page2.append(self.browser_status)
        self.append_page(page2)
        self.set_page_type(page2, Gtk.AssistantPageType.CONTENT)
        self.set_page_title(page2, "Browser Connection")
        self.page2 = page2
        GLib.timeout_add_seconds(2, self._check_browser)

        # Page 3: ID Capture
        page3 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=24, margin_bottom=24, margin_start=24, margin_end=24)
        page3.append(Gtk.Label(label="<b>Step 2: Capture Session IDs</b>", use_markup=True, xalign=0))
        page3.append(Gtk.Label(label="Click the button below, then go to LMArena and click 'Retry' on any conversation to capture session IDs.", wrap=True, xalign=0))
        capture_btn = Gtk.Button(label="Start ID Capture")
        capture_btn.connect("clicked", self._on_capture)
        page3.append(capture_btn)
        self.capture_status = Gtk.Label(label="Status: Waiting", xalign=0)
        page3.append(self.capture_status)
        self.append_page(page3)
        self.set_page_type(page3, Gtk.AssistantPageType.CONTENT)
        self.set_page_title(page3, "ID Capture")
        self.page3 = page3

        # Page 4: Model Refresh
        page4 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=24, margin_bottom=24, margin_start=24, margin_end=24)
        page4.append(Gtk.Label(label="<b>Step 3: Refresh Model List (Optional)</b>", use_markup=True, xalign=0))
        page4.append(Gtk.Label(label="Click below to request the latest model list from LMArena.", wrap=True, xalign=0))
        refresh_btn = Gtk.Button(label="Request Model Update")
        refresh_btn.connect("clicked", self._on_model_refresh)
        page4.append(refresh_btn)
        self.model_status = Gtk.Label(label="Status: Ready", xalign=0)
        page4.append(self.model_status)
        self.append_page(page4)
        self.set_page_type(page4, Gtk.AssistantPageType.CONTENT)
        self.set_page_title(page4, "Model Refresh")
        self.set_page_complete(page4, True)

        # Page 5: Complete
        page5 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12, margin_top=24, margin_bottom=24, margin_start=24, margin_end=24)
        page5.append(Gtk.Label(label="<big><b>Setup Complete!</b></big>", use_markup=True))
        page5.append(Gtk.Label(label="You can now use the bridge. Check the Chat Playground tab to test.", wrap=True))
        self.append_page(page5)
        self.set_page_type(page5, Gtk.AssistantPageType.CONFIRM)
        self.set_page_title(page5, "Complete")
        self.set_page_complete(page5, True)

        self.connect("cancel", lambda *_: self.destroy())
        self.connect("close", self._on_close)

    def _check_browser(self):
        status = self.client.get_status()
        if status and status.get("has_browser"):
            self.browser_status.set_text("Status: ✅ Connected")
            self.set_page_complete(self.page2, True)
        else:
            self.browser_status.set_text("Status: ⏳ Waiting for connection...")
            return True  # keep polling
        return False

    def _on_capture(self, *_):
        def worker():
            ok, msg = self.client.start_id_capture()
            if ok:
                GLib.idle_add(self.capture_status.set_text, "Status: Activated. Go to LMArena and click 'Retry'.")
                time.sleep(3)
                # Poll for updated IDs
                for _ in range(10):
                    time.sleep(2)
                    cfg = self.client.get_config()
                    if cfg and cfg.get("session_id") and "YOUR_" not in cfg.get("session_id", ""):
                        GLib.idle_add(self.capture_status.set_text, "Status: ✅ IDs Captured!")
                        GLib.idle_add(self.set_page_complete, self.page3, True)
                        return
                GLib.idle_add(self.capture_status.set_text, "Status: ⏳ Still waiting. Did you click 'Retry'?")
            else:
                GLib.idle_add(self.capture_status.set_text, f"Status: ❌ {msg}")

        threading.Thread(target=worker, daemon=True).start()

    def _on_model_refresh(self, *_):
        def worker():
            ok, msg = self.client.request_model_update()
            if ok:
                GLib.idle_add(self.model_status.set_text, "Status: ✅ Requested")
            else:
                GLib.idle_add(self.model_status.set_text, f"Status: ❌ {msg}")

        threading.Thread(target=worker, daemon=True).start()

    def _on_close(self, *_):
        self.on_complete()
        self.destroy()

################################################################################
# FILE: lmarena_bridge_gui/ui/main_window.py
################################################################################
from __future__ import annotations
import sys
import subprocess
import threading
import webbrowser
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, GLib, Gio
from ..utils.http_client import BridgeClient
from ..utils.notifications import notify
from .widgets import StatusIndicator, info_dialog, error_dialog
from .log_viewer import LogViewer
from .config_editor import ConfigEditor
from .chat_playground import ChatPlayground
from .model_manager import ModelManager
from .endpoint_mapper import EndpointMapper
from .setup_wizard import SetupWizard

class ServerProcess:
    def __init__(self):
        self.proc = None
        self.thread = None
        self.running = False

class MainWindow(Gtk.ApplicationWindow):
    def __init__(self, app: Gtk.Application, client: BridgeClient):
        super().__init__(application=app, title="LMArena Bridge")
        self.set_default_size(1000, 700)
        self.client = client
        self.server = ServerProcess()
        self._build_ui()
        self._start_polling()

    def _build_ui(self):
        # Header bar
        header = Gtk.HeaderBar()
        self.set_titlebar(header)

        # Menu
        menu_btn = Gtk.MenuButton()
        menu_btn.set_icon_name("open-menu-symbolic")
        header.pack_end(menu_btn)

        menu = Gio.Menu()
        menu.append("Run Setup Wizard", "app.setup_wizard")
        menu.append("About", "app.about")
        menu_btn.set_menu_model(menu)

        # Status indicator
        self.status_indicator = StatusIndicator()
        header.pack_start(self.status_indicator)

        # Main box
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.set_child(vbox)

        # Toolbar
        toolbar = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6, margin_top=6, margin_start=6, margin_end=6)
        toolbar.add_css_class("toolbar")
        vbox.append(toolbar)

        self.btn_start = Gtk.Button(label="Start Server")
        self.btn_start.connect("clicked", self.on_start_server)
        toolbar.append(self.btn_start)

        self.btn_stop = Gtk.Button(label="Stop Server")
        self.btn_stop.connect("clicked", self.on_stop_server)
        toolbar.append(self.btn_stop)

        toolbar.append(Gtk.Separator())

        btn_open = Gtk.Button(label="Open LMArena")
        btn_open.connect("clicked", lambda *_: webbrowser.open_new_tab("https://lmarena.ai"))
        toolbar.append(btn_open)

        btn_id = Gtk.Button(label="Capture IDs")
        btn_id.connect("clicked", self.on_capture_ids)
        toolbar.append(btn_id)

        btn_models = Gtk.Button(label="Refresh Models")
        btn_models.connect("clicked", self.on_refresh_models)
        toolbar.append(btn_models)

        # Notebook
        self.notebook = Gtk.Notebook()
        self.notebook.set_vexpand(True)
        vbox.append(self.notebook)

        # Tabs
        self.chat_playground = ChatPlayground(self, self.client)
        self.notebook.append_page(self.chat_playground, Gtk.Label(label="Chat Playground"))

        self.config_editor = ConfigEditor(self, self.client)
        self.notebook.append_page(self.config_editor, Gtk.Label(label="Configuration"))

        self.model_manager = ModelManager(self, self.client)
        self.notebook.append_page(self.model_manager, Gtk.Label(label="Models"))

        self.endpoint_mapper = EndpointMapper(self, self.client)
        self.notebook.append_page(self.endpoint_mapper, Gtk.Label(label="Endpoint Mapping"))

        self.logs = LogViewer()
        self.notebook.append_page(self.logs, Gtk.Label(label="Logs"))

        # Status bar
        self.status_bar = Gtk.Label(label="Ready", xalign=0, margin_start=6, margin_end=6, margin_top=3, margin_bottom=3)
        self.status_bar.add_css_class("dim-label")
        vbox.append(self.status_bar)

        self._update_buttons()

    def _update_buttons(self):
        self.btn_start.set_sensitive(not self.server.running)
        self.btn_stop.set_sensitive(self.server.running)

    def on_start_server(self, *_):
        if self.server.running:
            return

        def launch():
            cmds = [
                ["lmarena-bridge"],
                [sys.executable, "-m", "lmarena_bridge.main"],
            ]
            port = self._get_port()
            for cmd in cmds:
                try:
                    proc = subprocess.Popen(
                        cmd + ["--port", str(port)],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True,
                        bufsize=1,
                    )
                    self.server.proc = proc
                    self.server.running = True
                    GLib.idle_add(self._update_buttons)
                    t = threading.Thread(target=self._read_logs, args=(proc,), daemon=True)
                    t.start()
                    self.server.thread = t
                    GLib.idle_add(self.logs.append, f"🚀 Started: {' '.join(cmd)}\n")
                    GLib.idle_add(notify, "LMArena Bridge", "Server started", "normal")
                    return
                except Exception as e:
                    GLib.idle_add(self.logs.append, f"❌ Failed to start {cmd[0]}: {e}\n")
            GLib.idle_add(error_dialog, self, "Start Failed", "Could not start server. Ensure package is installed.")

        threading.Thread(target=launch, daemon=True).start()

    def _get_port(self) -> int:
        cfg = self.client.get_config()
        if cfg:
            return int(cfg.get("server_port", 5102))
        return 5102

    def _read_logs(self, proc: subprocess.Popen):
        while True:
            if proc.stdout is None:
                break
            line = proc.stdout.readline()
            if not line:
                break
            GLib.idle_add(self.logs.append, line)
        code = proc.wait()
        GLib.idle_add(self.logs.append, f"\n⛔ Process exited with code {code}\n")
        self.server.running = False
        GLib.idle_add(self._update_buttons)
        GLib.idle_add(notify, "LMArena Bridge", "Server stopped", "normal")

    def on_stop_server(self, *_):
        if self.server.proc and self.server.running:
            self.server.proc.terminate()
            try:
                self.server.proc.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.server.proc.kill()
            self.server.running = False
            self._update_buttons()
            self.logs.append("⏹️ Server stopped by user.\n")

    def on_capture_ids(self, *_):
        def worker():
            ok, msg = self.client.start_id_capture()
            if ok:
                GLib.idle_add(info_dialog, self, "ID Capture", "Activated. Now click 'Retry' in LMArena.")
            else:
                GLib.idle_add(error_dialog, self, "Failed", msg)
        threading.Thread(target=worker, daemon=True).start()

    def on_refresh_models(self, *_):
        def worker():
            ok, msg = self.client.request_model_update()
            if ok:
                GLib.idle_add(info_dialog, self, "Model Update", "Requested page source from browser.")
            else:
                GLib.idle_add(error_dialog, self, "Failed", msg)
        threading.Thread(target=worker, daemon=True).start()

    def _start_polling(self):
        GLib.timeout_add_seconds(2, self._poll_status)
        # Initial config load
        self.config_editor.fetch_config()

    def _poll_status(self):
        def worker():
            status = self.client.get_status()
            if status:
                has_browser = status.get("has_browser")
                clients = status.get("connected_clients", [])
                version = status.get("version")
                port = status.get("server_port")
                if has_browser:
                    GLib.idle_add(self.status_indicator.set_status, "connected", f"Connected (v{version}, port {port})")
                else:
                    GLib.idle_add(self.status_indicator.set_status, "warning", f"Server OK (v{version}) but no browser")
                GLib.idle_add(self.status_bar.set_text, f"Clients: {', '.join(clients) if clients else 'None'}")
            else:
                GLib.idle_add(self.status_indicator.set_status, "disconnected", "Not Running")
                GLib.idle_add(self.status_bar.set_text, "Server is not running")

        threading.Thread(target=worker, daemon=True).start()
        return True

################################################################################
# FILE: lmarena_bridge_gui/utils/__init__.py
################################################################################
__all__ = []

################################################################################
# FILE: lmarena_bridge_gui/utils/http_client.py
################################################################################
from __future__ import annotations
import httpx
from typing import Any, Dict, Optional

class BridgeClient:
    def __init__(self, base_url: str = "http://127.0.0.1:5102"):
        self.base_url = base_url.rstrip("/")
        self.timeout = 5.0

    def get_status(self) -> Optional[Dict[str, Any]]:
        try:
            r = httpx.get(f"{self.base_url}/internal/status", timeout=self.timeout)
            return r.json() if r.status_code == 200 else None
        except Exception:
            return None

    def get_config(self) -> Optional[Dict[str, Any]]:
        try:
            r = httpx.get(f"{self.base_url}/internal/config", timeout=self.timeout)
            return r.json() if r.status_code == 200 else None
        except Exception:
            return None

    def patch_config(self, updates: Dict[str, Any]) -> bool:
        try:
            r = httpx.patch(f"{self.base_url}/internal/config", json=updates, timeout=self.timeout)
            return r.status_code == 200
        except Exception:
            return False

    def start_id_capture(self) -> tuple[bool, str]:
        try:
            r = httpx.post(f"{self.base_url}/internal/id_capture/start", timeout=self.timeout)
            if r.status_code == 200:
                return True, "ID capture activated"
            return False, r.text
        except Exception as e:
            return False, str(e)

    def request_model_update(self) -> tuple[bool, str]:
        try:
            r = httpx.post(f"{self.base_url}/internal/request_model_update", timeout=self.timeout)
            if r.status_code == 200:
                return True, "Model update requested"
            return False, r.text
        except Exception as e:
            return False, str(e)

    def get_models(self) -> Optional[Dict[str, Any]]:
        try:
            r = httpx.get(f"{self.base_url}/v1/models", timeout=self.timeout)
            return r.json() if r.status_code == 200 else None
        except Exception:
            return None

    def chat_completion(self, model: str, messages: list, stream: bool = True, timeout: int = 120):
        """Returns httpx.Response for streaming or dict for non-stream"""
        payload = {"model": model, "messages": messages, "stream": stream}
        if stream:
            client = httpx.Client(timeout=timeout)
            return client.stream("POST", f"{self.base_url}/v1/chat/completions", json=payload)
        else:
            r = httpx.post(f"{self.base_url}/v1/chat/completions", json=payload, timeout=timeout)
            return r.json() if r.status_code == 200 else {"error": r.text}

    def healthz(self) -> bool:
        try:
            r = httpx.get(f"{self.base_url}/internal/healthz", timeout=2.0)
            return r.status_code == 200
        except Exception:
            return False

################################################################################
# FILE: lmarena_bridge_gui/utils/notifications.py
################################################################################
from __future__ import annotations
import subprocess
import logging

logger = logging.getLogger(__name__)

def notify(title: str, body: str, urgency: str = "normal"):
    """Send desktop notification via notify-send (Linux)"""
    try:
        subprocess.run(
            ["notify-send", "-u", urgency, title, body],
            check=False,
            timeout=2,
            capture_output=True,
        )
    except Exception as e:
        logger.debug(f"Notification failed: {e}")

################################################################################
# FILE: config/models.json
################################################################################
{
  // LMArena Models Configuration
  // Map friendly model names to LMArena model IDs
  // Format: "friendly_name": "model_uuid[:type]"
  // Type can be "text" (default) or "image"
  
  "gemini-2.5-pro": "YOUR_MODEL_ID:text",
  "gpt-4": "YOUR_MODEL_ID:text", 
  "gpt-4-turbo": "YOUR_MODEL_ID:text",
  "claude-3-opus": "YOUR_MODEL_ID:text",
  "dall-e-3": "null:image",
  "midjourney": "null:image"
}

################################################################################
# FILE: config/model_endpoint_map.json
################################################################################
{
  // Model Endpoint Mapping Configuration
  // Map specific models to specific sessions/modes
  // This allows different models to use different LMArena sessions
  
  // Example of mapping a model to a specific session
  // "model_name": {
  //   "session_id": "specific-session-uuid",
  //   "message_id": "specific-message-uuid", 
  //   "mode": "direct_chat",  // or "battle"
  //   "battle_target": "A"    // only for battle mode
  // }
  
  // Example of mapping with multiple options (random selection)
  // "gpt-5": [
  //   {
  //     "session_id": "session-1-uuid",
  //     "message_id": "message-1-uuid",
  //     "mode": "direct_chat"
  //   },
  //   {
  //     "session_id": "session-2-uuid", 
  //     "message_id": "message-2-uuid",
  //     "mode": "battle",
  //     "battle_target": "A"
  //   }
  // ]
  
  // Default - empty mapping (will use global config)
}

################################################################################
# FILE: tests/__init__.py
################################################################################

